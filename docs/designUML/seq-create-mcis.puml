@startuml

header **CB-Tumblebug** (v0.4.7)
title Basic sequence for creating MCIS
hide footbox

actor	"User"		            as user		    #d1e0ff

participant	"CB-Tumblebug"		as tumblebug     
database	"CB-Tumblebug DB"	as db           

participant	"CB-Spider"			as spider		#e1e0ee
participant	"CB-Draonfly"	    as dragonfly	#e1e0ee

collections	"CSP"	            as csp		    #1ee0ff

skinparam sequence {
    GroupColor DeepSkyBlue
}
skinparam responseMessageBelowArrow true


'activate user
'activate tumblebug


autonumber 1 "<b>[00]"
group Create NameSpace
user	    ->	tumblebug	: POST /ns/:ns
tumblebug	->	db			: Create {NameSpace Obj}
tumblebug	<--	db			: Get {NameSpace Obj}
tumblebug	-->	user	    : Return {NameSpace ID}
end
|||

group Create Resource:vNet 
user	    ->	tumblebug	: POST /ns/:ns/resources/vNet {vNet request}
tumblebug	->	spider		: Create {vNet}
spider	    ->	csp		    : Create {vNet}
tumblebug	<--	spider		: Return {vNet}
tumblebug	->	db			: Create {vNet Obj}
tumblebug	<--	db			: Get {vNet Obj}
tumblebug	-->	user	    : Return {vNet ID}
end
|||

group Create Resource:SecurityGroup 
user	    ->	tumblebug	: POST /ns/:ns/resources/securityGroup {SG request}
tumblebug	->	spider		: Create {SecurityGroup}
spider	    ->	csp		    : Create {SecurityGroup}
tumblebug	<--	spider		: Return {SecurityGroup}
tumblebug	->	db			: Create {SecurityGroup Obj}
tumblebug	<--	db			: Get {SecurityGroup Obj}
tumblebug	-->	user	    : Return {SecurityGroup Obj ID}
end
|||

group Create Resource:SSHKey 
user	    ->	tumblebug	: POST /ns/:ns/resources/sshKey {SSHKey request}
tumblebug	->	spider		: Register {SSHKey}
spider	    ->	csp		    : Register {SSHKey}
tumblebug	<--	spider		: Return {SSHKey}
tumblebug	->	db			: Create {SSHKey Obj}
tumblebug	<--	db			: Get {SSHKey Obj}
tumblebug	-->	user	    : Return {SSHKey Obj ID}
end
|||

group Create Resource:Image 
user	    ->	tumblebug	: POST /ns/:ns/resources/image {Image request}
tumblebug	->	spider		: Lookup {Native Image Info}
spider	    <--	csp		    : Return {Native Image Info}
tumblebug    <--	spider		: Return {Native Image Info}
tumblebug	->	db			: Create {Image Obj}
tumblebug	<--	db			: Get {Image Obj}
tumblebug	-->	user	    : Return {Image Obj ID}
end
|||

group Create Resource:Spec 
user	    ->	tumblebug	: POST /ns/:ns/resources/spec {Spec request}
tumblebug	->	spider		: Lookup {Native Spec Info}
spider	    <--	csp		    : Return {Native Spec Info}
tumblebug    <--	spider		: Return {Native Spec Info}
tumblebug	->	db			: Create {Spec Obj}
tumblebug	<--	db			: Get {Spec Obj}
tumblebug	-->	user	    : Return {Spec Obj ID}
end
|||

group Create MCIS (Multi-Cloud Infra) 
user	    ->	tumblebug	: POST /ns/:ns/mcis {MCIS request}
tumblebug   ->	tumblebug	: Validate {MCIS request}
tumblebug	-->	user	    : Return {Error} if not valid request

tumblebug	->	db			: Create {MCIS Obj}
    loop for all VM requests: Create each VM
    tumblebug	->	spider		: Create {VM}
    spider	    ->	csp		    : Create {VM}
    create collections VM
    csp	    ->  VM		    : Create {VM}
    tumblebug   <--	spider		: Return {VM}
    end
tumblebug	->	db			: Update {MCIS Obj with VM Info}
|||

    loop for all VMs: Check VM is Running 
        loop within TimeOut
        tumblebug	->	spider		: Get {VM Status}
        spider	    ->	csp		    : Get {VM Status}
        tumblebug   <--	spider		: Return {VM Status}
        tumblebug   ->	tumblebug	: Check {VM Status:Running}
        end
    end
tumblebug	->	db			: Update {MCIS Obj with VM Info}
|||

    loop for all VMs: Install CB-Dragonfly Monitoring Agent
    tumblebug   -> tumblebug    : Check Agent is requested
    
    note left
    If not
    requested,
    skip agent
    installation
    end note

    tumblebug   -> dragonfly    : Check CB-Dragonlfy is Alive
    tumblebug	->	db			: Update {MCIS with message} if not alive

    note left
    If Dragonlfy
    is not alive,
    skip agent
    installation
    end note

    tumblebug	->	VM		    : Check SSH is available in VM
    tumblebug	->	dragonfly	: Request Install {VM Access Info}
    dragonfly	->	VM	        : Install {Agent binary}
    dragonfly	<--	VM	        : Return {Agent Installation result}
    tumblebug   <--	dragonfly	: Return {Agent Installation result}
    end
tumblebug	->	db			: Update {MCIS Obj with Agent Info}
tumblebug	<--	db			: Get {MCIS Obj}
|||

    loop for all VMs: Update VM Status 
    tumblebug	->	spider		: Get {VM Status}
    spider	    ->	csp		    : Get {VM Status}
    tumblebug   <--	spider		: Return {VM Status}
    end
tumblebug   ->	tumblebug	: Update {MCIS Obj}
tumblebug	-->	user	    : Return {MCIS Obj}
end


'deactivate tumblebug
'deactivate user

@enduml
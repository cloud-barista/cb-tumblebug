// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cbspider.proto

package cbspider

import (
	context "context"
	fmt "fmt"
	_ "github.com/cloud-barista/cb-spider/api-runtime/grpc-runtime/stub/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Empty 메시지 정의
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// KeyValue 메시지 정의
type KeyValue struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,json=Key,proto3" json:"Key" yaml:"Key"`
	Value                string   `protobuf:"bytes,2,opt,name=value,json=Value,proto3" json:"Value" yaml:"Value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{1}
}
func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return m.Size()
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IID 메시지 정의
type IID struct {
	NameId               string   `protobuf:"bytes,1,opt,name=name_id,json=NameId,proto3" json:"NameId" yaml:"NameId"`
	SystemId             string   `protobuf:"bytes,2,opt,name=system_id,json=SystemId,proto3" json:"SystemId" yaml:"SystemId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IID) Reset()         { *m = IID{} }
func (m *IID) String() string { return proto.CompactTextString(m) }
func (*IID) ProtoMessage()    {}
func (*IID) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{2}
}
func (m *IID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IID.Merge(m, src)
}
func (m *IID) XXX_Size() int {
	return m.Size()
}
func (m *IID) XXX_DiscardUnknown() {
	xxx_messageInfo_IID.DiscardUnknown(m)
}

var xxx_messageInfo_IID proto.InternalMessageInfo

func (m *IID) GetNameId() string {
	if m != nil {
		return m.NameId
	}
	return ""
}

func (m *IID) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

// Boolean 응답 메시지 정의
type BooleanResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,json=Result,proto3" json:"Result" yaml:"Result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BooleanResponse) Reset()         { *m = BooleanResponse{} }
func (m *BooleanResponse) String() string { return proto.CompactTextString(m) }
func (*BooleanResponse) ProtoMessage()    {}
func (*BooleanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{3}
}
func (m *BooleanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BooleanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BooleanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BooleanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanResponse.Merge(m, src)
}
func (m *BooleanResponse) XXX_Size() int {
	return m.Size()
}
func (m *BooleanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanResponse proto.InternalMessageInfo

func (m *BooleanResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// StringResponse 응답 메시지 정의
type StringResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,json=Result,proto3" json:"Result" yaml:"Result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringResponse) Reset()         { *m = StringResponse{} }
func (m *StringResponse) String() string { return proto.CompactTextString(m) }
func (*StringResponse) ProtoMessage()    {}
func (*StringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{4}
}
func (m *StringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringResponse.Merge(m, src)
}
func (m *StringResponse) XXX_Size() int {
	return m.Size()
}
func (m *StringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StringResponse proto.InternalMessageInfo

func (m *StringResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// MessageResponse 응답 메시지 정의
type MessageResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message" yaml:"message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageResponse) Reset()         { *m = MessageResponse{} }
func (m *MessageResponse) String() string { return proto.CompactTextString(m) }
func (*MessageResponse) ProtoMessage()    {}
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{5}
}
func (m *MessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageResponse.Merge(m, src)
}
func (m *MessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MessageResponse proto.InternalMessageInfo

func (m *MessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Status 응답 메시지 정의
type StatusResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,json=Status,proto3" json:"Status" yaml:"Status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{6}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ListCloudOSInfoResponse struct {
	Items                []string `protobuf:"bytes,1,rep,name=items,json=cloudos,proto3" json:"cloudos" yaml:"cloudos"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCloudOSInfoResponse) Reset()         { *m = ListCloudOSInfoResponse{} }
func (m *ListCloudOSInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListCloudOSInfoResponse) ProtoMessage()    {}
func (*ListCloudOSInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{7}
}
func (m *ListCloudOSInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCloudOSInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCloudOSInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCloudOSInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCloudOSInfoResponse.Merge(m, src)
}
func (m *ListCloudOSInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCloudOSInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCloudOSInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCloudOSInfoResponse proto.InternalMessageInfo

func (m *ListCloudOSInfoResponse) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

type CloudDriverInfoRequest struct {
	Item                 *CloudDriverInfo `protobuf:"bytes,1,opt,name=item,json=driver,proto3" json:"driver" yaml:"driver"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CloudDriverInfoRequest) Reset()         { *m = CloudDriverInfoRequest{} }
func (m *CloudDriverInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CloudDriverInfoRequest) ProtoMessage()    {}
func (*CloudDriverInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{8}
}
func (m *CloudDriverInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudDriverInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudDriverInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudDriverInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudDriverInfoRequest.Merge(m, src)
}
func (m *CloudDriverInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloudDriverInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudDriverInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudDriverInfoRequest proto.InternalMessageInfo

func (m *CloudDriverInfoRequest) GetItem() *CloudDriverInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type CloudDriverInfoResponse struct {
	Item                 *CloudDriverInfo `protobuf:"bytes,1,opt,name=item,json=driver,proto3" json:"driver" yaml:"driver"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CloudDriverInfoResponse) Reset()         { *m = CloudDriverInfoResponse{} }
func (m *CloudDriverInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CloudDriverInfoResponse) ProtoMessage()    {}
func (*CloudDriverInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{9}
}
func (m *CloudDriverInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudDriverInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudDriverInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudDriverInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudDriverInfoResponse.Merge(m, src)
}
func (m *CloudDriverInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *CloudDriverInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudDriverInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloudDriverInfoResponse proto.InternalMessageInfo

func (m *CloudDriverInfoResponse) GetItem() *CloudDriverInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListCloudDriverInfoResponse struct {
	Items                []*CloudDriverInfo `protobuf:"bytes,1,rep,name=items,json=driver,proto3" json:"driver" yaml:"driver"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListCloudDriverInfoResponse) Reset()         { *m = ListCloudDriverInfoResponse{} }
func (m *ListCloudDriverInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListCloudDriverInfoResponse) ProtoMessage()    {}
func (*ListCloudDriverInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{10}
}
func (m *ListCloudDriverInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCloudDriverInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCloudDriverInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCloudDriverInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCloudDriverInfoResponse.Merge(m, src)
}
func (m *ListCloudDriverInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCloudDriverInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCloudDriverInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCloudDriverInfoResponse proto.InternalMessageInfo

func (m *ListCloudDriverInfoResponse) GetItems() []*CloudDriverInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type CloudDriverInfo struct {
	DriverName           string   `protobuf:"bytes,1,opt,name=driver_name,json=DriverName,proto3" json:"DriverName" yaml:"DriverName"`
	ProviderName         string   `protobuf:"bytes,2,opt,name=provider_name,json=ProviderName,proto3" json:"ProviderName" yaml:"ProviderName"`
	DriverLibFileName    string   `protobuf:"bytes,3,opt,name=driver_lib_file_name,json=DriverLibFileName,proto3" json:"DriverLibFileName" yaml:"DriverLibFileName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudDriverInfo) Reset()         { *m = CloudDriverInfo{} }
func (m *CloudDriverInfo) String() string { return proto.CompactTextString(m) }
func (*CloudDriverInfo) ProtoMessage()    {}
func (*CloudDriverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{11}
}
func (m *CloudDriverInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudDriverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudDriverInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudDriverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudDriverInfo.Merge(m, src)
}
func (m *CloudDriverInfo) XXX_Size() int {
	return m.Size()
}
func (m *CloudDriverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudDriverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CloudDriverInfo proto.InternalMessageInfo

func (m *CloudDriverInfo) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *CloudDriverInfo) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *CloudDriverInfo) GetDriverLibFileName() string {
	if m != nil {
		return m.DriverLibFileName
	}
	return ""
}

type CloudDriverQryRequest struct {
	DriverName           string   `protobuf:"bytes,1,opt,name=driver_name,json=DriverName,proto3" json:"DriverName" yaml:"DriverName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudDriverQryRequest) Reset()         { *m = CloudDriverQryRequest{} }
func (m *CloudDriverQryRequest) String() string { return proto.CompactTextString(m) }
func (*CloudDriverQryRequest) ProtoMessage()    {}
func (*CloudDriverQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{12}
}
func (m *CloudDriverQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudDriverQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudDriverQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudDriverQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudDriverQryRequest.Merge(m, src)
}
func (m *CloudDriverQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloudDriverQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudDriverQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudDriverQryRequest proto.InternalMessageInfo

func (m *CloudDriverQryRequest) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

type CredentialInfoRequest struct {
	Item                 *CredentialInfo `protobuf:"bytes,1,opt,name=item,json=credential,proto3" json:"credential" yaml:"credential"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CredentialInfoRequest) Reset()         { *m = CredentialInfoRequest{} }
func (m *CredentialInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CredentialInfoRequest) ProtoMessage()    {}
func (*CredentialInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{13}
}
func (m *CredentialInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialInfoRequest.Merge(m, src)
}
func (m *CredentialInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *CredentialInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialInfoRequest proto.InternalMessageInfo

func (m *CredentialInfoRequest) GetItem() *CredentialInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type CredentialInfoResponse struct {
	Item                 *CredentialInfo `protobuf:"bytes,1,opt,name=item,json=credential,proto3" json:"credential" yaml:"credential"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CredentialInfoResponse) Reset()         { *m = CredentialInfoResponse{} }
func (m *CredentialInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CredentialInfoResponse) ProtoMessage()    {}
func (*CredentialInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{14}
}
func (m *CredentialInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialInfoResponse.Merge(m, src)
}
func (m *CredentialInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *CredentialInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialInfoResponse proto.InternalMessageInfo

func (m *CredentialInfoResponse) GetItem() *CredentialInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListCredentialInfoResponse struct {
	Items                []*CredentialInfo `protobuf:"bytes,1,rep,name=items,json=credential,proto3" json:"credential" yaml:"credential"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListCredentialInfoResponse) Reset()         { *m = ListCredentialInfoResponse{} }
func (m *ListCredentialInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListCredentialInfoResponse) ProtoMessage()    {}
func (*ListCredentialInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{15}
}
func (m *ListCredentialInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialInfoResponse.Merge(m, src)
}
func (m *ListCredentialInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialInfoResponse proto.InternalMessageInfo

func (m *ListCredentialInfoResponse) GetItems() []*CredentialInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type CredentialInfo struct {
	CredentialName       string      `protobuf:"bytes,1,opt,name=credential_name,json=CredentialName,proto3" json:"CredentialName" yaml:"CredentialName"`
	ProviderName         string      `protobuf:"bytes,2,opt,name=provider_name,json=ProviderName,proto3" json:"ProviderName" yaml:"ProviderName"`
	KeyValueInfoList     []*KeyValue `protobuf:"bytes,3,rep,name=key_value_info_list,json=KeyValueInfoList,proto3" json:"KeyValueInfoList" yaml:"KeyValueInfoList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CredentialInfo) Reset()         { *m = CredentialInfo{} }
func (m *CredentialInfo) String() string { return proto.CompactTextString(m) }
func (*CredentialInfo) ProtoMessage()    {}
func (*CredentialInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{16}
}
func (m *CredentialInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialInfo.Merge(m, src)
}
func (m *CredentialInfo) XXX_Size() int {
	return m.Size()
}
func (m *CredentialInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialInfo proto.InternalMessageInfo

func (m *CredentialInfo) GetCredentialName() string {
	if m != nil {
		return m.CredentialName
	}
	return ""
}

func (m *CredentialInfo) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *CredentialInfo) GetKeyValueInfoList() []*KeyValue {
	if m != nil {
		return m.KeyValueInfoList
	}
	return nil
}

type CredentialQryRequest struct {
	CredentialName       string   `protobuf:"bytes,1,opt,name=credential_name,json=CredentialName,proto3" json:"CredentialName" yaml:"CredentialName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CredentialQryRequest) Reset()         { *m = CredentialQryRequest{} }
func (m *CredentialQryRequest) String() string { return proto.CompactTextString(m) }
func (*CredentialQryRequest) ProtoMessage()    {}
func (*CredentialQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{17}
}
func (m *CredentialQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialQryRequest.Merge(m, src)
}
func (m *CredentialQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *CredentialQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialQryRequest proto.InternalMessageInfo

func (m *CredentialQryRequest) GetCredentialName() string {
	if m != nil {
		return m.CredentialName
	}
	return ""
}

type RegionInfoRequest struct {
	Item                 *RegionInfo `protobuf:"bytes,1,opt,name=item,json=region,proto3" json:"region" yaml:"region"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegionInfoRequest) Reset()         { *m = RegionInfoRequest{} }
func (m *RegionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*RegionInfoRequest) ProtoMessage()    {}
func (*RegionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{18}
}
func (m *RegionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionInfoRequest.Merge(m, src)
}
func (m *RegionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegionInfoRequest proto.InternalMessageInfo

func (m *RegionInfoRequest) GetItem() *RegionInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type RegionInfoResponse struct {
	Item                 *RegionInfo `protobuf:"bytes,1,opt,name=item,json=region,proto3" json:"region" yaml:"region"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegionInfoResponse) Reset()         { *m = RegionInfoResponse{} }
func (m *RegionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*RegionInfoResponse) ProtoMessage()    {}
func (*RegionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{19}
}
func (m *RegionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionInfoResponse.Merge(m, src)
}
func (m *RegionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegionInfoResponse proto.InternalMessageInfo

func (m *RegionInfoResponse) GetItem() *RegionInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListRegionInfoResponse struct {
	Items                []*RegionInfo `protobuf:"bytes,1,rep,name=items,json=region,proto3" json:"region" yaml:"region"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRegionInfoResponse) Reset()         { *m = ListRegionInfoResponse{} }
func (m *ListRegionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListRegionInfoResponse) ProtoMessage()    {}
func (*ListRegionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{20}
}
func (m *ListRegionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRegionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRegionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRegionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRegionInfoResponse.Merge(m, src)
}
func (m *ListRegionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRegionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRegionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRegionInfoResponse proto.InternalMessageInfo

func (m *ListRegionInfoResponse) GetItems() []*RegionInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type RegionInfo struct {
	RegionName           string      `protobuf:"bytes,1,opt,name=region_name,json=RegionName,proto3" json:"RegionName" yaml:"RegionName"`
	ProviderName         string      `protobuf:"bytes,2,opt,name=provider_name,json=ProviderName,proto3" json:"ProviderName" yaml:"ProviderName"`
	KeyValueInfoList     []*KeyValue `protobuf:"bytes,3,rep,name=key_value_info_list,json=KeyValueInfoList,proto3" json:"KeyValueInfoList" yaml:"KeyValueInfoList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegionInfo) Reset()         { *m = RegionInfo{} }
func (m *RegionInfo) String() string { return proto.CompactTextString(m) }
func (*RegionInfo) ProtoMessage()    {}
func (*RegionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{21}
}
func (m *RegionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionInfo.Merge(m, src)
}
func (m *RegionInfo) XXX_Size() int {
	return m.Size()
}
func (m *RegionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RegionInfo proto.InternalMessageInfo

func (m *RegionInfo) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func (m *RegionInfo) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *RegionInfo) GetKeyValueInfoList() []*KeyValue {
	if m != nil {
		return m.KeyValueInfoList
	}
	return nil
}

type RegionQryRequest struct {
	RegionName           string   `protobuf:"bytes,1,opt,name=region_name,json=RegionName,proto3" json:"RegionName" yaml:"RegionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionQryRequest) Reset()         { *m = RegionQryRequest{} }
func (m *RegionQryRequest) String() string { return proto.CompactTextString(m) }
func (*RegionQryRequest) ProtoMessage()    {}
func (*RegionQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{22}
}
func (m *RegionQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionQryRequest.Merge(m, src)
}
func (m *RegionQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegionQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegionQryRequest proto.InternalMessageInfo

func (m *RegionQryRequest) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

type ConnectionConfigInfoRequest struct {
	Item                 *ConnectionConfigInfo `protobuf:"bytes,1,opt,name=item,json=connectionconfig,proto3" json:"connectionconfig" yaml:"connectionconfig"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ConnectionConfigInfoRequest) Reset()         { *m = ConnectionConfigInfoRequest{} }
func (m *ConnectionConfigInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfigInfoRequest) ProtoMessage()    {}
func (*ConnectionConfigInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{23}
}
func (m *ConnectionConfigInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionConfigInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionConfigInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionConfigInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfigInfoRequest.Merge(m, src)
}
func (m *ConnectionConfigInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionConfigInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfigInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfigInfoRequest proto.InternalMessageInfo

func (m *ConnectionConfigInfoRequest) GetItem() *ConnectionConfigInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ConnectionConfigInfoResponse struct {
	Item                 *ConnectionConfigInfo `protobuf:"bytes,1,opt,name=item,json=connectionconfig,proto3" json:"connectionconfig" yaml:"connectionconfig"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ConnectionConfigInfoResponse) Reset()         { *m = ConnectionConfigInfoResponse{} }
func (m *ConnectionConfigInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfigInfoResponse) ProtoMessage()    {}
func (*ConnectionConfigInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{24}
}
func (m *ConnectionConfigInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionConfigInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionConfigInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionConfigInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfigInfoResponse.Merge(m, src)
}
func (m *ConnectionConfigInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionConfigInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfigInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfigInfoResponse proto.InternalMessageInfo

func (m *ConnectionConfigInfoResponse) GetItem() *ConnectionConfigInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListConnectionConfigInfoResponse struct {
	Items                []*ConnectionConfigInfo `protobuf:"bytes,1,rep,name=items,json=connectionconfig,proto3" json:"connectionconfig" yaml:"connectionconfig"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListConnectionConfigInfoResponse) Reset()         { *m = ListConnectionConfigInfoResponse{} }
func (m *ListConnectionConfigInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListConnectionConfigInfoResponse) ProtoMessage()    {}
func (*ListConnectionConfigInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{25}
}
func (m *ListConnectionConfigInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListConnectionConfigInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListConnectionConfigInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListConnectionConfigInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConnectionConfigInfoResponse.Merge(m, src)
}
func (m *ListConnectionConfigInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListConnectionConfigInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConnectionConfigInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListConnectionConfigInfoResponse proto.InternalMessageInfo

func (m *ListConnectionConfigInfoResponse) GetItems() []*ConnectionConfigInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConnectionConfigInfo struct {
	ConfigName           string   `protobuf:"bytes,1,opt,name=config_name,json=ConfigName,proto3" json:"ConfigName" yaml:"ConfigName"`
	ProviderName         string   `protobuf:"bytes,2,opt,name=provider_name,json=ProviderName,proto3" json:"ProviderName" yaml:"ProviderName"`
	DriverName           string   `protobuf:"bytes,3,opt,name=driver_name,json=DriverName,proto3" json:"DriverName" yaml:"DriverName"`
	CredentialName       string   `protobuf:"bytes,4,opt,name=credential_name,json=CredentialName,proto3" json:"CredentialName" yaml:"CredentialName"`
	RegionName           string   `protobuf:"bytes,5,opt,name=region_name,json=RegionName,proto3" json:"RegionName" yaml:"RegionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectionConfigInfo) Reset()         { *m = ConnectionConfigInfo{} }
func (m *ConnectionConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfigInfo) ProtoMessage()    {}
func (*ConnectionConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{26}
}
func (m *ConnectionConfigInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionConfigInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfigInfo.Merge(m, src)
}
func (m *ConnectionConfigInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfigInfo proto.InternalMessageInfo

func (m *ConnectionConfigInfo) GetConfigName() string {
	if m != nil {
		return m.ConfigName
	}
	return ""
}

func (m *ConnectionConfigInfo) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ConnectionConfigInfo) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *ConnectionConfigInfo) GetCredentialName() string {
	if m != nil {
		return m.CredentialName
	}
	return ""
}

func (m *ConnectionConfigInfo) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

type ConnectionConfigQryRequest struct {
	ConfigName           string   `protobuf:"bytes,1,opt,name=config_name,json=ConfigName,proto3" json:"ConfigName" yaml:"ConfigName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectionConfigQryRequest) Reset()         { *m = ConnectionConfigQryRequest{} }
func (m *ConnectionConfigQryRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfigQryRequest) ProtoMessage()    {}
func (*ConnectionConfigQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{27}
}
func (m *ConnectionConfigQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionConfigQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionConfigQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionConfigQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfigQryRequest.Merge(m, src)
}
func (m *ConnectionConfigQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionConfigQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfigQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfigQryRequest proto.InternalMessageInfo

func (m *ConnectionConfigQryRequest) GetConfigName() string {
	if m != nil {
		return m.ConfigName
	}
	return ""
}

type AllResourceInfoResponse struct {
	Item                 *AllResourceInfo `protobuf:"bytes,1,opt,name=item,json=AllList,proto3" json:"AllList" yaml:"AllList"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AllResourceInfoResponse) Reset()         { *m = AllResourceInfoResponse{} }
func (m *AllResourceInfoResponse) String() string { return proto.CompactTextString(m) }
func (*AllResourceInfoResponse) ProtoMessage()    {}
func (*AllResourceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{28}
}
func (m *AllResourceInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllResourceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllResourceInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllResourceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllResourceInfoResponse.Merge(m, src)
}
func (m *AllResourceInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllResourceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllResourceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllResourceInfoResponse proto.InternalMessageInfo

func (m *AllResourceInfoResponse) GetItem() *AllResourceInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type AllResourceInfo struct {
	MappedList           []*IID   `protobuf:"bytes,1,rep,name=mapped_list,json=MappedList,proto3" json:"MappedList" yaml:"MappedList"`
	OnlySpiderList       []*IID   `protobuf:"bytes,2,rep,name=only_spider_list,json=OnlySpiderList,proto3" json:"OnlySpiderList" yaml:"OnlySpiderList"`
	OnlyCspList          []*IID   `protobuf:"bytes,3,rep,name=only_csp_list,json=OnlyCSPList,proto3" json:"OnlyCSPList" yaml:"OnlyCSPList"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllResourceInfo) Reset()         { *m = AllResourceInfo{} }
func (m *AllResourceInfo) String() string { return proto.CompactTextString(m) }
func (*AllResourceInfo) ProtoMessage()    {}
func (*AllResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{29}
}
func (m *AllResourceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllResourceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllResourceInfo.Merge(m, src)
}
func (m *AllResourceInfo) XXX_Size() int {
	return m.Size()
}
func (m *AllResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllResourceInfo proto.InternalMessageInfo

func (m *AllResourceInfo) GetMappedList() []*IID {
	if m != nil {
		return m.MappedList
	}
	return nil
}

func (m *AllResourceInfo) GetOnlySpiderList() []*IID {
	if m != nil {
		return m.OnlySpiderList
	}
	return nil
}

func (m *AllResourceInfo) GetOnlyCspList() []*IID {
	if m != nil {
		return m.OnlyCspList
	}
	return nil
}

type ImageInfoResponse struct {
	Item                 *ImageInfo `protobuf:"bytes,1,opt,name=item,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ImageInfoResponse) Reset()         { *m = ImageInfoResponse{} }
func (m *ImageInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ImageInfoResponse) ProtoMessage()    {}
func (*ImageInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{30}
}
func (m *ImageInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageInfoResponse.Merge(m, src)
}
func (m *ImageInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageInfoResponse proto.InternalMessageInfo

func (m *ImageInfoResponse) GetItem() *ImageInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListImageInfoResponse struct {
	Items                []*ImageInfo `protobuf:"bytes,1,rep,name=items,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListImageInfoResponse) Reset()         { *m = ListImageInfoResponse{} }
func (m *ListImageInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListImageInfoResponse) ProtoMessage()    {}
func (*ListImageInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{31}
}
func (m *ListImageInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListImageInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListImageInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListImageInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListImageInfoResponse.Merge(m, src)
}
func (m *ListImageInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListImageInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListImageInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListImageInfoResponse proto.InternalMessageInfo

func (m *ListImageInfoResponse) GetItems() []*ImageInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type ImageInfo struct {
	Iid                  *IID        `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	GuestOs              string      `protobuf:"bytes,2,opt,name=guest_os,json=GuestOS,proto3" json:"GuestOS" yaml:"GuestOS"`
	Status               string      `protobuf:"bytes,3,opt,name=status,json=Status,proto3" json:"Status" yaml:"Status"`
	KeyValueList         []*KeyValue `protobuf:"bytes,4,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ImageInfo) Reset()         { *m = ImageInfo{} }
func (m *ImageInfo) String() string { return proto.CompactTextString(m) }
func (*ImageInfo) ProtoMessage()    {}
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{32}
}
func (m *ImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageInfo.Merge(m, src)
}
func (m *ImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *ImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImageInfo proto.InternalMessageInfo

func (m *ImageInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *ImageInfo) GetGuestOs() string {
	if m != nil {
		return m.GuestOs
	}
	return ""
}

func (m *ImageInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ImageInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type ImageCreateRequest struct {
	ConnectionName       string           `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *ImageCreateInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ImageCreateRequest) Reset()         { *m = ImageCreateRequest{} }
func (m *ImageCreateRequest) String() string { return proto.CompactTextString(m) }
func (*ImageCreateRequest) ProtoMessage()    {}
func (*ImageCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{33}
}
func (m *ImageCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageCreateRequest.Merge(m, src)
}
func (m *ImageCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageCreateRequest proto.InternalMessageInfo

func (m *ImageCreateRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *ImageCreateRequest) GetItem() *ImageCreateInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ImageCreateInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageCreateInfo) Reset()         { *m = ImageCreateInfo{} }
func (m *ImageCreateInfo) String() string { return proto.CompactTextString(m) }
func (*ImageCreateInfo) ProtoMessage()    {}
func (*ImageCreateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{34}
}
func (m *ImageCreateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageCreateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageCreateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageCreateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageCreateInfo.Merge(m, src)
}
func (m *ImageCreateInfo) XXX_Size() int {
	return m.Size()
}
func (m *ImageCreateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageCreateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImageCreateInfo proto.InternalMessageInfo

func (m *ImageCreateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImageAllQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageAllQryRequest) Reset()         { *m = ImageAllQryRequest{} }
func (m *ImageAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*ImageAllQryRequest) ProtoMessage()    {}
func (*ImageAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{35}
}
func (m *ImageAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageAllQryRequest.Merge(m, src)
}
func (m *ImageAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageAllQryRequest proto.InternalMessageInfo

func (m *ImageAllQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type ImageQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageQryRequest) Reset()         { *m = ImageQryRequest{} }
func (m *ImageQryRequest) String() string { return proto.CompactTextString(m) }
func (*ImageQryRequest) ProtoMessage()    {}
func (*ImageQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{36}
}
func (m *ImageQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageQryRequest.Merge(m, src)
}
func (m *ImageQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageQryRequest proto.InternalMessageInfo

func (m *ImageQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *ImageQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VMSpecInfoResponse struct {
	Item                 *VMSpecInfo `protobuf:"bytes,1,opt,name=item,json=vmspec,proto3" json:"vmspec" yaml:"vmspec"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VMSpecInfoResponse) Reset()         { *m = VMSpecInfoResponse{} }
func (m *VMSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*VMSpecInfoResponse) ProtoMessage()    {}
func (*VMSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{37}
}
func (m *VMSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMSpecInfoResponse.Merge(m, src)
}
func (m *VMSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *VMSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMSpecInfoResponse proto.InternalMessageInfo

func (m *VMSpecInfoResponse) GetItem() *VMSpecInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListVMSpecInfoResponse struct {
	Items                []*VMSpecInfo `protobuf:"bytes,1,rep,name=items,json=vmspec,proto3" json:"vmspec" yaml:"vmspec"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListVMSpecInfoResponse) Reset()         { *m = ListVMSpecInfoResponse{} }
func (m *ListVMSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListVMSpecInfoResponse) ProtoMessage()    {}
func (*ListVMSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{38}
}
func (m *ListVMSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVMSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVMSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVMSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVMSpecInfoResponse.Merge(m, src)
}
func (m *ListVMSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListVMSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVMSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVMSpecInfoResponse proto.InternalMessageInfo

func (m *ListVMSpecInfoResponse) GetItems() []*VMSpecInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type VMSpecInfo struct {
	Region               string      `protobuf:"bytes,1,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	VCpu                 *VCpuInfo   `protobuf:"bytes,3,opt,name=v_cpu,json=VCpu,proto3" json:"VCpu" yaml:"VCpu"`
	Mem                  string      `protobuf:"bytes,4,opt,name=mem,json=Mem,proto3" json:"Mem" yaml:"Mem"`
	Gpu                  []*GpuInfo  `protobuf:"bytes,5,rep,name=gpu,json=Gpu,proto3" json:"Gpu" yaml:"Gpu"`
	KeyValueList         []*KeyValue `protobuf:"bytes,6,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VMSpecInfo) Reset()         { *m = VMSpecInfo{} }
func (m *VMSpecInfo) String() string { return proto.CompactTextString(m) }
func (*VMSpecInfo) ProtoMessage()    {}
func (*VMSpecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{39}
}
func (m *VMSpecInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMSpecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMSpecInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMSpecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMSpecInfo.Merge(m, src)
}
func (m *VMSpecInfo) XXX_Size() int {
	return m.Size()
}
func (m *VMSpecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VMSpecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VMSpecInfo proto.InternalMessageInfo

func (m *VMSpecInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *VMSpecInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VMSpecInfo) GetVCpu() *VCpuInfo {
	if m != nil {
		return m.VCpu
	}
	return nil
}

func (m *VMSpecInfo) GetMem() string {
	if m != nil {
		return m.Mem
	}
	return ""
}

func (m *VMSpecInfo) GetGpu() []*GpuInfo {
	if m != nil {
		return m.Gpu
	}
	return nil
}

func (m *VMSpecInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type VCpuInfo struct {
	Count                string   `protobuf:"bytes,1,opt,name=count,json=Count,proto3" json:"Count" yaml:"Count"`
	Clock                string   `protobuf:"bytes,2,opt,name=clock,json=Clock,proto3" json:"Clock" yaml:"Clock"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VCpuInfo) Reset()         { *m = VCpuInfo{} }
func (m *VCpuInfo) String() string { return proto.CompactTextString(m) }
func (*VCpuInfo) ProtoMessage()    {}
func (*VCpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{40}
}
func (m *VCpuInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VCpuInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VCpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCpuInfo.Merge(m, src)
}
func (m *VCpuInfo) XXX_Size() int {
	return m.Size()
}
func (m *VCpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VCpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VCpuInfo proto.InternalMessageInfo

func (m *VCpuInfo) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *VCpuInfo) GetClock() string {
	if m != nil {
		return m.Clock
	}
	return ""
}

type GpuInfo struct {
	Count                string   `protobuf:"bytes,1,opt,name=count,json=Count,proto3" json:"Count" yaml:"Count"`
	Mfr                  string   `protobuf:"bytes,2,opt,name=mfr,json=Mfr,proto3" json:"Mfr" yaml:"Mfr"`
	Model                string   `protobuf:"bytes,3,opt,name=model,json=Model,proto3" json:"Model" yaml:"Model"`
	Mem                  string   `protobuf:"bytes,4,opt,name=mem,json=Mem,proto3" json:"Mem" yaml:"Mem"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GpuInfo) Reset()         { *m = GpuInfo{} }
func (m *GpuInfo) String() string { return proto.CompactTextString(m) }
func (*GpuInfo) ProtoMessage()    {}
func (*GpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{41}
}
func (m *GpuInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GpuInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpuInfo.Merge(m, src)
}
func (m *GpuInfo) XXX_Size() int {
	return m.Size()
}
func (m *GpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GpuInfo proto.InternalMessageInfo

func (m *GpuInfo) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *GpuInfo) GetMfr() string {
	if m != nil {
		return m.Mfr
	}
	return ""
}

func (m *GpuInfo) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *GpuInfo) GetMem() string {
	if m != nil {
		return m.Mem
	}
	return ""
}

type VMSpecAllQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMSpecAllQryRequest) Reset()         { *m = VMSpecAllQryRequest{} }
func (m *VMSpecAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*VMSpecAllQryRequest) ProtoMessage()    {}
func (*VMSpecAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{42}
}
func (m *VMSpecAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMSpecAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMSpecAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMSpecAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMSpecAllQryRequest.Merge(m, src)
}
func (m *VMSpecAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMSpecAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMSpecAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMSpecAllQryRequest proto.InternalMessageInfo

func (m *VMSpecAllQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type VMSpecQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMSpecQryRequest) Reset()         { *m = VMSpecQryRequest{} }
func (m *VMSpecQryRequest) String() string { return proto.CompactTextString(m) }
func (*VMSpecQryRequest) ProtoMessage()    {}
func (*VMSpecQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{43}
}
func (m *VMSpecQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMSpecQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMSpecQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMSpecQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMSpecQryRequest.Merge(m, src)
}
func (m *VMSpecQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMSpecQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMSpecQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMSpecQryRequest proto.InternalMessageInfo

func (m *VMSpecQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VMSpecQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VPCInfoResponse struct {
	Item                 *VPCInfo `protobuf:"bytes,1,opt,name=item,json=vpc,proto3" json:"vpc" yaml:"vpc"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCInfoResponse) Reset()         { *m = VPCInfoResponse{} }
func (m *VPCInfoResponse) String() string { return proto.CompactTextString(m) }
func (*VPCInfoResponse) ProtoMessage()    {}
func (*VPCInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{44}
}
func (m *VPCInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCInfoResponse.Merge(m, src)
}
func (m *VPCInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *VPCInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VPCInfoResponse proto.InternalMessageInfo

func (m *VPCInfoResponse) GetItem() *VPCInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListVPCInfoResponse struct {
	Items                []*VPCInfo `protobuf:"bytes,1,rep,name=items,json=vpc,proto3" json:"vpc" yaml:"vpc"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListVPCInfoResponse) Reset()         { *m = ListVPCInfoResponse{} }
func (m *ListVPCInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListVPCInfoResponse) ProtoMessage()    {}
func (*ListVPCInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{45}
}
func (m *ListVPCInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVPCInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVPCInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVPCInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVPCInfoResponse.Merge(m, src)
}
func (m *ListVPCInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListVPCInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVPCInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVPCInfoResponse proto.InternalMessageInfo

func (m *ListVPCInfoResponse) GetItems() []*VPCInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type VPCInfo struct {
	Iid                  *IID          `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	Ipv4Cidr             string        `protobuf:"bytes,2,opt,name=ipv4_cidr,json=IPv4_CIDR,proto3" json:"IPv4_CIDR" yaml:"IPv4_CIDR"`
	SubnetInfoList       []*SubnetInfo `protobuf:"bytes,3,rep,name=subnet_info_list,json=SubnetInfoList,proto3" json:"SubnetInfoList" yaml:"SubnetInfoList"`
	KeyValueList         []*KeyValue   `protobuf:"bytes,4,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VPCInfo) Reset()         { *m = VPCInfo{} }
func (m *VPCInfo) String() string { return proto.CompactTextString(m) }
func (*VPCInfo) ProtoMessage()    {}
func (*VPCInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{46}
}
func (m *VPCInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCInfo.Merge(m, src)
}
func (m *VPCInfo) XXX_Size() int {
	return m.Size()
}
func (m *VPCInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VPCInfo proto.InternalMessageInfo

func (m *VPCInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *VPCInfo) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *VPCInfo) GetSubnetInfoList() []*SubnetInfo {
	if m != nil {
		return m.SubnetInfoList
	}
	return nil
}

func (m *VPCInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type SubnetInfo struct {
	Iid                  *IID        `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	Ipv4Cidr             string      `protobuf:"bytes,2,opt,name=ipv4_cidr,json=IPv4_CIDR,proto3" json:"IPv4_CIDR" yaml:"IPv4_CIDR"`
	KeyValueList         []*KeyValue `protobuf:"bytes,3,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SubnetInfo) Reset()         { *m = SubnetInfo{} }
func (m *SubnetInfo) String() string { return proto.CompactTextString(m) }
func (*SubnetInfo) ProtoMessage()    {}
func (*SubnetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{47}
}
func (m *SubnetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetInfo.Merge(m, src)
}
func (m *SubnetInfo) XXX_Size() int {
	return m.Size()
}
func (m *SubnetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetInfo proto.InternalMessageInfo

func (m *SubnetInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *SubnetInfo) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *SubnetInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type VPCCreateRequest struct {
	ConnectionName       string         `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *VPCCreateInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VPCCreateRequest) Reset()         { *m = VPCCreateRequest{} }
func (m *VPCCreateRequest) String() string { return proto.CompactTextString(m) }
func (*VPCCreateRequest) ProtoMessage()    {}
func (*VPCCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{48}
}
func (m *VPCCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCCreateRequest.Merge(m, src)
}
func (m *VPCCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VPCCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VPCCreateRequest proto.InternalMessageInfo

func (m *VPCCreateRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VPCCreateRequest) GetItem() *VPCCreateInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type VPCCreateInfo struct {
	Name                 string              `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Ipv4Cidr             string              `protobuf:"bytes,2,opt,name=ipv4_cidr,json=IPv4_CIDR,proto3" json:"IPv4_CIDR" yaml:"IPv4_CIDR"`
	SubnetInfoList       []*SubnetCreateInfo `protobuf:"bytes,3,rep,name=subnet_info_list,json=SubnetInfoList,proto3" json:"SubnetInfoList" yaml:"SubnetInfoList"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *VPCCreateInfo) Reset()         { *m = VPCCreateInfo{} }
func (m *VPCCreateInfo) String() string { return proto.CompactTextString(m) }
func (*VPCCreateInfo) ProtoMessage()    {}
func (*VPCCreateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{49}
}
func (m *VPCCreateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCCreateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCCreateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCCreateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCCreateInfo.Merge(m, src)
}
func (m *VPCCreateInfo) XXX_Size() int {
	return m.Size()
}
func (m *VPCCreateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCCreateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VPCCreateInfo proto.InternalMessageInfo

func (m *VPCCreateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VPCCreateInfo) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *VPCCreateInfo) GetSubnetInfoList() []*SubnetCreateInfo {
	if m != nil {
		return m.SubnetInfoList
	}
	return nil
}

type SubnetCreateInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Ipv4Cidr             string   `protobuf:"bytes,2,opt,name=ipv4_cidr,json=IPv4_CIDR,proto3" json:"IPv4_CIDR" yaml:"IPv4_CIDR"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubnetCreateInfo) Reset()         { *m = SubnetCreateInfo{} }
func (m *SubnetCreateInfo) String() string { return proto.CompactTextString(m) }
func (*SubnetCreateInfo) ProtoMessage()    {}
func (*SubnetCreateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{50}
}
func (m *SubnetCreateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetCreateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetCreateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetCreateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetCreateInfo.Merge(m, src)
}
func (m *SubnetCreateInfo) XXX_Size() int {
	return m.Size()
}
func (m *SubnetCreateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetCreateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetCreateInfo proto.InternalMessageInfo

func (m *SubnetCreateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubnetCreateInfo) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

type VPCRegisterRequest struct {
	ConnectionName       string           `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *VPCRegisterInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VPCRegisterRequest) Reset()         { *m = VPCRegisterRequest{} }
func (m *VPCRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*VPCRegisterRequest) ProtoMessage()    {}
func (*VPCRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{51}
}
func (m *VPCRegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCRegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCRegisterRequest.Merge(m, src)
}
func (m *VPCRegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *VPCRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VPCRegisterRequest proto.InternalMessageInfo

func (m *VPCRegisterRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VPCRegisterRequest) GetItem() *VPCRegisterInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type VPCRegisterInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	CspId                string   `protobuf:"bytes,2,opt,name=csp_id,json=CSPId,proto3" json:"CSPId" yaml:"CSPId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCRegisterInfo) Reset()         { *m = VPCRegisterInfo{} }
func (m *VPCRegisterInfo) String() string { return proto.CompactTextString(m) }
func (*VPCRegisterInfo) ProtoMessage()    {}
func (*VPCRegisterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{52}
}
func (m *VPCRegisterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCRegisterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCRegisterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCRegisterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCRegisterInfo.Merge(m, src)
}
func (m *VPCRegisterInfo) XXX_Size() int {
	return m.Size()
}
func (m *VPCRegisterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCRegisterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VPCRegisterInfo proto.InternalMessageInfo

func (m *VPCRegisterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VPCRegisterInfo) GetCspId() string {
	if m != nil {
		return m.CspId
	}
	return ""
}

type VPCAllQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCAllQryRequest) Reset()         { *m = VPCAllQryRequest{} }
func (m *VPCAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*VPCAllQryRequest) ProtoMessage()    {}
func (*VPCAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{53}
}
func (m *VPCAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCAllQryRequest.Merge(m, src)
}
func (m *VPCAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *VPCAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VPCAllQryRequest proto.InternalMessageInfo

func (m *VPCAllQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type VPCQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Force                string   `protobuf:"bytes,3,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCQryRequest) Reset()         { *m = VPCQryRequest{} }
func (m *VPCQryRequest) String() string { return proto.CompactTextString(m) }
func (*VPCQryRequest) ProtoMessage()    {}
func (*VPCQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{54}
}
func (m *VPCQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCQryRequest.Merge(m, src)
}
func (m *VPCQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *VPCQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VPCQryRequest proto.InternalMessageInfo

func (m *VPCQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VPCQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VPCQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type CSPVPCQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,json=Id,proto3" json:"Id" yaml:"Id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSPVPCQryRequest) Reset()         { *m = CSPVPCQryRequest{} }
func (m *CSPVPCQryRequest) String() string { return proto.CompactTextString(m) }
func (*CSPVPCQryRequest) ProtoMessage()    {}
func (*CSPVPCQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{55}
}
func (m *CSPVPCQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSPVPCQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSPVPCQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSPVPCQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSPVPCQryRequest.Merge(m, src)
}
func (m *CSPVPCQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *CSPVPCQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CSPVPCQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CSPVPCQryRequest proto.InternalMessageInfo

func (m *CSPVPCQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *CSPVPCQryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SubnetAddRequest struct {
	ConnectionName       string            `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	VpcName              string            `protobuf:"bytes,2,opt,name=vpc_name,json=VPCName,proto3" json:"VPCName" yaml:"VPCName"`
	Item                 *SubnetCreateInfo `protobuf:"bytes,3,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubnetAddRequest) Reset()         { *m = SubnetAddRequest{} }
func (m *SubnetAddRequest) String() string { return proto.CompactTextString(m) }
func (*SubnetAddRequest) ProtoMessage()    {}
func (*SubnetAddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{56}
}
func (m *SubnetAddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetAddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetAddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetAddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetAddRequest.Merge(m, src)
}
func (m *SubnetAddRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubnetAddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetAddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetAddRequest proto.InternalMessageInfo

func (m *SubnetAddRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *SubnetAddRequest) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *SubnetAddRequest) GetItem() *SubnetCreateInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type SubnetQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	VpcName              string   `protobuf:"bytes,2,opt,name=vpc_name,json=VPCName,proto3" json:"VPCName" yaml:"VPCName"`
	SubnetName           string   `protobuf:"bytes,3,opt,name=subnet_name,json=SubnetName,proto3" json:"SubnetName" yaml:"SubnetName"`
	Force                string   `protobuf:"bytes,4,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubnetQryRequest) Reset()         { *m = SubnetQryRequest{} }
func (m *SubnetQryRequest) String() string { return proto.CompactTextString(m) }
func (*SubnetQryRequest) ProtoMessage()    {}
func (*SubnetQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{57}
}
func (m *SubnetQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetQryRequest.Merge(m, src)
}
func (m *SubnetQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubnetQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetQryRequest proto.InternalMessageInfo

func (m *SubnetQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *SubnetQryRequest) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *SubnetQryRequest) GetSubnetName() string {
	if m != nil {
		return m.SubnetName
	}
	return ""
}

func (m *SubnetQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type CSPSubnetQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	VpcName              string   `protobuf:"bytes,2,opt,name=vpc_name,json=VPCName,proto3" json:"VPCName" yaml:"VPCName"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,json=Id,proto3" json:"Id" yaml:"Id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSPSubnetQryRequest) Reset()         { *m = CSPSubnetQryRequest{} }
func (m *CSPSubnetQryRequest) String() string { return proto.CompactTextString(m) }
func (*CSPSubnetQryRequest) ProtoMessage()    {}
func (*CSPSubnetQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{58}
}
func (m *CSPSubnetQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSPSubnetQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSPSubnetQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSPSubnetQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSPSubnetQryRequest.Merge(m, src)
}
func (m *CSPSubnetQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *CSPSubnetQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CSPSubnetQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CSPSubnetQryRequest proto.InternalMessageInfo

func (m *CSPSubnetQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *CSPSubnetQryRequest) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *CSPSubnetQryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type VPCUnregiserQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCUnregiserQryRequest) Reset()         { *m = VPCUnregiserQryRequest{} }
func (m *VPCUnregiserQryRequest) String() string { return proto.CompactTextString(m) }
func (*VPCUnregiserQryRequest) ProtoMessage()    {}
func (*VPCUnregiserQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{59}
}
func (m *VPCUnregiserQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCUnregiserQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPCUnregiserQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPCUnregiserQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCUnregiserQryRequest.Merge(m, src)
}
func (m *VPCUnregiserQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *VPCUnregiserQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCUnregiserQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VPCUnregiserQryRequest proto.InternalMessageInfo

func (m *VPCUnregiserQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VPCUnregiserQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SecurityInfoResponse struct {
	Item                 *SecurityInfo `protobuf:"bytes,1,opt,name=item,json=securitygroup,proto3" json:"securitygroup" yaml:"securitygroup"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SecurityInfoResponse) Reset()         { *m = SecurityInfoResponse{} }
func (m *SecurityInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SecurityInfoResponse) ProtoMessage()    {}
func (*SecurityInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{60}
}
func (m *SecurityInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityInfoResponse.Merge(m, src)
}
func (m *SecurityInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SecurityInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityInfoResponse proto.InternalMessageInfo

func (m *SecurityInfoResponse) GetItem() *SecurityInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListSecurityInfoResponse struct {
	Items                []*SecurityInfo `protobuf:"bytes,1,rep,name=items,json=securitygroup,proto3" json:"securitygroup" yaml:"securitygroup"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListSecurityInfoResponse) Reset()         { *m = ListSecurityInfoResponse{} }
func (m *ListSecurityInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListSecurityInfoResponse) ProtoMessage()    {}
func (*ListSecurityInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{61}
}
func (m *ListSecurityInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSecurityInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSecurityInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSecurityInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSecurityInfoResponse.Merge(m, src)
}
func (m *ListSecurityInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSecurityInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSecurityInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSecurityInfoResponse proto.InternalMessageInfo

func (m *ListSecurityInfoResponse) GetItems() []*SecurityInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type SecurityInfo struct {
	Iid                  *IID                `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	VpcIid               *IID                `protobuf:"bytes,2,opt,name=vpc_iid,json=VpcIID,proto3" json:"VpcIID" yaml:"VpcIID"`
	Direction            string              `protobuf:"bytes,3,opt,name=direction,json=Direction,proto3" json:"Direction" yaml:"Direction"`
	SecurityRules        []*SecurityRuleInfo `protobuf:"bytes,4,rep,name=security_rules,json=SecurityRules,proto3" json:"SecurityRules" yaml:"SecurityRules"`
	KeyValueList         []*KeyValue         `protobuf:"bytes,5,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SecurityInfo) Reset()         { *m = SecurityInfo{} }
func (m *SecurityInfo) String() string { return proto.CompactTextString(m) }
func (*SecurityInfo) ProtoMessage()    {}
func (*SecurityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{62}
}
func (m *SecurityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityInfo.Merge(m, src)
}
func (m *SecurityInfo) XXX_Size() int {
	return m.Size()
}
func (m *SecurityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityInfo proto.InternalMessageInfo

func (m *SecurityInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *SecurityInfo) GetVpcIid() *IID {
	if m != nil {
		return m.VpcIid
	}
	return nil
}

func (m *SecurityInfo) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *SecurityInfo) GetSecurityRules() []*SecurityRuleInfo {
	if m != nil {
		return m.SecurityRules
	}
	return nil
}

func (m *SecurityInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type SecurityRuleInfo struct {
	FromPort             string   `protobuf:"bytes,1,opt,name=from_port,json=FromPort,proto3" json:"FromPort" yaml:"FromPort"`
	ToPort               string   `protobuf:"bytes,2,opt,name=to_port,json=ToPort,proto3" json:"ToPort" yaml:"ToPort"`
	IpProtocol           string   `protobuf:"bytes,3,opt,name=ip_protocol,json=IPProtocol,proto3" json:"IPProtocol" yaml:"IPProtocol"`
	Direction            string   `protobuf:"bytes,4,opt,name=direction,json=Direction,proto3" json:"Direction" yaml:"Direction"`
	Cidr                 string   `protobuf:"bytes,5,opt,name=cidr,json=CIDR,proto3" json:"CIDR" yaml:"CIDR"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecurityRuleInfo) Reset()         { *m = SecurityRuleInfo{} }
func (m *SecurityRuleInfo) String() string { return proto.CompactTextString(m) }
func (*SecurityRuleInfo) ProtoMessage()    {}
func (*SecurityRuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{63}
}
func (m *SecurityRuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityRuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityRuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityRuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityRuleInfo.Merge(m, src)
}
func (m *SecurityRuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *SecurityRuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityRuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityRuleInfo proto.InternalMessageInfo

func (m *SecurityRuleInfo) GetFromPort() string {
	if m != nil {
		return m.FromPort
	}
	return ""
}

func (m *SecurityRuleInfo) GetToPort() string {
	if m != nil {
		return m.ToPort
	}
	return ""
}

func (m *SecurityRuleInfo) GetIpProtocol() string {
	if m != nil {
		return m.IpProtocol
	}
	return ""
}

func (m *SecurityRuleInfo) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *SecurityRuleInfo) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

type SecurityCreateRequest struct {
	ConnectionName       string              `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *SecurityCreateInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SecurityCreateRequest) Reset()         { *m = SecurityCreateRequest{} }
func (m *SecurityCreateRequest) String() string { return proto.CompactTextString(m) }
func (*SecurityCreateRequest) ProtoMessage()    {}
func (*SecurityCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{64}
}
func (m *SecurityCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityCreateRequest.Merge(m, src)
}
func (m *SecurityCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityCreateRequest proto.InternalMessageInfo

func (m *SecurityCreateRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *SecurityCreateRequest) GetItem() *SecurityCreateInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type SecurityCreateInfo struct {
	Name                 string              `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	VpcName              string              `protobuf:"bytes,2,opt,name=vpc_name,json=VPCName,proto3" json:"VPCName" yaml:"VPCName"`
	Direction            string              `protobuf:"bytes,3,opt,name=direction,json=Direction,proto3" json:"Direction" yaml:"Direction"`
	SecurityRules        []*SecurityRuleInfo `protobuf:"bytes,4,rep,name=security_rules,json=SecurityRules,proto3" json:"SecurityRules" yaml:"SecurityRules"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SecurityCreateInfo) Reset()         { *m = SecurityCreateInfo{} }
func (m *SecurityCreateInfo) String() string { return proto.CompactTextString(m) }
func (*SecurityCreateInfo) ProtoMessage()    {}
func (*SecurityCreateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{65}
}
func (m *SecurityCreateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityCreateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityCreateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityCreateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityCreateInfo.Merge(m, src)
}
func (m *SecurityCreateInfo) XXX_Size() int {
	return m.Size()
}
func (m *SecurityCreateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityCreateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityCreateInfo proto.InternalMessageInfo

func (m *SecurityCreateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecurityCreateInfo) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *SecurityCreateInfo) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *SecurityCreateInfo) GetSecurityRules() []*SecurityRuleInfo {
	if m != nil {
		return m.SecurityRules
	}
	return nil
}

type SecurityRegisterRequest struct {
	ConnectionName       string                `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *SecurityRegisterInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SecurityRegisterRequest) Reset()         { *m = SecurityRegisterRequest{} }
func (m *SecurityRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*SecurityRegisterRequest) ProtoMessage()    {}
func (*SecurityRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{66}
}
func (m *SecurityRegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityRegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityRegisterRequest.Merge(m, src)
}
func (m *SecurityRegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityRegisterRequest proto.InternalMessageInfo

func (m *SecurityRegisterRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *SecurityRegisterRequest) GetItem() *SecurityRegisterInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type SecurityRegisterInfo struct {
	VpcName              string   `protobuf:"bytes,1,opt,name=vpc_name,json=VPCName,proto3" json:"VPCName" yaml:"VPCName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	CspId                string   `protobuf:"bytes,3,opt,name=csp_id,json=CSPId,proto3" json:"CSPId" yaml:"CSPId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecurityRegisterInfo) Reset()         { *m = SecurityRegisterInfo{} }
func (m *SecurityRegisterInfo) String() string { return proto.CompactTextString(m) }
func (*SecurityRegisterInfo) ProtoMessage()    {}
func (*SecurityRegisterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{67}
}
func (m *SecurityRegisterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityRegisterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityRegisterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityRegisterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityRegisterInfo.Merge(m, src)
}
func (m *SecurityRegisterInfo) XXX_Size() int {
	return m.Size()
}
func (m *SecurityRegisterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityRegisterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityRegisterInfo proto.InternalMessageInfo

func (m *SecurityRegisterInfo) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *SecurityRegisterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecurityRegisterInfo) GetCspId() string {
	if m != nil {
		return m.CspId
	}
	return ""
}

type SecurityAllQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecurityAllQryRequest) Reset()         { *m = SecurityAllQryRequest{} }
func (m *SecurityAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*SecurityAllQryRequest) ProtoMessage()    {}
func (*SecurityAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{68}
}
func (m *SecurityAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityAllQryRequest.Merge(m, src)
}
func (m *SecurityAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityAllQryRequest proto.InternalMessageInfo

func (m *SecurityAllQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type SecurityQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Force                string   `protobuf:"bytes,3,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecurityQryRequest) Reset()         { *m = SecurityQryRequest{} }
func (m *SecurityQryRequest) String() string { return proto.CompactTextString(m) }
func (*SecurityQryRequest) ProtoMessage()    {}
func (*SecurityQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{69}
}
func (m *SecurityQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityQryRequest.Merge(m, src)
}
func (m *SecurityQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityQryRequest proto.InternalMessageInfo

func (m *SecurityQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *SecurityQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecurityQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type CSPSecurityQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,json=Id,proto3" json:"Id" yaml:"Id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSPSecurityQryRequest) Reset()         { *m = CSPSecurityQryRequest{} }
func (m *CSPSecurityQryRequest) String() string { return proto.CompactTextString(m) }
func (*CSPSecurityQryRequest) ProtoMessage()    {}
func (*CSPSecurityQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{70}
}
func (m *CSPSecurityQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSPSecurityQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSPSecurityQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSPSecurityQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSPSecurityQryRequest.Merge(m, src)
}
func (m *CSPSecurityQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *CSPSecurityQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CSPSecurityQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CSPSecurityQryRequest proto.InternalMessageInfo

func (m *CSPSecurityQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *CSPSecurityQryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SecurityUnregiserQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecurityUnregiserQryRequest) Reset()         { *m = SecurityUnregiserQryRequest{} }
func (m *SecurityUnregiserQryRequest) String() string { return proto.CompactTextString(m) }
func (*SecurityUnregiserQryRequest) ProtoMessage()    {}
func (*SecurityUnregiserQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{71}
}
func (m *SecurityUnregiserQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityUnregiserQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityUnregiserQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityUnregiserQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityUnregiserQryRequest.Merge(m, src)
}
func (m *SecurityUnregiserQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityUnregiserQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityUnregiserQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityUnregiserQryRequest proto.InternalMessageInfo

func (m *SecurityUnregiserQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *SecurityUnregiserQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type KeyPairInfoResponse struct {
	Item                 *KeyPairInfo `protobuf:"bytes,1,opt,name=item,json=keypair,proto3" json:"keypair" yaml:"keypair"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *KeyPairInfoResponse) Reset()         { *m = KeyPairInfoResponse{} }
func (m *KeyPairInfoResponse) String() string { return proto.CompactTextString(m) }
func (*KeyPairInfoResponse) ProtoMessage()    {}
func (*KeyPairInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{72}
}
func (m *KeyPairInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairInfoResponse.Merge(m, src)
}
func (m *KeyPairInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairInfoResponse proto.InternalMessageInfo

func (m *KeyPairInfoResponse) GetItem() *KeyPairInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListKeyPairInfoResponse struct {
	Items                []*KeyPairInfo `protobuf:"bytes,1,rep,name=items,json=keypair,proto3" json:"keypair" yaml:"keypair"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListKeyPairInfoResponse) Reset()         { *m = ListKeyPairInfoResponse{} }
func (m *ListKeyPairInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListKeyPairInfoResponse) ProtoMessage()    {}
func (*ListKeyPairInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{73}
}
func (m *ListKeyPairInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListKeyPairInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListKeyPairInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListKeyPairInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListKeyPairInfoResponse.Merge(m, src)
}
func (m *ListKeyPairInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListKeyPairInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListKeyPairInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListKeyPairInfoResponse proto.InternalMessageInfo

func (m *ListKeyPairInfoResponse) GetItems() []*KeyPairInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type KeyPairInfo struct {
	Iid                  *IID        `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	Fingerprint          string      `protobuf:"bytes,2,opt,name=fingerprint,json=Fingerprint,proto3" json:"Fingerprint" yaml:"Fingerprint"`
	PublicKey            string      `protobuf:"bytes,3,opt,name=public_key,json=PublicKey,proto3" json:"PublicKey" yaml:"PublicKey"`
	PrivateKey           string      `protobuf:"bytes,4,opt,name=private_key,json=PrivateKey,proto3" json:"PrivateKey" yaml:"PrivateKey"`
	VmUserId             string      `protobuf:"bytes,5,opt,name=vm_user_id,json=VMUserID,proto3" json:"VMUserID" yaml:"VMUserID"`
	KeyValueList         []*KeyValue `protobuf:"bytes,6,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *KeyPairInfo) Reset()         { *m = KeyPairInfo{} }
func (m *KeyPairInfo) String() string { return proto.CompactTextString(m) }
func (*KeyPairInfo) ProtoMessage()    {}
func (*KeyPairInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{74}
}
func (m *KeyPairInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairInfo.Merge(m, src)
}
func (m *KeyPairInfo) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairInfo.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairInfo proto.InternalMessageInfo

func (m *KeyPairInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *KeyPairInfo) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *KeyPairInfo) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *KeyPairInfo) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *KeyPairInfo) GetVmUserId() string {
	if m != nil {
		return m.VmUserId
	}
	return ""
}

func (m *KeyPairInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type KeyPairCreateRequest struct {
	ConnectionName       string             `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *KeyPairCreateInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *KeyPairCreateRequest) Reset()         { *m = KeyPairCreateRequest{} }
func (m *KeyPairCreateRequest) String() string { return proto.CompactTextString(m) }
func (*KeyPairCreateRequest) ProtoMessage()    {}
func (*KeyPairCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{75}
}
func (m *KeyPairCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairCreateRequest.Merge(m, src)
}
func (m *KeyPairCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairCreateRequest proto.InternalMessageInfo

func (m *KeyPairCreateRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *KeyPairCreateRequest) GetItem() *KeyPairCreateInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type KeyPairCreateInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPairCreateInfo) Reset()         { *m = KeyPairCreateInfo{} }
func (m *KeyPairCreateInfo) String() string { return proto.CompactTextString(m) }
func (*KeyPairCreateInfo) ProtoMessage()    {}
func (*KeyPairCreateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{76}
}
func (m *KeyPairCreateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairCreateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairCreateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairCreateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairCreateInfo.Merge(m, src)
}
func (m *KeyPairCreateInfo) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairCreateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairCreateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairCreateInfo proto.InternalMessageInfo

func (m *KeyPairCreateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type KeyPairRegisterRequest struct {
	ConnectionName       string               `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *KeyPairRegisterInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *KeyPairRegisterRequest) Reset()         { *m = KeyPairRegisterRequest{} }
func (m *KeyPairRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*KeyPairRegisterRequest) ProtoMessage()    {}
func (*KeyPairRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{77}
}
func (m *KeyPairRegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairRegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairRegisterRequest.Merge(m, src)
}
func (m *KeyPairRegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairRegisterRequest proto.InternalMessageInfo

func (m *KeyPairRegisterRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *KeyPairRegisterRequest) GetItem() *KeyPairRegisterInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type KeyPairRegisterInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	CspId                string   `protobuf:"bytes,2,opt,name=csp_id,json=CSPId,proto3" json:"CSPId" yaml:"CSPId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPairRegisterInfo) Reset()         { *m = KeyPairRegisterInfo{} }
func (m *KeyPairRegisterInfo) String() string { return proto.CompactTextString(m) }
func (*KeyPairRegisterInfo) ProtoMessage()    {}
func (*KeyPairRegisterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{78}
}
func (m *KeyPairRegisterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairRegisterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairRegisterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairRegisterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairRegisterInfo.Merge(m, src)
}
func (m *KeyPairRegisterInfo) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairRegisterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairRegisterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairRegisterInfo proto.InternalMessageInfo

func (m *KeyPairRegisterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeyPairRegisterInfo) GetCspId() string {
	if m != nil {
		return m.CspId
	}
	return ""
}

type KeyPairAllQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPairAllQryRequest) Reset()         { *m = KeyPairAllQryRequest{} }
func (m *KeyPairAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*KeyPairAllQryRequest) ProtoMessage()    {}
func (*KeyPairAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{79}
}
func (m *KeyPairAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairAllQryRequest.Merge(m, src)
}
func (m *KeyPairAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairAllQryRequest proto.InternalMessageInfo

func (m *KeyPairAllQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type KeyPairQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Force                string   `protobuf:"bytes,3,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPairQryRequest) Reset()         { *m = KeyPairQryRequest{} }
func (m *KeyPairQryRequest) String() string { return proto.CompactTextString(m) }
func (*KeyPairQryRequest) ProtoMessage()    {}
func (*KeyPairQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{80}
}
func (m *KeyPairQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairQryRequest.Merge(m, src)
}
func (m *KeyPairQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairQryRequest proto.InternalMessageInfo

func (m *KeyPairQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *KeyPairQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeyPairQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type CSPKeyPairQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,json=Id,proto3" json:"Id" yaml:"Id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSPKeyPairQryRequest) Reset()         { *m = CSPKeyPairQryRequest{} }
func (m *CSPKeyPairQryRequest) String() string { return proto.CompactTextString(m) }
func (*CSPKeyPairQryRequest) ProtoMessage()    {}
func (*CSPKeyPairQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{81}
}
func (m *CSPKeyPairQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSPKeyPairQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSPKeyPairQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSPKeyPairQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSPKeyPairQryRequest.Merge(m, src)
}
func (m *CSPKeyPairQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *CSPKeyPairQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CSPKeyPairQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CSPKeyPairQryRequest proto.InternalMessageInfo

func (m *CSPKeyPairQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *CSPKeyPairQryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type KeyPairUnregiserQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPairUnregiserQryRequest) Reset()         { *m = KeyPairUnregiserQryRequest{} }
func (m *KeyPairUnregiserQryRequest) String() string { return proto.CompactTextString(m) }
func (*KeyPairUnregiserQryRequest) ProtoMessage()    {}
func (*KeyPairUnregiserQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{82}
}
func (m *KeyPairUnregiserQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPairUnregiserQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyPairUnregiserQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyPairUnregiserQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairUnregiserQryRequest.Merge(m, src)
}
func (m *KeyPairUnregiserQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyPairUnregiserQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairUnregiserQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairUnregiserQryRequest proto.InternalMessageInfo

func (m *KeyPairUnregiserQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *KeyPairUnregiserQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListVMStatusInfoResponse struct {
	Items                []*VMStatusInfo `protobuf:"bytes,1,rep,name=items,json=vmstatus,proto3" json:"vmstatus" yaml:"vmstatus"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListVMStatusInfoResponse) Reset()         { *m = ListVMStatusInfoResponse{} }
func (m *ListVMStatusInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListVMStatusInfoResponse) ProtoMessage()    {}
func (*ListVMStatusInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{83}
}
func (m *ListVMStatusInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVMStatusInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVMStatusInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVMStatusInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVMStatusInfoResponse.Merge(m, src)
}
func (m *ListVMStatusInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListVMStatusInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVMStatusInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVMStatusInfoResponse proto.InternalMessageInfo

func (m *ListVMStatusInfoResponse) GetItems() []*VMStatusInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type VMStatusInfo struct {
	Iid                  *IID     `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	VmStatus             string   `protobuf:"bytes,2,opt,name=vm_status,json=VmStatus,proto3" json:"VmStatus" yaml:"VmStatus"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMStatusInfo) Reset()         { *m = VMStatusInfo{} }
func (m *VMStatusInfo) String() string { return proto.CompactTextString(m) }
func (*VMStatusInfo) ProtoMessage()    {}
func (*VMStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{84}
}
func (m *VMStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMStatusInfo.Merge(m, src)
}
func (m *VMStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *VMStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VMStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VMStatusInfo proto.InternalMessageInfo

func (m *VMStatusInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *VMStatusInfo) GetVmStatus() string {
	if m != nil {
		return m.VmStatus
	}
	return ""
}

type VMInfoResponse struct {
	Item                 *VMInfo  `protobuf:"bytes,1,opt,name=item,json=vm,proto3" json:"vm" yaml:"vm"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMInfoResponse) Reset()         { *m = VMInfoResponse{} }
func (m *VMInfoResponse) String() string { return proto.CompactTextString(m) }
func (*VMInfoResponse) ProtoMessage()    {}
func (*VMInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{85}
}
func (m *VMInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMInfoResponse.Merge(m, src)
}
func (m *VMInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *VMInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMInfoResponse proto.InternalMessageInfo

func (m *VMInfoResponse) GetItem() *VMInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListVMInfoResponse struct {
	Items                []*VMInfo `protobuf:"bytes,1,rep,name=items,json=vm,proto3" json:"vm" yaml:"vm"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListVMInfoResponse) Reset()         { *m = ListVMInfoResponse{} }
func (m *ListVMInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListVMInfoResponse) ProtoMessage()    {}
func (*ListVMInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{86}
}
func (m *ListVMInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVMInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVMInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVMInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVMInfoResponse.Merge(m, src)
}
func (m *ListVMInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListVMInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVMInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVMInfoResponse proto.InternalMessageInfo

func (m *ListVMInfoResponse) GetItems() []*VMInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type VMInfo struct {
	Iid                  *IID          `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	StartTime            string        `protobuf:"bytes,2,opt,name=start_time,json=StartTime,proto3" json:"StartTime" yaml:"StartTime"`
	Region               *VMRegionInfo `protobuf:"bytes,3,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	ImageIid             *IID          `protobuf:"bytes,4,opt,name=image_iid,json=ImageIId,proto3" json:"ImageIId" yaml:"ImageIId"`
	VmSpecName           string        `protobuf:"bytes,5,opt,name=vm_spec_name,json=VMSpecName,proto3" json:"VMSpecName" yaml:"VMSpecName"`
	VpcIid               *IID          `protobuf:"bytes,6,opt,name=vpc_iid,json=VpcIID,proto3" json:"VpcIID" yaml:"VpcIID"`
	SubnetIid            *IID          `protobuf:"bytes,7,opt,name=subnet_iid,json=SubnetIID,proto3" json:"SubnetIID" yaml:"SubnetIID"`
	SecurityGroupIids    []*IID        `protobuf:"bytes,8,rep,name=security_group_iids,json=SecurityGroupIIds,proto3" json:"SecurityGroupIIds" yaml:"SecurityGroupIIds"`
	KeyPairIid           *IID          `protobuf:"bytes,9,opt,name=key_pair_iid,json=KeyPairIId,proto3" json:"KeyPairIId" yaml:"KeyPairIId"`
	VmUserId             string        `protobuf:"bytes,10,opt,name=vm_user_id,json=VMUserId,proto3" json:"VMUserId" yaml:"VMUserId"`
	VmUserPasswd         string        `protobuf:"bytes,11,opt,name=vm_user_passwd,json=VMUserPasswd,proto3" json:"VMUserPasswd" yaml:"VMUserPasswd"`
	NetworkInterface     string        `protobuf:"bytes,12,opt,name=network_interface,json=NetworkInterface,proto3" json:"NetworkInterface" yaml:"NetworkInterface"`
	PublicIp             string        `protobuf:"bytes,13,opt,name=public_ip,json=PublicIP,proto3" json:"PublicIP" yaml:"PublicIP"`
	PublicDns            string        `protobuf:"bytes,14,opt,name=public_dns,json=PublicDNS,proto3" json:"PublicDNS" yaml:"PublicDNS"`
	PrivateIp            string        `protobuf:"bytes,15,opt,name=private_ip,json=PrivateIP,proto3" json:"PrivateIP" yaml:"PrivateIP"`
	PrivateDns           string        `protobuf:"bytes,16,opt,name=private_dns,json=PrivateDNS,proto3" json:"PrivateDNS" yaml:"PrivateDNS"`
	VmBootDisk           string        `protobuf:"bytes,17,opt,name=vm_boot_disk,json=VMBootDisk,proto3" json:"VMBootDisk" yaml:"VMBootDisk"`
	VmBlockDisk          string        `protobuf:"bytes,18,opt,name=vm_block_disk,json=VMBlockDisk,proto3" json:"VMBlockDisk" yaml:"VMBlockDisk"`
	SshAccessPoint       string        `protobuf:"bytes,19,opt,name=ssh_access_point,json=SSHAccessPoint,proto3" json:"SSHAccessPoint" yaml:"SSHAccessPoint"`
	KeyValueList         []*KeyValue   `protobuf:"bytes,20,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VMInfo) Reset()         { *m = VMInfo{} }
func (m *VMInfo) String() string { return proto.CompactTextString(m) }
func (*VMInfo) ProtoMessage()    {}
func (*VMInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{87}
}
func (m *VMInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMInfo.Merge(m, src)
}
func (m *VMInfo) XXX_Size() int {
	return m.Size()
}
func (m *VMInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VMInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VMInfo proto.InternalMessageInfo

func (m *VMInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *VMInfo) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *VMInfo) GetRegion() *VMRegionInfo {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *VMInfo) GetImageIid() *IID {
	if m != nil {
		return m.ImageIid
	}
	return nil
}

func (m *VMInfo) GetVmSpecName() string {
	if m != nil {
		return m.VmSpecName
	}
	return ""
}

func (m *VMInfo) GetVpcIid() *IID {
	if m != nil {
		return m.VpcIid
	}
	return nil
}

func (m *VMInfo) GetSubnetIid() *IID {
	if m != nil {
		return m.SubnetIid
	}
	return nil
}

func (m *VMInfo) GetSecurityGroupIids() []*IID {
	if m != nil {
		return m.SecurityGroupIids
	}
	return nil
}

func (m *VMInfo) GetKeyPairIid() *IID {
	if m != nil {
		return m.KeyPairIid
	}
	return nil
}

func (m *VMInfo) GetVmUserId() string {
	if m != nil {
		return m.VmUserId
	}
	return ""
}

func (m *VMInfo) GetVmUserPasswd() string {
	if m != nil {
		return m.VmUserPasswd
	}
	return ""
}

func (m *VMInfo) GetNetworkInterface() string {
	if m != nil {
		return m.NetworkInterface
	}
	return ""
}

func (m *VMInfo) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *VMInfo) GetPublicDns() string {
	if m != nil {
		return m.PublicDns
	}
	return ""
}

func (m *VMInfo) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

func (m *VMInfo) GetPrivateDns() string {
	if m != nil {
		return m.PrivateDns
	}
	return ""
}

func (m *VMInfo) GetVmBootDisk() string {
	if m != nil {
		return m.VmBootDisk
	}
	return ""
}

func (m *VMInfo) GetVmBlockDisk() string {
	if m != nil {
		return m.VmBlockDisk
	}
	return ""
}

func (m *VMInfo) GetSshAccessPoint() string {
	if m != nil {
		return m.SshAccessPoint
	}
	return ""
}

func (m *VMInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type VMRegionInfo struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	Zone                 string   `protobuf:"bytes,2,opt,name=zone,json=Zone,proto3" json:"Zone" yaml:"Zone"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMRegionInfo) Reset()         { *m = VMRegionInfo{} }
func (m *VMRegionInfo) String() string { return proto.CompactTextString(m) }
func (*VMRegionInfo) ProtoMessage()    {}
func (*VMRegionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{88}
}
func (m *VMRegionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMRegionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMRegionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMRegionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMRegionInfo.Merge(m, src)
}
func (m *VMRegionInfo) XXX_Size() int {
	return m.Size()
}
func (m *VMRegionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VMRegionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VMRegionInfo proto.InternalMessageInfo

func (m *VMRegionInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *VMRegionInfo) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type VMCreateRequest struct {
	ConnectionName       string        `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *VMCreateInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VMCreateRequest) Reset()         { *m = VMCreateRequest{} }
func (m *VMCreateRequest) String() string { return proto.CompactTextString(m) }
func (*VMCreateRequest) ProtoMessage()    {}
func (*VMCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{89}
}
func (m *VMCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMCreateRequest.Merge(m, src)
}
func (m *VMCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMCreateRequest proto.InternalMessageInfo

func (m *VMCreateRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VMCreateRequest) GetItem() *VMCreateInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type VMCreateInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	ImageName            string   `protobuf:"bytes,2,opt,name=image_name,json=ImageName,proto3" json:"ImageName" yaml:"ImageName"`
	VpcName              string   `protobuf:"bytes,3,opt,name=vpc_name,json=VPCName,proto3" json:"VPCName" yaml:"VPCName"`
	SubnetName           string   `protobuf:"bytes,4,opt,name=subnet_name,json=SubnetName,proto3" json:"SubnetName" yaml:"SubnetName"`
	SecurityGroupNames   []string `protobuf:"bytes,5,rep,name=security_group_names,json=SecurityGroupNames,proto3" json:"SecurityGroupNames" yaml:"SecurityGroupNames"`
	VmSpecName           string   `protobuf:"bytes,6,opt,name=vm_spec_name,json=VMSpecName,proto3" json:"VMSpecName" yaml:"VMSpecName"`
	KeyPairName          string   `protobuf:"bytes,7,opt,name=key_pair_name,json=KeyPairName,proto3" json:"KeyPairName" yaml:"KeyPairName"`
	VmUserId             string   `protobuf:"bytes,8,opt,name=vm_user_id,json=VMUserId,proto3" json:"VMUserId" yaml:"VMUserId"`
	VmUserPasswd         string   `protobuf:"bytes,9,opt,name=vm_user_passwd,json=VMUserPasswd,proto3" json:"VMUserPasswd" yaml:"VMUserPasswd"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMCreateInfo) Reset()         { *m = VMCreateInfo{} }
func (m *VMCreateInfo) String() string { return proto.CompactTextString(m) }
func (*VMCreateInfo) ProtoMessage()    {}
func (*VMCreateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{90}
}
func (m *VMCreateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMCreateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMCreateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMCreateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMCreateInfo.Merge(m, src)
}
func (m *VMCreateInfo) XXX_Size() int {
	return m.Size()
}
func (m *VMCreateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VMCreateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VMCreateInfo proto.InternalMessageInfo

func (m *VMCreateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VMCreateInfo) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *VMCreateInfo) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *VMCreateInfo) GetSubnetName() string {
	if m != nil {
		return m.SubnetName
	}
	return ""
}

func (m *VMCreateInfo) GetSecurityGroupNames() []string {
	if m != nil {
		return m.SecurityGroupNames
	}
	return nil
}

func (m *VMCreateInfo) GetVmSpecName() string {
	if m != nil {
		return m.VmSpecName
	}
	return ""
}

func (m *VMCreateInfo) GetKeyPairName() string {
	if m != nil {
		return m.KeyPairName
	}
	return ""
}

func (m *VMCreateInfo) GetVmUserId() string {
	if m != nil {
		return m.VmUserId
	}
	return ""
}

func (m *VMCreateInfo) GetVmUserPasswd() string {
	if m != nil {
		return m.VmUserPasswd
	}
	return ""
}

type VMRegisterRequest struct {
	ConnectionName       string          `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Item                 *VMRegisterInfo `protobuf:"bytes,2,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VMRegisterRequest) Reset()         { *m = VMRegisterRequest{} }
func (m *VMRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*VMRegisterRequest) ProtoMessage()    {}
func (*VMRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{91}
}
func (m *VMRegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMRegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMRegisterRequest.Merge(m, src)
}
func (m *VMRegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMRegisterRequest proto.InternalMessageInfo

func (m *VMRegisterRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VMRegisterRequest) GetItem() *VMRegisterInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type VMRegisterInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	CspId                string   `protobuf:"bytes,2,opt,name=csp_id,json=CSPId,proto3" json:"CSPId" yaml:"CSPId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMRegisterInfo) Reset()         { *m = VMRegisterInfo{} }
func (m *VMRegisterInfo) String() string { return proto.CompactTextString(m) }
func (*VMRegisterInfo) ProtoMessage()    {}
func (*VMRegisterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{92}
}
func (m *VMRegisterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMRegisterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMRegisterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMRegisterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMRegisterInfo.Merge(m, src)
}
func (m *VMRegisterInfo) XXX_Size() int {
	return m.Size()
}
func (m *VMRegisterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VMRegisterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VMRegisterInfo proto.InternalMessageInfo

func (m *VMRegisterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VMRegisterInfo) GetCspId() string {
	if m != nil {
		return m.CspId
	}
	return ""
}

type VMAllQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMAllQryRequest) Reset()         { *m = VMAllQryRequest{} }
func (m *VMAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*VMAllQryRequest) ProtoMessage()    {}
func (*VMAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{93}
}
func (m *VMAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMAllQryRequest.Merge(m, src)
}
func (m *VMAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMAllQryRequest proto.InternalMessageInfo

func (m *VMAllQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type VMQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Force                string   `protobuf:"bytes,3,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMQryRequest) Reset()         { *m = VMQryRequest{} }
func (m *VMQryRequest) String() string { return proto.CompactTextString(m) }
func (*VMQryRequest) ProtoMessage()    {}
func (*VMQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{94}
}
func (m *VMQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMQryRequest.Merge(m, src)
}
func (m *VMQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMQryRequest proto.InternalMessageInfo

func (m *VMQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VMQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VMQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type CSPVMQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,json=Id,proto3" json:"Id" yaml:"Id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSPVMQryRequest) Reset()         { *m = CSPVMQryRequest{} }
func (m *CSPVMQryRequest) String() string { return proto.CompactTextString(m) }
func (*CSPVMQryRequest) ProtoMessage()    {}
func (*CSPVMQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{95}
}
func (m *CSPVMQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSPVMQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSPVMQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSPVMQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSPVMQryRequest.Merge(m, src)
}
func (m *CSPVMQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *CSPVMQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CSPVMQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CSPVMQryRequest proto.InternalMessageInfo

func (m *CSPVMQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *CSPVMQryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type VMActionRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action" yaml:"action"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMActionRequest) Reset()         { *m = VMActionRequest{} }
func (m *VMActionRequest) String() string { return proto.CompactTextString(m) }
func (*VMActionRequest) ProtoMessage()    {}
func (*VMActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{96}
}
func (m *VMActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMActionRequest.Merge(m, src)
}
func (m *VMActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMActionRequest proto.InternalMessageInfo

func (m *VMActionRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VMActionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VMActionRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type VMUnregiserQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMUnregiserQryRequest) Reset()         { *m = VMUnregiserQryRequest{} }
func (m *VMUnregiserQryRequest) String() string { return proto.CompactTextString(m) }
func (*VMUnregiserQryRequest) ProtoMessage()    {}
func (*VMUnregiserQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{97}
}
func (m *VMUnregiserQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMUnregiserQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMUnregiserQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMUnregiserQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMUnregiserQryRequest.Merge(m, src)
}
func (m *VMUnregiserQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMUnregiserQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMUnregiserQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMUnregiserQryRequest proto.InternalMessageInfo

func (m *VMUnregiserQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *VMUnregiserQryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SSHRunRequest struct {
	UserName             string   `protobuf:"bytes,1,opt,name=user_name,json=UserName,proto3" json:"UserName" yaml:"UserName"`
	PrivateKey           []string `protobuf:"bytes,2,rep,name=private_key,json=PrivateKey,proto3" json:"PrivateKey" yaml:"PrivateKey"`
	ServerPort           string   `protobuf:"bytes,3,opt,name=server_port,json=ServerPort,proto3" json:"ServerPort" yaml:"ServerPort"`
	Command              string   `protobuf:"bytes,4,opt,name=command,json=Command,proto3" json:"Command" yaml:"Command"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSHRunRequest) Reset()         { *m = SSHRunRequest{} }
func (m *SSHRunRequest) String() string { return proto.CompactTextString(m) }
func (*SSHRunRequest) ProtoMessage()    {}
func (*SSHRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_024d57f2826cd0d0, []int{98}
}
func (m *SSHRunRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSHRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SSHRunRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SSHRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHRunRequest.Merge(m, src)
}
func (m *SSHRunRequest) XXX_Size() int {
	return m.Size()
}
func (m *SSHRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SSHRunRequest proto.InternalMessageInfo

func (m *SSHRunRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SSHRunRequest) GetPrivateKey() []string {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SSHRunRequest) GetServerPort() string {
	if m != nil {
		return m.ServerPort
	}
	return ""
}

func (m *SSHRunRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "cbspider.Empty")
	proto.RegisterType((*KeyValue)(nil), "cbspider.KeyValue")
	proto.RegisterType((*IID)(nil), "cbspider.IID")
	proto.RegisterType((*BooleanResponse)(nil), "cbspider.BooleanResponse")
	proto.RegisterType((*StringResponse)(nil), "cbspider.StringResponse")
	proto.RegisterType((*MessageResponse)(nil), "cbspider.MessageResponse")
	proto.RegisterType((*StatusResponse)(nil), "cbspider.StatusResponse")
	proto.RegisterType((*ListCloudOSInfoResponse)(nil), "cbspider.ListCloudOSInfoResponse")
	proto.RegisterType((*CloudDriverInfoRequest)(nil), "cbspider.CloudDriverInfoRequest")
	proto.RegisterType((*CloudDriverInfoResponse)(nil), "cbspider.CloudDriverInfoResponse")
	proto.RegisterType((*ListCloudDriverInfoResponse)(nil), "cbspider.ListCloudDriverInfoResponse")
	proto.RegisterType((*CloudDriverInfo)(nil), "cbspider.CloudDriverInfo")
	proto.RegisterType((*CloudDriverQryRequest)(nil), "cbspider.CloudDriverQryRequest")
	proto.RegisterType((*CredentialInfoRequest)(nil), "cbspider.CredentialInfoRequest")
	proto.RegisterType((*CredentialInfoResponse)(nil), "cbspider.CredentialInfoResponse")
	proto.RegisterType((*ListCredentialInfoResponse)(nil), "cbspider.ListCredentialInfoResponse")
	proto.RegisterType((*CredentialInfo)(nil), "cbspider.CredentialInfo")
	proto.RegisterType((*CredentialQryRequest)(nil), "cbspider.CredentialQryRequest")
	proto.RegisterType((*RegionInfoRequest)(nil), "cbspider.RegionInfoRequest")
	proto.RegisterType((*RegionInfoResponse)(nil), "cbspider.RegionInfoResponse")
	proto.RegisterType((*ListRegionInfoResponse)(nil), "cbspider.ListRegionInfoResponse")
	proto.RegisterType((*RegionInfo)(nil), "cbspider.RegionInfo")
	proto.RegisterType((*RegionQryRequest)(nil), "cbspider.RegionQryRequest")
	proto.RegisterType((*ConnectionConfigInfoRequest)(nil), "cbspider.ConnectionConfigInfoRequest")
	proto.RegisterType((*ConnectionConfigInfoResponse)(nil), "cbspider.ConnectionConfigInfoResponse")
	proto.RegisterType((*ListConnectionConfigInfoResponse)(nil), "cbspider.ListConnectionConfigInfoResponse")
	proto.RegisterType((*ConnectionConfigInfo)(nil), "cbspider.ConnectionConfigInfo")
	proto.RegisterType((*ConnectionConfigQryRequest)(nil), "cbspider.ConnectionConfigQryRequest")
	proto.RegisterType((*AllResourceInfoResponse)(nil), "cbspider.AllResourceInfoResponse")
	proto.RegisterType((*AllResourceInfo)(nil), "cbspider.AllResourceInfo")
	proto.RegisterType((*ImageInfoResponse)(nil), "cbspider.ImageInfoResponse")
	proto.RegisterType((*ListImageInfoResponse)(nil), "cbspider.ListImageInfoResponse")
	proto.RegisterType((*ImageInfo)(nil), "cbspider.ImageInfo")
	proto.RegisterType((*ImageCreateRequest)(nil), "cbspider.ImageCreateRequest")
	proto.RegisterType((*ImageCreateInfo)(nil), "cbspider.ImageCreateInfo")
	proto.RegisterType((*ImageAllQryRequest)(nil), "cbspider.ImageAllQryRequest")
	proto.RegisterType((*ImageQryRequest)(nil), "cbspider.ImageQryRequest")
	proto.RegisterType((*VMSpecInfoResponse)(nil), "cbspider.VMSpecInfoResponse")
	proto.RegisterType((*ListVMSpecInfoResponse)(nil), "cbspider.ListVMSpecInfoResponse")
	proto.RegisterType((*VMSpecInfo)(nil), "cbspider.VMSpecInfo")
	proto.RegisterType((*VCpuInfo)(nil), "cbspider.VCpuInfo")
	proto.RegisterType((*GpuInfo)(nil), "cbspider.GpuInfo")
	proto.RegisterType((*VMSpecAllQryRequest)(nil), "cbspider.VMSpecAllQryRequest")
	proto.RegisterType((*VMSpecQryRequest)(nil), "cbspider.VMSpecQryRequest")
	proto.RegisterType((*VPCInfoResponse)(nil), "cbspider.VPCInfoResponse")
	proto.RegisterType((*ListVPCInfoResponse)(nil), "cbspider.ListVPCInfoResponse")
	proto.RegisterType((*VPCInfo)(nil), "cbspider.VPCInfo")
	proto.RegisterType((*SubnetInfo)(nil), "cbspider.SubnetInfo")
	proto.RegisterType((*VPCCreateRequest)(nil), "cbspider.VPCCreateRequest")
	proto.RegisterType((*VPCCreateInfo)(nil), "cbspider.VPCCreateInfo")
	proto.RegisterType((*SubnetCreateInfo)(nil), "cbspider.SubnetCreateInfo")
	proto.RegisterType((*VPCRegisterRequest)(nil), "cbspider.VPCRegisterRequest")
	proto.RegisterType((*VPCRegisterInfo)(nil), "cbspider.VPCRegisterInfo")
	proto.RegisterType((*VPCAllQryRequest)(nil), "cbspider.VPCAllQryRequest")
	proto.RegisterType((*VPCQryRequest)(nil), "cbspider.VPCQryRequest")
	proto.RegisterType((*CSPVPCQryRequest)(nil), "cbspider.CSPVPCQryRequest")
	proto.RegisterType((*SubnetAddRequest)(nil), "cbspider.SubnetAddRequest")
	proto.RegisterType((*SubnetQryRequest)(nil), "cbspider.SubnetQryRequest")
	proto.RegisterType((*CSPSubnetQryRequest)(nil), "cbspider.CSPSubnetQryRequest")
	proto.RegisterType((*VPCUnregiserQryRequest)(nil), "cbspider.VPCUnregiserQryRequest")
	proto.RegisterType((*SecurityInfoResponse)(nil), "cbspider.SecurityInfoResponse")
	proto.RegisterType((*ListSecurityInfoResponse)(nil), "cbspider.ListSecurityInfoResponse")
	proto.RegisterType((*SecurityInfo)(nil), "cbspider.SecurityInfo")
	proto.RegisterType((*SecurityRuleInfo)(nil), "cbspider.SecurityRuleInfo")
	proto.RegisterType((*SecurityCreateRequest)(nil), "cbspider.SecurityCreateRequest")
	proto.RegisterType((*SecurityCreateInfo)(nil), "cbspider.SecurityCreateInfo")
	proto.RegisterType((*SecurityRegisterRequest)(nil), "cbspider.SecurityRegisterRequest")
	proto.RegisterType((*SecurityRegisterInfo)(nil), "cbspider.SecurityRegisterInfo")
	proto.RegisterType((*SecurityAllQryRequest)(nil), "cbspider.SecurityAllQryRequest")
	proto.RegisterType((*SecurityQryRequest)(nil), "cbspider.SecurityQryRequest")
	proto.RegisterType((*CSPSecurityQryRequest)(nil), "cbspider.CSPSecurityQryRequest")
	proto.RegisterType((*SecurityUnregiserQryRequest)(nil), "cbspider.SecurityUnregiserQryRequest")
	proto.RegisterType((*KeyPairInfoResponse)(nil), "cbspider.KeyPairInfoResponse")
	proto.RegisterType((*ListKeyPairInfoResponse)(nil), "cbspider.ListKeyPairInfoResponse")
	proto.RegisterType((*KeyPairInfo)(nil), "cbspider.KeyPairInfo")
	proto.RegisterType((*KeyPairCreateRequest)(nil), "cbspider.KeyPairCreateRequest")
	proto.RegisterType((*KeyPairCreateInfo)(nil), "cbspider.KeyPairCreateInfo")
	proto.RegisterType((*KeyPairRegisterRequest)(nil), "cbspider.KeyPairRegisterRequest")
	proto.RegisterType((*KeyPairRegisterInfo)(nil), "cbspider.KeyPairRegisterInfo")
	proto.RegisterType((*KeyPairAllQryRequest)(nil), "cbspider.KeyPairAllQryRequest")
	proto.RegisterType((*KeyPairQryRequest)(nil), "cbspider.KeyPairQryRequest")
	proto.RegisterType((*CSPKeyPairQryRequest)(nil), "cbspider.CSPKeyPairQryRequest")
	proto.RegisterType((*KeyPairUnregiserQryRequest)(nil), "cbspider.KeyPairUnregiserQryRequest")
	proto.RegisterType((*ListVMStatusInfoResponse)(nil), "cbspider.ListVMStatusInfoResponse")
	proto.RegisterType((*VMStatusInfo)(nil), "cbspider.VMStatusInfo")
	proto.RegisterType((*VMInfoResponse)(nil), "cbspider.VMInfoResponse")
	proto.RegisterType((*ListVMInfoResponse)(nil), "cbspider.ListVMInfoResponse")
	proto.RegisterType((*VMInfo)(nil), "cbspider.VMInfo")
	proto.RegisterType((*VMRegionInfo)(nil), "cbspider.VMRegionInfo")
	proto.RegisterType((*VMCreateRequest)(nil), "cbspider.VMCreateRequest")
	proto.RegisterType((*VMCreateInfo)(nil), "cbspider.VMCreateInfo")
	proto.RegisterType((*VMRegisterRequest)(nil), "cbspider.VMRegisterRequest")
	proto.RegisterType((*VMRegisterInfo)(nil), "cbspider.VMRegisterInfo")
	proto.RegisterType((*VMAllQryRequest)(nil), "cbspider.VMAllQryRequest")
	proto.RegisterType((*VMQryRequest)(nil), "cbspider.VMQryRequest")
	proto.RegisterType((*CSPVMQryRequest)(nil), "cbspider.CSPVMQryRequest")
	proto.RegisterType((*VMActionRequest)(nil), "cbspider.VMActionRequest")
	proto.RegisterType((*VMUnregiserQryRequest)(nil), "cbspider.VMUnregiserQryRequest")
	proto.RegisterType((*SSHRunRequest)(nil), "cbspider.SSHRunRequest")
}

func init() { proto.RegisterFile("cbspider.proto", fileDescriptor_024d57f2826cd0d0) }

var fileDescriptor_024d57f2826cd0d0 = []byte{
	// 4409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5c, 0xcd, 0x8f, 0x23, 0x49,
	0x56, 0xef, 0xb4, 0xeb, 0xcb, 0xaf, 0xbe, 0x5c, 0x59, 0xd5, 0xdd, 0x9e, 0xea, 0x9e, 0x72, 0x4f,
	0xec, 0x0c, 0x03, 0x8c, 0xb4, 0x03, 0x33, 0x03, 0x33, 0xda, 0xed, 0x5d, 0xba, 0xca, 0xee, 0x76,
	0x7b, 0xaa, 0x5c, 0xed, 0x09, 0xf7, 0x78, 0x5b, 0xcb, 0x0e, 0x96, 0xcb, 0x8e, 0xaa, 0x4d, 0x2a,
	0xed, 0xcc, 0xc9, 0xb4, 0xbd, 0x2a, 0xb8, 0x80, 0xb4, 0x17, 0xa4, 0xe5, 0x6b, 0xb5, 0x2b, 0xf1,
	0x21, 0xb4, 0x9c, 0x10, 0xe2, 0xc2, 0x09, 0xf1, 0x25, 0x84, 0x60, 0x85, 0x58, 0x38, 0x21, 0xfe,
	0x00, 0x0b, 0x0d, 0x17, 0x54, 0x27, 0xd4, 0xe2, 0xc0, 0x11, 0xc5, 0x47, 0x66, 0x44, 0x64, 0xa6,
	0x5d, 0x2e, 0x57, 0xb5, 0xb7, 0x87, 0x53, 0x55, 0xbc, 0x78, 0xf1, 0x8b, 0x17, 0x2f, 0x5e, 0xbc,
	0xf7, 0x22, 0x32, 0xc2, 0xb0, 0xd6, 0x3a, 0xf2, 0x5d, 0xab, 0x4d, 0xbc, 0x2f, 0xba, 0x9e, 0xd3,
	0x73, 0xcc, 0xa5, 0xa0, 0xbc, 0x0d, 0x27, 0xce, 0x89, 0xc3, 0xa9, 0x68, 0x11, 0xe6, 0x1f, 0x76,
	0xdc, 0xde, 0x19, 0x6a, 0xc3, 0xd2, 0x3e, 0x39, 0xab, 0x37, 0xed, 0x3e, 0x31, 0xdf, 0x84, 0xf4,
	0x29, 0x39, 0xcb, 0x19, 0xf7, 0x8c, 0x9f, 0xcc, 0xec, 0xdd, 0x3c, 0x1f, 0xe6, 0xd3, 0xfb, 0xe4,
	0xec, 0xf9, 0x30, 0x0f, 0x67, 0xcd, 0x8e, 0xfd, 0x25, 0xb4, 0x4f, 0xce, 0x10, 0xa6, 0x24, 0xf3,
	0x6d, 0x98, 0x1f, 0xd0, 0x16, 0xb9, 0x14, 0x63, 0x7d, 0xe5, 0x7c, 0x98, 0x9f, 0x67, 0x10, 0xcf,
	0x87, 0xf9, 0x15, 0xce, 0xcc, 0x8a, 0x08, 0x73, 0x32, 0x3a, 0x83, 0x74, 0xb9, 0x5c, 0x34, 0xdf,
	0x83, 0xc5, 0x6e, 0xb3, 0x43, 0x1a, 0x56, 0x5b, 0x74, 0x72, 0xe7, 0x7c, 0x98, 0x5f, 0x38, 0x6c,
	0x76, 0x48, 0xb9, 0xfd, 0x7c, 0x98, 0x5f, 0xe5, 0x4d, 0x79, 0x19, 0x61, 0x51, 0x61, 0xde, 0x87,
	0x8c, 0x7f, 0xe6, 0xf7, 0x48, 0x87, 0xb6, 0xe3, 0x3d, 0xe6, 0xcf, 0x87, 0xf9, 0xa5, 0x1a, 0x23,
	0xb2, 0x96, 0xeb, 0xbc, 0x65, 0x40, 0x41, 0x38, 0xac, 0x44, 0x8f, 0x60, 0x7d, 0xcf, 0x71, 0x6c,
	0xd2, 0xec, 0x62, 0xe2, 0xbb, 0x4e, 0xd7, 0x27, 0xe6, 0xbb, 0xb0, 0xe0, 0x11, 0xbf, 0x6f, 0xf7,
	0x98, 0x14, 0x4b, 0x5c, 0x0a, 0xcc, 0x28, 0x52, 0x0a, 0x5e, 0x46, 0x58, 0x54, 0xa0, 0x87, 0xb0,
	0x56, 0xeb, 0x79, 0x56, 0xf7, 0x64, 0x04, 0x4c, 0x66, 0x32, 0x98, 0x0f, 0x61, 0xbd, 0x42, 0x7c,
	0xbf, 0x79, 0x42, 0x42, 0x9c, 0xf7, 0x61, 0xb1, 0xc3, 0x49, 0x02, 0xe8, 0xd5, 0xf3, 0x61, 0x3e,
	0x20, 0x3d, 0x1f, 0xe6, 0xd7, 0x38, 0x92, 0x20, 0x20, 0x1c, 0x54, 0x71, 0x91, 0x9a, 0xbd, 0xbe,
	0xaf, 0x8a, 0xe4, 0x33, 0x8a, 0x2a, 0x12, 0xe7, 0x91, 0x22, 0xf1, 0x32, 0xc2, 0xa2, 0x02, 0x55,
	0xe1, 0xf6, 0x81, 0xe5, 0xf7, 0x0a, 0xb6, 0xd3, 0x6f, 0x3f, 0xa9, 0x95, 0xbb, 0xc7, 0x4e, 0x88,
	0xf7, 0x73, 0x30, 0x6f, 0xf5, 0x48, 0x87, 0xc2, 0xa5, 0x03, 0xc1, 0x5a, 0x94, 0xcf, 0xf1, 0xa5,
	0x60, 0x82, 0x80, 0x70, 0x50, 0x85, 0x8e, 0xe1, 0x16, 0x43, 0x2b, 0x7a, 0xd6, 0x80, 0x78, 0x1c,
	0xf1, 0xd3, 0x3e, 0xf1, 0x7b, 0xe6, 0x01, 0xcc, 0x51, 0x40, 0x26, 0xde, 0xf2, 0x3b, 0xaf, 0x7c,
	0x31, 0x34, 0xd6, 0x08, 0x3f, 0x97, 0xbc, 0xcd, 0xca, 0x52, 0x72, 0x5e, 0x46, 0x58, 0x54, 0xa0,
	0x13, 0xb8, 0x1d, 0xeb, 0x47, 0x48, 0x7e, 0xbd, 0x1d, 0xd9, 0x70, 0x27, 0x54, 0x51, 0x42, 0x67,
	0x15, 0x55, 0x4d, 0x57, 0xef, 0xed, 0x37, 0x52, 0xb0, 0x1e, 0x69, 0x68, 0x16, 0x61, 0x99, 0xd7,
	0x36, 0xe8, 0x0a, 0x12, 0xd3, 0xfb, 0x85, 0xf3, 0x61, 0x1e, 0x38, 0x13, 0x5d, 0x2b, 0xcf, 0x87,
	0xf9, 0x0d, 0x8e, 0x28, 0x69, 0x08, 0x2b, 0x0c, 0xe6, 0x01, 0xac, 0xba, 0x9e, 0x33, 0xa0, 0xa2,
	0x71, 0x1c, 0xbe, 0x9c, 0xde, 0x3c, 0x1f, 0xe6, 0x57, 0xaa, 0xa2, 0x42, 0x20, 0x6d, 0x72, 0x24,
	0x95, 0x8a, 0xb0, 0xc6, 0x64, 0x1e, 0xc1, 0x96, 0x90, 0xc9, 0xb6, 0x8e, 0x1a, 0xc7, 0x96, 0x4d,
	0x38, 0x68, 0x9a, 0x81, 0xfe, 0xec, 0xf9, 0x30, 0xbf, 0xc1, 0xfb, 0x3e, 0xb0, 0x8e, 0x1e, 0x59,
	0x36, 0x11, 0xc8, 0x39, 0x55, 0x46, 0xa5, 0x0a, 0xe1, 0x38, 0x3b, 0xfa, 0x04, 0x6e, 0x2a, 0xaa,
	0xf8, 0xc8, 0x3b, 0x0b, 0x2c, 0xe9, 0x5a, 0x14, 0x82, 0x5c, 0xb8, 0x59, 0xf0, 0x48, 0x9b, 0x74,
	0x7b, 0x56, 0xd3, 0x56, 0x0d, 0xf5, 0x6b, 0x9a, 0xfd, 0xe4, 0x94, 0x19, 0xd5, 0xd8, 0x79, 0x8f,
	0xad, 0x90, 0x26, 0x7b, 0x94, 0x34, 0x84, 0x15, 0x06, 0xf4, 0x29, 0xdc, 0x8a, 0xf6, 0x28, 0xac,
	0xe8, 0x85, 0x75, 0x39, 0x80, 0x6d, 0x66, 0xbd, 0xc9, 0xdd, 0x3e, 0xd3, 0x8d, 0xf7, 0x1a, 0xfb,
	0xfd, 0xd3, 0x14, 0xac, 0xe9, 0x18, 0xe6, 0x53, 0x58, 0x97, 0x0c, 0xea, 0xcc, 0xbd, 0x75, 0x3e,
	0xcc, 0x2b, 0xcc, 0x62, 0xf6, 0x6e, 0xf2, 0x0e, 0x74, 0x3a, 0xc2, 0x11, 0xc6, 0x6b, 0x36, 0x6b,
	0x0f, 0x36, 0x4f, 0xc9, 0x59, 0x83, 0x45, 0xb8, 0x86, 0xd5, 0x3d, 0x76, 0x1a, 0xb6, 0xe5, 0xf7,
	0x72, 0x69, 0xa6, 0x1e, 0x53, 0xaa, 0x27, 0x88, 0x9b, 0x7b, 0x6f, 0x9f, 0x0f, 0xf3, 0xd9, 0xa0,
	0x44, 0x87, 0x49, 0xb5, 0xfd, 0x7c, 0x98, 0xbf, 0x1d, 0xc6, 0x4d, 0xad, 0x06, 0xe1, 0x18, 0x33,
	0xb2, 0x61, 0x4b, 0x8e, 0x49, 0xb1, 0xf2, 0x17, 0xa2, 0x2f, 0xf4, 0x0d, 0xd8, 0xc0, 0xe4, 0xc4,
	0x72, 0xba, 0xaa, 0xc5, 0x97, 0x34, 0xf3, 0xdb, 0x92, 0xe3, 0x94, 0xac, 0xdc, 0x7d, 0x79, 0xac,
	0x2c, 0xdd, 0x17, 0x2f, 0x23, 0x2c, 0x2a, 0xd0, 0x27, 0x60, 0xaa, 0xe8, 0xc2, 0xcc, 0xae, 0x0d,
	0xfe, 0x08, 0x6e, 0x51, 0x95, 0x25, 0x74, 0xf1, 0x58, 0xb7, 0xe4, 0x2b, 0xf4, 0xf1, 0xbd, 0x14,
	0x80, 0x6c, 0x43, 0x7d, 0x0d, 0xaf, 0x88, 0xf9, 0x1a, 0xce, 0xa4, 0xfb, 0x1a, 0x49, 0x43, 0x58,
	0x61, 0xf8, 0x7f, 0x60, 0xa5, 0xcf, 0x20, 0xcb, 0xc7, 0xa3, 0xfb, 0xe1, 0xab, 0xeb, 0x06, 0xfd,
	0x96, 0x01, 0x77, 0x0a, 0x4e, 0xb7, 0x4b, 0x5a, 0x3d, 0xcb, 0xe9, 0x16, 0x9c, 0xee, 0xb1, 0x75,
	0xa2, 0x1a, 0xa7, 0xa3, 0x59, 0xcf, 0x8e, 0xe2, 0xa3, 0x12, 0x1a, 0xf1, 0xa1, 0xb6, 0xc2, 0x9a,
	0x16, 0xab, 0x91, 0x43, 0x8d, 0xd6, 0x20, 0x1c, 0x63, 0x46, 0xbf, 0x6d, 0xc0, 0xdd, 0x64, 0x81,
	0x84, 0xb1, 0xcd, 0x5c, 0xa2, 0xef, 0x19, 0x70, 0x8f, 0xb9, 0xf1, 0x71, 0x52, 0xb9, 0xfa, 0x12,
	0x98, 0x81, 0x58, 0xdf, 0x49, 0xc3, 0x56, 0x12, 0x36, 0x35, 0x0c, 0xce, 0x12, 0x33, 0x0c, 0xce,
	0xa4, 0x1b, 0x86, 0xa4, 0x21, 0xac, 0x30, 0x5c, 0xf3, 0xa2, 0x89, 0x24, 0x0d, 0xe9, 0xe9, 0xb2,
	0xa8, 0x04, 0xa7, 0x3c, 0x77, 0xf5, 0x20, 0x16, 0x59, 0x48, 0xf3, 0xd3, 0x2d, 0xa4, 0x23, 0xd8,
	0x8e, 0xce, 0x86, 0xbe, 0x58, 0xaf, 0x3e, 0x27, 0xe8, 0x97, 0xe1, 0xf6, 0xae, 0x6d, 0x63, 0xe2,
	0x3b, 0x7d, 0xaf, 0x45, 0x34, 0xfb, 0x7b, 0x32, 0x2a, 0xed, 0x8e, 0x34, 0xe0, 0x5b, 0x89, 0x5d,
	0xdb, 0x16, 0x4e, 0x48, 0x6c, 0x25, 0x04, 0x01, 0xe1, 0xa0, 0x0a, 0xfd, 0x49, 0x0a, 0xd6, 0x23,
	0x6d, 0xcd, 0x1a, 0x2c, 0x77, 0x9a, 0xae, 0x4b, 0xda, 0xdc, 0xe5, 0x71, 0x53, 0x5f, 0x95, 0x7d,
	0x95, 0xcb, 0x45, 0x3e, 0xa8, 0x0a, 0xe3, 0x12, 0x5d, 0x88, 0x41, 0x49, 0x1a, 0xc2, 0x0a, 0x83,
	0xd9, 0x86, 0xac, 0xd3, 0xb5, 0xcf, 0x1a, 0x1c, 0x83, 0x23, 0xa7, 0x92, 0x90, 0xd9, 0x24, 0x3f,
	0xe9, 0xda, 0x67, 0x35, 0x46, 0x13, 0xe8, 0x62, 0x92, 0x75, 0x3a, 0xc2, 0x11, 0x46, 0xf3, 0x19,
	0xac, 0xb2, 0x5e, 0x5a, 0xbe, 0xab, 0xfa, 0xeb, 0x48, 0x17, 0x6f, 0x9c, 0x0f, 0xf3, 0xcb, 0xb4,
	0x65, 0xa1, 0x56, 0x15, 0xf8, 0xa6, 0xc4, 0x17, 0x44, 0x84, 0x55, 0x16, 0xf4, 0x0c, 0x36, 0xca,
	0x9d, 0xe6, 0x89, 0x3e, 0x1d, 0x05, 0x6d, 0x3a, 0x36, 0x95, 0x5e, 0x02, 0x56, 0xbe, 0x79, 0xb7,
	0x3a, 0x7c, 0xab, 0x29, 0x36, 0xef, 0xac, 0x88, 0x30, 0x27, 0xd3, 0x14, 0x9c, 0xf6, 0x10, 0x47,
	0x2f, 0xea, 0xce, 0x66, 0x4a, 0xf8, 0xef, 0xa7, 0x20, 0x13, 0xf2, 0x9b, 0x3f, 0x0f, 0x69, 0x4b,
	0x1c, 0x0f, 0xc4, 0xd4, 0xc2, 0x8e, 0x24, 0xca, 0x6c, 0xc3, 0x2f, 0x8e, 0x24, 0xca, 0x74, 0xaf,
	0x4f, 0x49, 0xe6, 0x07, 0xb0, 0x74, 0x42, 0x4d, 0xbc, 0xe1, 0xf8, 0xc2, 0x45, 0x30, 0x0b, 0x2b,
	0x51, 0xda, 0x93, 0x9a, 0xb4, 0x30, 0x41, 0x40, 0x38, 0xa8, 0x52, 0xf6, 0xcc, 0xe9, 0x89, 0xf7,
	0xcc, 0x66, 0x13, 0xd6, 0x64, 0xf4, 0x65, 0x13, 0x39, 0x37, 0x32, 0xf0, 0x32, 0x5f, 0x15, 0x94,
	0xc4, 0x74, 0x6e, 0xea, 0x41, 0x97, 0xcf, 0xa7, 0xc6, 0x84, 0xfe, 0xd6, 0x00, 0x93, 0xe9, 0xa5,
	0xe0, 0x91, 0x66, 0x8f, 0xa8, 0x19, 0x61, 0xb8, 0xc0, 0xe3, 0x19, 0x61, 0x58, 0x15, 0x71, 0x3e,
	0x1a, 0x9d, 0x3a, 0x1f, 0x8d, 0x10, 0xae, 0xdb, 0x54, 0x74, 0xdd, 0x2a, 0x12, 0xc8, 0x75, 0x8b,
	0xc9, 0xa7, 0xb4, 0x20, 0xb5, 0x2a, 0x08, 0x08, 0x07, 0x55, 0xe8, 0xab, 0xb0, 0x1e, 0x69, 0x6a,
	0xbe, 0x05, 0x73, 0x8a, 0xb8, 0xb7, 0xcf, 0x87, 0xf9, 0x39, 0x21, 0xe4, 0xb2, 0x3c, 0xf8, 0x41,
	0x78, 0x4e, 0xf8, 0x18, 0x3e, 0xf8, 0x5d, 0x3b, 0x9a, 0x0e, 0x5f, 0xfb, 0xe0, 0x69, 0x64, 0xe5,
	0xc2, 0xbe, 0xe8, 0x9e, 0x42, 0x15, 0xa4, 0x26, 0x51, 0xc1, 0x27, 0x60, 0xd6, 0x2b, 0x35, 0x97,
	0xb4, 0x26, 0xcb, 0xa3, 0x25, 0x2f, 0x37, 0xe1, 0x41, 0xc7, 0x77, 0x49, 0x4b, 0x9a, 0x30, 0x2f,
	0x23, 0x2c, 0x2a, 0x82, 0x3c, 0x3a, 0xa1, 0x8b, 0xd1, 0x79, 0xf4, 0x65, 0xfb, 0xf8, 0xdf, 0x14,
	0x80, 0x6c, 0xc3, 0x4f, 0xcc, 0x68, 0xa8, 0xd2, 0x4f, 0xcc, 0xf4, 0x5c, 0x1c, 0x07, 0xb9, 0x38,
	0xff, 0xe7, 0x52, 0x3a, 0x33, 0x1f, 0xc0, 0xfc, 0xa0, 0xd1, 0x72, 0xfb, 0x6c, 0x2d, 0x6b, 0xcb,
	0xb1, 0x5e, 0x70, 0xfb, 0x4c, 0x70, 0x86, 0x40, 0x4b, 0x12, 0x81, 0x96, 0x10, 0x66, 0x44, 0xf3,
	0x4d, 0x48, 0x77, 0x48, 0x47, 0x04, 0x74, 0xe6, 0x71, 0x2a, 0xa4, 0x23, 0x3d, 0x4e, 0x85, 0x74,
	0x10, 0xa6, 0x24, 0xf3, 0x4b, 0x90, 0x3e, 0x71, 0xfb, 0xb9, 0x79, 0xa6, 0xa3, 0x0d, 0xd9, 0x51,
	0x49, 0xf4, 0xc3, 0xda, 0x96, 0x58, 0x37, 0xa2, 0x6d, 0x89, 0xf6, 0x42, 0x49, 0x09, 0xee, 0x63,
	0xe1, 0xba, 0xdd, 0x87, 0x0d, 0x4b, 0xc1, 0x90, 0xcd, 0xb7, 0x61, 0xbe, 0xe5, 0xf4, 0xbb, 0xc1,
	0x41, 0x25, 0xf3, 0xc9, 0x05, 0x4a, 0x90, 0x3e, 0x99, 0x15, 0x11, 0xe6, 0x64, 0xd6, 0xc0, 0x76,
	0x5a, 0xa7, 0xea, 0x01, 0x6f, 0x81, 0x12, 0x94, 0x06, 0xb4, 0x48, 0x1b, 0xb0, 0xbf, 0x7f, 0x67,
	0xc0, 0x62, 0x69, 0xda, 0xde, 0xa8, 0xca, 0x8f, 0x3d, 0xd1, 0x17, 0x57, 0xf9, 0xb1, 0xa7, 0xa8,
	0xfc, 0xd8, 0xa3, 0x2a, 0x3f, 0xf6, 0x28, 0x72, 0xc7, 0x69, 0x13, 0x5b, 0x78, 0x6a, 0x86, 0x5c,
	0xa1, 0x04, 0x89, 0xcc, 0x8a, 0x08, 0x73, 0xf2, 0xc4, 0x93, 0x89, 0x4e, 0x61, 0x93, 0xdb, 0xe9,
	0x2c, 0xfc, 0xcd, 0xf7, 0x0d, 0xc8, 0xf2, 0xde, 0x5e, 0x2e, 0x87, 0x73, 0x08, 0xeb, 0xf5, 0x6a,
	0x41, 0x73, 0x05, 0x5f, 0xd6, 0xbc, 0x8d, 0x62, 0xe5, 0x82, 0x91, 0x2b, 0x75, 0xe0, 0xb6, 0xa4,
	0x52, 0x07, 0x6e, 0x0b, 0x61, 0x4a, 0x42, 0x35, 0xd8, 0x64, 0x1e, 0x26, 0x82, 0x79, 0x5f, 0x77,
	0x2f, 0x97, 0x04, 0xfd, 0xf7, 0x14, 0x2c, 0x0a, 0xbe, 0xa9, 0x93, 0x85, 0x5f, 0x80, 0x8c, 0xe5,
	0x0e, 0xde, 0x6b, 0xb4, 0xac, 0x76, 0x60, 0x76, 0xaf, 0x9d, 0x0f, 0xf3, 0x99, 0x72, 0x75, 0xf0,
	0x5e, 0xa3, 0x50, 0x2e, 0xe2, 0xe7, 0xc3, 0x7c, 0x56, 0x34, 0x0a, 0x48, 0x08, 0xcb, 0x6a, 0xf3,
	0x14, 0xb2, 0x7e, 0xff, 0xa8, 0x4b, 0x7a, 0xb1, 0x9d, 0xb7, 0xe2, 0x2c, 0x6b, 0x8c, 0x83, 0x0d,
	0x88, 0xcd, 0xa1, 0x2c, 0xeb, 0x39, 0xa3, 0x4e, 0x47, 0x38, 0xc2, 0x38, 0x8b, 0x5c, 0xe3, 0xbf,
	0x0c, 0x00, 0xd9, 0xeb, 0x8f, 0x4f, 0xaf, 0xf1, 0xa1, 0xa6, 0xaf, 0x7b, 0xa8, 0x7f, 0x49, 0x17,
	0x5f, 0xb5, 0x30, 0x8b, 0xa4, 0xaa, 0xa2, 0x25, 0x55, 0xb7, 0x35, 0x3b, 0x9f, 0x22, 0xa5, 0xfa,
	0x6f, 0x03, 0x56, 0xb5, 0x96, 0x97, 0xca, 0xa8, 0xae, 0x3e, 0x39, 0x9f, 0x8e, 0x34, 0xfa, 0xed,
	0xa8, 0xd1, 0x2b, 0xa3, 0xbb, 0x8a, 0xe9, 0xa3, 0x5f, 0x33, 0x20, 0x1b, 0x45, 0x9c, 0xed, 0xa8,
	0x59, 0x1a, 0x5e, 0xaf, 0x16, 0x68, 0x32, 0xe2, 0xf7, 0x88, 0xf7, 0x63, 0x4a, 0xc3, 0x15, 0x09,
	0x2e, 0x65, 0x33, 0x2e, 0x73, 0xe9, 0x6a, 0xd3, 0xcb, 0xa9, 0xef, 0x67, 0x60, 0x81, 0x6e, 0x55,
	0xc3, 0x0f, 0xaf, 0x3c, 0x98, 0xd7, 0xaa, 0x6c, 0xfd, 0x07, 0xc1, 0x9c, 0x16, 0x69, 0x30, 0x67,
	0x7f, 0xbf, 0xc9, 0x96, 0xd7, 0x2c, 0xc2, 0xe8, 0x0f, 0xf9, 0x7a, 0x78, 0xa9, 0x62, 0x28, 0x4d,
	0x51, 0x8e, 0x1d, 0xaf, 0x45, 0xd4, 0x14, 0x85, 0x11, 0xa4, 0xbe, 0x58, 0x11, 0x61, 0x4e, 0x46,
	0xbf, 0x69, 0x40, 0xb6, 0x50, 0xab, 0xce, 0x62, 0x20, 0x5f, 0x80, 0x54, 0x38, 0x91, 0x9b, 0xe7,
	0xc3, 0x7c, 0x8a, 0xcd, 0x62, 0x46, 0x58, 0x7f, 0x1b, 0xe1, 0x54, 0xb9, 0x8d, 0xfe, 0x27, 0x5c,
	0x72, 0xbb, 0xed, 0xf6, 0x8b, 0x95, 0xe7, 0x03, 0x58, 0x1a, 0xb8, 0x2d, 0xf5, 0x58, 0x8f, 0x99,
	0x75, 0xbd, 0x5a, 0x10, 0x38, 0xc2, 0xac, 0x05, 0x01, 0xe1, 0xa0, 0xca, 0xac, 0x8a, 0x75, 0xc2,
	0xb3, 0xfc, 0x71, 0xee, 0x67, 0xd2, 0x85, 0xf2, 0xfb, 0xa9, 0x60, 0xd8, 0x2f, 0x7c, 0x1a, 0xa6,
	0x1f, 0x76, 0x11, 0x96, 0x85, 0x07, 0x8e, 0x1e, 0x5f, 0x72, 0xd1, 0xf5, 0xe3, 0x3b, 0x49, 0x43,
	0x58, 0x61, 0x90, 0x26, 0x3a, 0x37, 0xa1, 0x89, 0xfe, 0xab, 0x01, 0x9b, 0x85, 0x5a, 0xf5, 0xa5,
	0x57, 0x0f, 0xb7, 0xef, 0xf4, 0x78, 0xfb, 0xfe, 0x43, 0x03, 0x6e, 0xd5, 0xab, 0x85, 0x8f, 0xbb,
	0x74, 0x27, 0xea, 0x6b, 0x9f, 0x94, 0x5f, 0x82, 0x14, 0x7c, 0x00, 0x5b, 0x35, 0xd2, 0xea, 0x7b,
	0x56, 0xef, 0x4c, 0xcb, 0x99, 0x7f, 0x49, 0xcb, 0xc3, 0x6f, 0x29, 0x06, 0xaf, 0x70, 0xef, 0xfd,
	0xd4, 0xf9, 0x30, 0xbf, 0xea, 0x0b, 0xca, 0x89, 0xe7, 0xf4, 0xdd, 0xe7, 0xc3, 0xfc, 0x16, 0xef,
	0x45, 0x23, 0x23, 0xac, 0xb3, 0xa1, 0x5f, 0x85, 0x1c, 0x0d, 0xb8, 0x89, 0x7d, 0x37, 0xf4, 0x7c,
	0xfd, 0xfa, 0x3b, 0xff, 0xa3, 0x34, 0xac, 0xa8, 0x50, 0x53, 0xe7, 0x9f, 0x05, 0x58, 0xa4, 0xa6,
	0x63, 0x09, 0x2f, 0x17, 0x6b, 0xcb, 0xce, 0x1b, 0xea, 0x6e, 0xab, 0x5c, 0x2e, 0xca, 0xf3, 0x06,
	0x5e, 0x46, 0x58, 0x54, 0xd0, 0x8c, 0xa1, 0x6d, 0x79, 0x7c, 0x02, 0x85, 0x31, 0xb1, 0x8c, 0xa1,
	0x18, 0x10, 0x65, 0xc6, 0x10, 0x92, 0x10, 0x96, 0xd5, 0xa6, 0x0d, 0x6b, 0xc1, 0xf8, 0x1a, 0x5e,
	0xdf, 0x26, 0xbe, 0xc8, 0xd7, 0xb7, 0xe3, 0x8a, 0xc3, 0x7d, 0x9b, 0x48, 0xe5, 0xa9, 0x54, 0x5f,
	0x2a, 0x4f, 0x23, 0x23, 0xac, 0xb3, 0x25, 0xa4, 0xcc, 0xf3, 0xd7, 0x9d, 0x32, 0xff, 0x0d, 0xf5,
	0x8d, 0x11, 0x89, 0xcd, 0xfb, 0x90, 0x39, 0xf6, 0x9c, 0x4e, 0xc3, 0x75, 0xbc, 0x60, 0xa7, 0xcf,
	0x6e, 0x65, 0x3d, 0xf2, 0x9c, 0x4e, 0xd5, 0xf1, 0x7a, 0xf2, 0x56, 0x56, 0x40, 0x41, 0x38, 0xac,
	0x34, 0xdf, 0x83, 0xc5, 0x9e, 0xc3, 0xdb, 0xa6, 0xe4, 0x51, 0xd0, 0x53, 0x47, 0xb4, 0x14, 0x53,
	0xc3, 0xcb, 0x08, 0x8b, 0x0a, 0xea, 0xff, 0x2c, 0xb7, 0xc1, 0x6e, 0xb0, 0xb5, 0x1c, 0x5b, 0xf5,
	0x7f, 0xe5, 0x6a, 0x55, 0x50, 0xa5, 0xff, 0x93, 0x34, 0x84, 0x15, 0x06, 0x7d, 0x82, 0xe7, 0xa6,
	0x98, 0xe0, 0xb7, 0x60, 0x8e, 0xa5, 0x93, 0xf3, 0x72, 0x45, 0x8b, 0x4c, 0x52, 0xac, 0x68, 0x9e,
	0x44, 0x32, 0x22, 0xfa, 0x07, 0x03, 0x6e, 0x06, 0xca, 0x9b, 0xc5, 0xa6, 0x03, 0x6b, 0x29, 0xe4,
	0xdd, 0xb8, 0xcd, 0x4d, 0x11, 0x1c, 0xff, 0x2c, 0x05, 0x66, 0xbc, 0xf9, 0xe5, 0x32, 0xc9, 0xe9,
	0xdd, 0xfa, 0xe7, 0x6b, 0x41, 0xa2, 0x7f, 0x32, 0xe0, 0x76, 0x48, 0x99, 0xc9, 0xae, 0xe1, 0xa9,
	0x36, 0xe5, 0x3b, 0x09, 0xa3, 0x9a, 0x66, 0xeb, 0xf0, 0xe7, 0x86, 0x8c, 0x45, 0xda, 0x06, 0x42,
	0x9d, 0x49, 0xe3, 0x52, 0x33, 0x79, 0xa9, 0x4c, 0x5a, 0x6e, 0x3d, 0xd2, 0x13, 0x6e, 0x3d, 0x3a,
	0x72, 0xa5, 0xcd, 0x62, 0xff, 0xf1, 0x23, 0x43, 0xae, 0x8a, 0xcf, 0xf9, 0x26, 0xe4, 0xbb, 0x06,
	0xdc, 0xa4, 0x19, 0xde, 0xac, 0x46, 0x33, 0xd1, 0x4e, 0xe4, 0x8f, 0x0d, 0xb8, 0x13, 0x48, 0xf4,
	0x92, 0xa6, 0x6b, 0x47, 0xb0, 0xb9, 0x4f, 0xce, 0xaa, 0x4d, 0x4b, 0xbf, 0x0f, 0xba, 0xaf, 0x65,
	0x6b, 0x37, 0xb5, 0x48, 0x1c, 0x30, 0xf3, 0x45, 0x73, 0x4a, 0xce, 0xdc, 0xa6, 0xe5, 0xc9, 0x45,
	0x23, 0x08, 0x08, 0x07, 0x55, 0xe8, 0x84, 0x5f, 0xcf, 0x4d, 0xea, 0xe7, 0x40, 0xcf, 0xcc, 0xae,
	0xd8, 0xd1, 0x5f, 0xa5, 0x61, 0x59, 0x69, 0x37, 0x75, 0x16, 0x56, 0x82, 0xe5, 0x63, 0xab, 0x7b,
	0x42, 0x3c, 0xd7, 0xb3, 0xba, 0x41, 0x7c, 0x67, 0x9f, 0xb4, 0x1f, 0x49, 0xb2, 0xfc, 0xa4, 0xad,
	0x10, 0x11, 0x56, 0x59, 0xcc, 0x07, 0x00, 0x6e, 0xff, 0xc8, 0xb6, 0x5a, 0x8d, 0x53, 0x72, 0xa6,
	0x7a, 0xfe, 0x2a, 0xa3, 0xf2, 0xcb, 0xe9, 0xc2, 0xf3, 0x87, 0x24, 0x84, 0x65, 0x35, 0x4d, 0x18,
	0x5c, 0xcf, 0x1a, 0x34, 0x7b, 0x84, 0x41, 0xcc, 0xc9, 0x84, 0xa1, 0xca, 0xc9, 0x1c, 0x63, 0x23,
	0xb8, 0x39, 0x12, 0xd0, 0x10, 0x56, 0x18, 0xcc, 0xaf, 0x00, 0x0c, 0x3a, 0x8d, 0xbe, 0x4f, 0x3c,
	0xea, 0x8d, 0xe6, 0x65, 0xae, 0x53, 0xaf, 0x7c, 0xec, 0x13, 0x8f, 0x25, 0x93, 0x22, 0xd7, 0x09,
	0x28, 0x08, 0x87, 0x95, 0xb3, 0xf8, 0xd8, 0xf3, 0xf7, 0x06, 0x6c, 0x89, 0xa9, 0x9b, 0x45, 0x8e,
	0xf1, 0x91, 0x16, 0x70, 0xee, 0xc4, 0xcc, 0x6e, 0x8a, 0x14, 0xe3, 0x01, 0x6c, 0xc4, 0x1a, 0x5f,
	0xee, 0x8b, 0xf1, 0x0f, 0x0d, 0xb8, 0x25, 0x20, 0x66, 0x13, 0x76, 0x6b, 0x9a, 0x16, 0x5e, 0x8d,
	0x69, 0x61, 0xaa, 0xa8, 0xdb, 0x0b, 0x3d, 0xca, 0x2c, 0x0f, 0xed, 0xec, 0xd0, 0x7c, 0x66, 0x11,
	0x38, 0xff, 0xd9, 0x08, 0x27, 0xfb, 0x73, 0x1e, 0x37, 0x7f, 0xd7, 0x80, 0xad, 0x42, 0xad, 0x3a,
	0xab, 0xc1, 0x4c, 0x14, 0x36, 0x7f, 0x60, 0xc0, 0xb6, 0x10, 0xe8, 0x25, 0x8d, 0x9a, 0x36, 0x3f,
	0x6c, 0xa8, 0x57, 0xf8, 0x65, 0x1a, 0x2d, 0xa4, 0x55, 0x47, 0x1e, 0x36, 0xa8, 0xec, 0xdc, 0xfd,
	0x0e, 0x3a, 0x7e, 0x70, 0x4d, 0x67, 0x3d, 0xbc, 0x7f, 0x20, 0x2e, 0xea, 0x84, 0x95, 0xe8, 0xdb,
	0x06, 0xac, 0xa8, 0x6d, 0xa7, 0x8e, 0x6b, 0xf7, 0x21, 0x33, 0xe8, 0x34, 0xc4, 0x5d, 0x21, 0xe5,
	0x1d, 0x52, 0xbd, 0x53, 0x8b, 0x88, 0x11, 0x50, 0x68, 0x14, 0x08, 0xfe, 0x2d, 0xc3, 0x5a, 0xbd,
	0xa2, 0x0d, 0xf5, 0x7d, 0x2d, 0x4b, 0xc8, 0xaa, 0x23, 0x65, 0x63, 0x64, 0x33, 0x3c, 0xe8, 0xc8,
	0x19, 0x1e, 0x74, 0x10, 0x4e, 0x0d, 0x3a, 0xe8, 0x10, 0x4c, 0xae, 0x3f, 0x0d, 0xee, 0x03, 0x5d,
	0x73, 0x97, 0xc0, 0xfb, 0xf5, 0x15, 0x58, 0xe0, 0x3c, 0x53, 0xeb, 0xe6, 0x01, 0x80, 0xdf, 0x6b,
	0x7a, 0xbd, 0x46, 0xcf, 0x0a, 0xad, 0x80, 0x85, 0xea, 0x1a, 0xa5, 0x3e, 0xb5, 0x98, 0x29, 0x64,
	0xc3, 0xbb, 0x54, 0x9c, 0x84, 0xb0, 0xac, 0x36, 0xf7, 0xc3, 0xbb, 0x21, 0xe9, 0xe8, 0x19, 0x57,
	0xbd, 0x12, 0xbd, 0xbf, 0x7d, 0xd1, 0x9d, 0x91, 0x7d, 0xc8, 0xb0, 0xcb, 0x65, 0xec, 0x28, 0x68,
	0x2e, 0x69, 0x30, 0x6c, 0xe6, 0xf8, 0xb5, 0x33, 0xf5, 0x05, 0x59, 0x40, 0x41, 0x38, 0xac, 0x34,
	0x1f, 0xc2, 0x0a, 0x9d, 0x77, 0x97, 0xb4, 0x62, 0x37, 0x33, 0xf9, 0x57, 0x7c, 0xfd, 0xd8, 0x55,
	0xd2, 0x10, 0x56, 0x18, 0xd4, 0xc3, 0xa9, 0x85, 0xa9, 0x0f, 0xa7, 0x9e, 0x00, 0x04, 0xdf, 0xe0,
	0xac, 0x76, 0x6e, 0x31, 0x09, 0x87, 0xab, 0x9d, 0x7f, 0x47, 0x63, 0x50, 0x59, 0xed, 0x5b, 0x1b,
	0x45, 0x93, 0xd5, 0xa6, 0x0b, 0x9b, 0xe1, 0xde, 0x98, 0x9d, 0xc6, 0x51, 0x60, 0x3f, 0xb7, 0x94,
	0x74, 0x2d, 0x91, 0xbd, 0xe8, 0x09, 0x32, 0xf2, 0x12, 0x65, 0x2e, 0x97, 0xdb, 0xbe, 0x7c, 0xd1,
	0x13, 0xab, 0x42, 0x38, 0xce, 0x6e, 0x3e, 0x85, 0x15, 0x9a, 0x0e, 0xd1, 0x94, 0x93, 0x0d, 0x22,
	0x93, 0x34, 0x08, 0xa6, 0xdd, 0x20, 0x19, 0x65, 0x13, 0xb4, 0x11, 0x66, 0x41, 0x82, 0x86, 0xb0,
	0xc2, 0x10, 0xc9, 0xd1, 0x20, 0x96, 0xa3, 0xb5, 0x63, 0x39, 0x5a, 0x5b, 0xe6, 0x68, 0x6d, 0xb3,
	0x02, 0x6b, 0x41, 0x73, 0xb7, 0xe9, 0xfb, 0xdf, 0x6a, 0xe7, 0x96, 0xe5, 0x3d, 0x63, 0xce, 0x55,
	0x65, 0x74, 0x99, 0x8f, 0xa9, 0x54, 0x84, 0x35, 0x26, 0xf3, 0x1b, 0xb0, 0xd1, 0x25, 0xbd, 0x6f,
	0x39, 0xde, 0x69, 0xc3, 0xea, 0xf6, 0x88, 0x77, 0xdc, 0x6c, 0x91, 0xdc, 0x0a, 0x43, 0x64, 0x57,
	0xae, 0x0f, 0x79, 0x65, 0x39, 0xa8, 0x93, 0x57, 0xae, 0xa3, 0x35, 0x08, 0xc7, 0x98, 0xa9, 0x23,
	0x12, 0x79, 0xb1, 0xe5, 0xe6, 0x56, 0xe5, 0x50, 0x79, 0xde, 0x5b, 0xae, 0xca, 0xa1, 0x06, 0x14,
	0x84, 0xc3, 0x4a, 0x25, 0xab, 0x6e, 0x77, 0xfd, 0xdc, 0x5a, 0x34, 0xab, 0x2e, 0x1e, 0xd6, 0xa2,
	0x59, 0x75, 0xf1, 0xb0, 0x16, 0x66, 0xd5, 0xc5, 0xc3, 0x1a, 0x43, 0x10, 0x59, 0xb5, 0xe5, 0xe6,
	0xd6, 0x15, 0x04, 0x4e, 0x65, 0x12, 0x64, 0xb5, 0x9c, 0x9a, 0x8a, 0x20, 0xab, 0xd5, 0xbc, 0x9c,
	0x0a, 0x91, 0x8d, 0xe5, 0xe5, 0x5c, 0x0a, 0x3d, 0x2f, 0x67, 0x62, 0x28, 0x0c, 0x62, 0x61, 0x1e,
	0x39, 0x4e, 0xaf, 0xd1, 0xb6, 0xfc, 0xd3, 0xdc, 0x86, 0xba, 0x30, 0xf7, 0x1c, 0xa7, 0x57, 0xb4,
	0xfc, 0x53, 0x75, 0x61, 0x06, 0x34, 0xb6, 0x30, 0x83, 0x82, 0x59, 0x86, 0x55, 0x0a, 0x63, 0x3b,
	0xad, 0x53, 0x8e, 0x63, 0xca, 0x1d, 0x4b, 0xbd, 0xb2, 0x47, 0xe9, 0x02, 0xc8, 0x0c, 0x81, 0x02,
	0x22, 0xc2, 0x2a, 0x8b, 0xf9, 0x31, 0x64, 0x7d, 0xff, 0x9b, 0x8d, 0x66, 0xab, 0x45, 0x7c, 0xbf,
	0xe1, 0x3a, 0x74, 0xff, 0xb3, 0x29, 0xa3, 0x6b, 0xad, 0xf6, 0x78, 0x97, 0x55, 0x55, 0x1d, 0xbe,
	0x05, 0x0a, 0x3e, 0x83, 0x6b, 0x74, 0x84, 0x23, 0x8c, 0x09, 0x3b, 0x88, 0xad, 0xeb, 0xde, 0x41,
	0xb8, 0x34, 0x48, 0x2a, 0x4f, 0x5e, 0xa6, 0xbd, 0xaa, 0xf7, 0x2b, 0x4e, 0x57, 0xcb, 0x02, 0xbe,
	0xee, 0x74, 0x95, 0x2c, 0x80, 0x96, 0x10, 0x66, 0x44, 0xf4, 0x17, 0x06, 0xac, 0xd7, 0x2b, 0xb3,
	0xd8, 0xae, 0x1c, 0x68, 0x89, 0xba, 0x16, 0x58, 0xa6, 0xd8, 0xa9, 0x7c, 0x7b, 0x9e, 0xaa, 0x6a,
	0xda, 0x63, 0xd0, 0x07, 0x00, 0x3c, 0x32, 0x29, 0xe9, 0x12, 0xbf, 0x90, 0x40, 0xa9, 0xa2, 0x5d,
	0x56, 0x09, 0x46, 0xbc, 0xb1, 0xac, 0xd6, 0x8e, 0xdf, 0xd2, 0x57, 0xf9, 0x7c, 0x38, 0x37, 0xdd,
	0xe7, 0x43, 0x02, 0x5b, 0x91, 0x88, 0x41, 0xd1, 0x7c, 0xf6, 0xd9, 0x21, 0xb3, 0xf7, 0xee, 0xf9,
	0x30, 0x6f, 0x6a, 0x4e, 0x9f, 0x36, 0xa2, 0x41, 0xe2, 0x95, 0x84, 0x20, 0xc1, 0xea, 0x10, 0x4e,
	0x68, 0x10, 0x8b, 0xba, 0x0b, 0xd3, 0x45, 0xdd, 0x32, 0xac, 0x86, 0xd1, 0x86, 0xe1, 0x2c, 0xca,
	0xc5, 0x2d, 0xc2, 0x87, 0x00, 0x32, 0xb5, 0x00, 0xc3, 0x91, 0x54, 0x96, 0x48, 0x88, 0x59, 0xba,
	0x7a, 0x88, 0xc9, 0x5c, 0x21, 0xc4, 0xa0, 0xbf, 0x36, 0x60, 0x83, 0xaf, 0xd8, 0x17, 0xbf, 0xd3,
	0x3d, 0xd4, 0x16, 0x50, 0x2e, 0x9a, 0x99, 0x5d, 0x7a, 0x93, 0xeb, 0xd0, 0x5c, 0x78, 0x96, 0xfb,
	0xdb, 0x13, 0xea, 0x6a, 0x66, 0xb1, 0xb5, 0xfd, 0x47, 0xb6, 0xd9, 0xf8, 0x9c, 0xef, 0x6a, 0xbf,
	0x63, 0xc0, 0x7a, 0xa1, 0x56, 0x9d, 0xc1, 0x38, 0x26, 0xda, 0xd0, 0xfe, 0x0b, 0x0b, 0x14, 0xbb,
	0xac, 0xd5, 0x4b, 0xa4, 0xd6, 0x77, 0x61, 0xa1, 0xa9, 0x7e, 0x93, 0x62, 0x11, 0xb2, 0x19, 0x7c,
	0x90, 0x12, 0x11, 0xb2, 0x29, 0xbe, 0x46, 0x89, 0x0a, 0xf4, 0x07, 0x06, 0xdc, 0xac, 0x57, 0x5e,
	0xd2, 0x7d, 0xf9, 0x77, 0x53, 0xb0, 0x5a, 0xab, 0x3d, 0xc6, 0xfd, 0x50, 0xcd, 0xf7, 0x21, 0xc3,
	0x1c, 0x96, 0x22, 0x0e, 0xf3, 0x78, 0xd4, 0x0f, 0x09, 0x1c, 0xe1, 0xf1, 0x02, 0x0a, 0xc2, 0x61,
	0x65, 0xf4, 0xf4, 0x35, 0xc5, 0x02, 0xc4, 0xa5, 0x4f, 0x5f, 0x69, 0xd4, 0x22, 0xde, 0x80, 0xba,
	0x4d, 0xc7, 0xeb, 0x69, 0x97, 0x5e, 0x18, 0x59, 0x7c, 0x32, 0x0e, 0xa2, 0x56, 0x48, 0xa3, 0x51,
	0x2b, 0x2c, 0x98, 0xef, 0xc3, 0x62, 0xcb, 0xe9, 0x74, 0x9a, 0xdd, 0xb6, 0x88, 0x7b, 0xcc, 0x57,
	0x15, 0x38, 0x49, 0xfa, 0x2a, 0x41, 0x40, 0x38, 0xa8, 0x7a, 0xe7, 0x77, 0x96, 0x21, 0x5d, 0x28,
	0x57, 0xcc, 0x02, 0x2c, 0x2b, 0xbf, 0x92, 0x61, 0xae, 0x4b, 0x27, 0xc8, 0x7e, 0x48, 0x65, 0xfb,
	0x35, 0x49, 0x18, 0xf1, 0x6b, 0x1a, 0xe8, 0x86, 0xf9, 0x75, 0xd8, 0xe0, 0x89, 0x83, 0xf2, 0x9b,
	0x06, 0xe6, 0xbd, 0x91, 0x3f, 0x17, 0x21, 0xa6, 0x41, 0xc5, 0x1e, 0xf1, 0x13, 0x14, 0xe8, 0x86,
	0xb9, 0x0f, 0xeb, 0x91, 0xdf, 0xa8, 0x88, 0x0b, 0xf9, 0x46, 0x82, 0x90, 0x89, 0x60, 0x75, 0x58,
	0x2b, 0x11, 0x0d, 0x2b, 0x9f, 0x28, 0x83, 0x34, 0xe0, 0xc9, 0x84, 0xfc, 0x08, 0x36, 0x8a, 0xc4,
	0x26, 0xba, 0x02, 0x2e, 0x84, 0x56, 0x2e, 0x42, 0x46, 0x7e, 0xcb, 0x05, 0xdd, 0x30, 0xbf, 0x06,
	0x59, 0xa1, 0xd3, 0xf0, 0x3d, 0xa5, 0x86, 0x98, 0xf4, 0xf3, 0x0e, 0xdb, 0xf7, 0x46, 0x33, 0x84,
	0xc0, 0x65, 0x58, 0xd3, 0x7f, 0x36, 0x21, 0xae, 0xcf, 0xd7, 0x23, 0xfa, 0x1c, 0x05, 0x55, 0x83,
	0xd5, 0x12, 0x51, 0x91, 0x76, 0x92, 0xfa, 0x57, 0x46, 0x3c, 0x89, 0x7c, 0x4f, 0x20, 0x2b, 0x74,
	0x39, 0x39, 0xee, 0x58, 0x4d, 0xee, 0xc3, 0x4a, 0x90, 0x8e, 0xb3, 0x74, 0xfe, 0x4e, 0xd2, 0x03,
	0xfa, 0x00, 0xe9, 0x6e, 0x72, 0x65, 0x08, 0xb6, 0x0b, 0x20, 0x9f, 0xe9, 0xc7, 0x35, 0x77, 0x4f,
	0xd7, 0x5c, 0x22, 0x44, 0x09, 0x32, 0x25, 0x12, 0x20, 0x6c, 0x47, 0xfb, 0x53, 0x46, 0x75, 0x91,
	0x2c, 0x25, 0x58, 0xe1, 0x9a, 0x9a, 0x00, 0x6b, 0xac, 0x86, 0x2c, 0xf6, 0xe3, 0x1d, 0xd4, 0xd6,
	0x22, 0x6f, 0x6c, 0xcd, 0x37, 0xc6, 0xbf, 0xb4, 0x0e, 0xd0, 0x7f, 0xe2, 0x22, 0xb6, 0xb0, 0xab,
	0x8f, 0x61, 0x2b, 0xe9, 0xb5, 0x77, 0x5c, 0x93, 0x3f, 0x1d, 0xb1, 0xc1, 0xf1, 0xb0, 0x04, 0x36,
	0xa9, 0x25, 0x46, 0x51, 0x5f, 0x1f, 0x2d, 0x97, 0xa2, 0x9b, 0xc9, 0xa5, 0xff, 0x45, 0xb8, 0x25,
	0x6c, 0x73, 0xba, 0x9e, 0xc6, 0xcd, 0xc2, 0x3b, 0x3f, 0xb8, 0x03, 0xe9, 0x42, 0xa1, 0x62, 0x7e,
	0x08, 0xcb, 0x62, 0x1b, 0x46, 0x37, 0x47, 0xe6, 0xdd, 0xc4, 0x57, 0x8b, 0x01, 0xe2, 0x9d, 0x84,
	0xd7, 0xa9, 0x8a, 0xc0, 0x07, 0x90, 0x09, 0x1f, 0xb9, 0xc6, 0x90, 0xb4, 0xcc, 0x71, 0x3b, 0xaf,
	0x2b, 0x3c, 0x09, 0xad, 0x08, 0x4b, 0x25, 0x22, 0xc0, 0xa2, 0x8f, 0x29, 0x15, 0xa4, 0x0b, 0x64,
	0x7a, 0x08, 0xcb, 0x5c, 0x89, 0x17, 0x02, 0x8d, 0x35, 0xda, 0x27, 0x7c, 0x25, 0xf2, 0x4d, 0x91,
	0xf9, 0x6a, 0xf4, 0x35, 0x9f, 0x3e, 0xb8, 0xc8, 0xba, 0x8c, 0xbf, 0x0e, 0x0c, 0xd7, 0xa5, 0xc0,
	0xdb, 0x8e, 0xe2, 0x25, 0xaf, 0xcb, 0x44, 0xa0, 0x0f, 0x61, 0x95, 0x76, 0xf2, 0xc4, 0x3b, 0x99,
	0x4c, 0x38, 0x65, 0xe7, 0xa1, 0xff, 0x16, 0x17, 0xba, 0x61, 0x3e, 0x82, 0x95, 0x12, 0x51, 0xa0,
	0xc6, 0xc9, 0x35, 0x0e, 0xa7, 0x08, 0x19, 0x6e, 0x38, 0xf5, 0x6a, 0x41, 0x03, 0x89, 0xbc, 0x19,
	0xd9, 0x7e, 0x25, 0xf6, 0x6e, 0x49, 0x93, 0x66, 0x51, 0x3c, 0x7d, 0x8a, 0x60, 0xe8, 0x03, 0x7a,
	0x35, 0xa2, 0xed, 0x18, 0xce, 0x57, 0x61, 0x81, 0xaa, 0xba, 0x5a, 0x30, 0xf5, 0xe7, 0x23, 0xc9,
	0x73, 0x1f, 0x6f, 0xbf, 0x0b, 0x19, 0x6e, 0x42, 0x93, 0x42, 0xc4, 0xcd, 0xa7, 0xc2, 0xcd, 0x67,
	0xd7, 0xb6, 0x2f, 0x1a, 0xcd, 0x6b, 0x23, 0x9f, 0xfb, 0x27, 0xf9, 0x62, 0x7e, 0xe9, 0x5d, 0x05,
	0x8c, 0x5e, 0x83, 0x1f, 0x2f, 0x57, 0x11, 0x32, 0xbb, 0xed, 0x36, 0x3f, 0x98, 0x30, 0x63, 0x57,
	0xc0, 0xe5, 0xe5, 0xf5, 0xf1, 0x0a, 0x2a, 0xc1, 0x0a, 0x26, 0x1d, 0x67, 0x40, 0x46, 0x01, 0x4d,
	0xae, 0xa6, 0x75, 0x0e, 0x14, 0xde, 0x94, 0x56, 0xad, 0x39, 0xe1, 0xfa, 0xf4, 0x78, 0xb8, 0xc7,
	0xb0, 0x1c, 0x6c, 0x90, 0xa9, 0x96, 0xee, 0x26, 0x3e, 0x05, 0x99, 0x68, 0x84, 0x87, 0xb0, 0x2a,
	0xf6, 0x1b, 0x02, 0xeb, 0x9e, 0xc6, 0x9d, 0xb0, 0x17, 0x19, 0x2f, 0x59, 0x8d, 0xfd, 0xa8, 0x53,
	0xb3, 0x47, 0x82, 0x43, 0x1b, 0x35, 0xdb, 0x4a, 0xbc, 0xe9, 0xb8, 0xbd, 0x93, 0x7c, 0x65, 0x58,
	0x8b, 0x76, 0x2b, 0xea, 0xfd, 0xe3, 0x24, 0x48, 0xdd, 0xd6, 0x90, 0xbe, 0x72, 0x46, 0xc0, 0x56,
	0x60, 0xb9, 0x44, 0x24, 0x6a, 0xc2, 0x6d, 0x48, 0x05, 0xf2, 0x62, 0x29, 0xf7, 0x61, 0x8d, 0xdb,
	0xee, 0x84, 0x88, 0x17, 0xe4, 0xad, 0xeb, 0x62, 0x5d, 0x4d, 0x3e, 0xea, 0x89, 0x56, 0x98, 0xcc,
	0xb1, 0xe5, 0x8d, 0x2e, 0x2d, 0x23, 0x4e, 0xba, 0xe8, 0x75, 0x61, 0x8e, 0x1d, 0xd8, 0x5c, 0x88,
	0xf8, 0xda, 0xe8, 0x7b, 0x86, 0x93, 0x6b, 0xf4, 0x19, 0x98, 0xd2, 0x38, 0x43, 0xe8, 0x37, 0xe2,
	0xed, 0x2e, 0x6d, 0xa6, 0x07, 0x81, 0x1f, 0xa7, 0x7b, 0xc8, 0x9d, 0x11, 0x57, 0x54, 0x12, 0xfc,
	0x70, 0xc2, 0x3d, 0x2b, 0xb6, 0x88, 0x16, 0xc5, 0x25, 0xac, 0x04, 0xac, 0x91, 0x73, 0x34, 0xe2,
	0xde, 0x16, 0x8b, 0x0f, 0xd4, 0xaf, 0x53, 0xb8, 0xf8, 0xed, 0x99, 0xe4, 0xf8, 0x90, 0x8c, 0xf3,
	0x30, 0xf0, 0xef, 0x17, 0x42, 0x8d, 0x55, 0xd6, 0x47, 0xa1, 0x8f, 0xbf, 0xe4, 0x08, 0x47, 0x5b,
	0xe1, 0xbe, 0xe2, 0xe7, 0x23, 0xa0, 0x49, 0x37, 0x26, 0xc6, 0xcb, 0x57, 0x95, 0xde, 0x90, 0x62,
	0xdd, 0x1b, 0x79, 0xd7, 0x66, 0x62, 0xc5, 0x61, 0xd5, 0x2b, 0x52, 0xcc, 0xd7, 0x63, 0x2d, 0x2e,
	0x6d, 0x72, 0x0f, 0x60, 0x91, 0x7d, 0xcf, 0xae, 0x57, 0xd4, 0x5c, 0x2d, 0xf2, 0x8d, 0x63, 0x3b,
	0x17, 0xfd, 0x30, 0xaf, 0x20, 0xec, 0x41, 0xa6, 0xe0, 0x74, 0x7b, 0x9e, 0x63, 0x47, 0x31, 0xb4,
	0xe3, 0x2f, 0x3d, 0x81, 0x51, 0x7f, 0x01, 0x94, 0xa5, 0x7b, 0x2b, 0xea, 0xed, 0x8a, 0x08, 0xcc,
	0x38, 0x27, 0x9a, 0x74, 0x21, 0x83, 0xe5, 0x10, 0xcb, 0x3c, 0xdd, 0xe3, 0x78, 0xda, 0xf7, 0x93,
	0x51, 0x49, 0x55, 0x44, 0xa6, 0x02, 0x2c, 0xf0, 0x0e, 0xc6, 0x49, 0x73, 0x37, 0x2a, 0x4d, 0x44,
	0x8e, 0x2f, 0xc3, 0x3c, 0x93, 0x63, 0x12, 0x09, 0x62, 0x8d, 0x77, 0x61, 0xf9, 0x29, 0xf1, 0x3a,
	0x56, 0x97, 0x66, 0x76, 0x95, 0xa9, 0x06, 0xb1, 0xcf, 0xb7, 0x08, 0x34, 0x11, 0x1a, 0x3b, 0x8e,
	0x09, 0xd3, 0xa0, 0xb5, 0x50, 0x1e, 0x76, 0xd6, 0xaa, 0x22, 0x46, 0x0e, 0x5f, 0xc7, 0x4a, 0xf5,
	0x90, 0xff, 0x52, 0x1d, 0x0b, 0xee, 0x15, 0xd5, 0x05, 0xc4, 0x3e, 0x0e, 0x8c, 0xd5, 0xcf, 0x01,
	0xac, 0x28, 0x59, 0x42, 0x45, 0x8d, 0x17, 0x89, 0xe7, 0x95, 0xe3, 0x77, 0x68, 0x45, 0x48, 0xd7,
	0x6a, 0x8f, 0xcd, 0xaf, 0xc0, 0x02, 0x3f, 0x4f, 0x54, 0x53, 0x4f, 0xed, 0x84, 0x71, 0x5c, 0x2a,
	0xbe, 0x97, 0xfd, 0xd1, 0x67, 0x3b, 0xc6, 0xbf, 0x7d, 0xb6, 0x63, 0xfc, 0xc7, 0x67, 0x3b, 0xc6,
	0xef, 0xfd, 0xe7, 0xce, 0x8d, 0xa3, 0x05, 0xf6, 0xf6, 0xe3, 0xdd, 0xff, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x77, 0x3d, 0x0b, 0x7e, 0xe5, 0x58, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CIMClient is the client API for CIM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CIMClient interface {
	ListCloudOS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCloudOSInfoResponse, error)
	CreateCloudDriver(ctx context.Context, in *CloudDriverInfoRequest, opts ...grpc.CallOption) (*CloudDriverInfoResponse, error)
	ListCloudDriver(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCloudDriverInfoResponse, error)
	GetCloudDriver(ctx context.Context, in *CloudDriverQryRequest, opts ...grpc.CallOption) (*CloudDriverInfoResponse, error)
	DeleteCloudDriver(ctx context.Context, in *CloudDriverQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	CreateCredential(ctx context.Context, in *CredentialInfoRequest, opts ...grpc.CallOption) (*CredentialInfoResponse, error)
	ListCredential(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCredentialInfoResponse, error)
	GetCredential(ctx context.Context, in *CredentialQryRequest, opts ...grpc.CallOption) (*CredentialInfoResponse, error)
	DeleteCredential(ctx context.Context, in *CredentialQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	CreateRegion(ctx context.Context, in *RegionInfoRequest, opts ...grpc.CallOption) (*RegionInfoResponse, error)
	ListRegion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRegionInfoResponse, error)
	GetRegion(ctx context.Context, in *RegionQryRequest, opts ...grpc.CallOption) (*RegionInfoResponse, error)
	DeleteRegion(ctx context.Context, in *RegionQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	CreateConnectionConfig(ctx context.Context, in *ConnectionConfigInfoRequest, opts ...grpc.CallOption) (*ConnectionConfigInfoResponse, error)
	ListConnectionConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConnectionConfigInfoResponse, error)
	GetConnectionConfig(ctx context.Context, in *ConnectionConfigQryRequest, opts ...grpc.CallOption) (*ConnectionConfigInfoResponse, error)
	DeleteConnectionConfig(ctx context.Context, in *ConnectionConfigQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
}

type cIMClient struct {
	cc *grpc.ClientConn
}

func NewCIMClient(cc *grpc.ClientConn) CIMClient {
	return &cIMClient{cc}
}

func (c *cIMClient) ListCloudOS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCloudOSInfoResponse, error) {
	out := new(ListCloudOSInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/ListCloudOS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) CreateCloudDriver(ctx context.Context, in *CloudDriverInfoRequest, opts ...grpc.CallOption) (*CloudDriverInfoResponse, error) {
	out := new(CloudDriverInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/CreateCloudDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) ListCloudDriver(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCloudDriverInfoResponse, error) {
	out := new(ListCloudDriverInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/ListCloudDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) GetCloudDriver(ctx context.Context, in *CloudDriverQryRequest, opts ...grpc.CallOption) (*CloudDriverInfoResponse, error) {
	out := new(CloudDriverInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/GetCloudDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) DeleteCloudDriver(ctx context.Context, in *CloudDriverQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/DeleteCloudDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) CreateCredential(ctx context.Context, in *CredentialInfoRequest, opts ...grpc.CallOption) (*CredentialInfoResponse, error) {
	out := new(CredentialInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) ListCredential(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCredentialInfoResponse, error) {
	out := new(ListCredentialInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/ListCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) GetCredential(ctx context.Context, in *CredentialQryRequest, opts ...grpc.CallOption) (*CredentialInfoResponse, error) {
	out := new(CredentialInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) DeleteCredential(ctx context.Context, in *CredentialQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/DeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) CreateRegion(ctx context.Context, in *RegionInfoRequest, opts ...grpc.CallOption) (*RegionInfoResponse, error) {
	out := new(RegionInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/CreateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) ListRegion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRegionInfoResponse, error) {
	out := new(ListRegionInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/ListRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) GetRegion(ctx context.Context, in *RegionQryRequest, opts ...grpc.CallOption) (*RegionInfoResponse, error) {
	out := new(RegionInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) DeleteRegion(ctx context.Context, in *RegionQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/DeleteRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) CreateConnectionConfig(ctx context.Context, in *ConnectionConfigInfoRequest, opts ...grpc.CallOption) (*ConnectionConfigInfoResponse, error) {
	out := new(ConnectionConfigInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/CreateConnectionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) ListConnectionConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConnectionConfigInfoResponse, error) {
	out := new(ListConnectionConfigInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/ListConnectionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) GetConnectionConfig(ctx context.Context, in *ConnectionConfigQryRequest, opts ...grpc.CallOption) (*ConnectionConfigInfoResponse, error) {
	out := new(ConnectionConfigInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/GetConnectionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIMClient) DeleteConnectionConfig(ctx context.Context, in *ConnectionConfigQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CIM/DeleteConnectionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CIMServer is the server API for CIM service.
type CIMServer interface {
	ListCloudOS(context.Context, *Empty) (*ListCloudOSInfoResponse, error)
	CreateCloudDriver(context.Context, *CloudDriverInfoRequest) (*CloudDriverInfoResponse, error)
	ListCloudDriver(context.Context, *Empty) (*ListCloudDriverInfoResponse, error)
	GetCloudDriver(context.Context, *CloudDriverQryRequest) (*CloudDriverInfoResponse, error)
	DeleteCloudDriver(context.Context, *CloudDriverQryRequest) (*BooleanResponse, error)
	CreateCredential(context.Context, *CredentialInfoRequest) (*CredentialInfoResponse, error)
	ListCredential(context.Context, *Empty) (*ListCredentialInfoResponse, error)
	GetCredential(context.Context, *CredentialQryRequest) (*CredentialInfoResponse, error)
	DeleteCredential(context.Context, *CredentialQryRequest) (*BooleanResponse, error)
	CreateRegion(context.Context, *RegionInfoRequest) (*RegionInfoResponse, error)
	ListRegion(context.Context, *Empty) (*ListRegionInfoResponse, error)
	GetRegion(context.Context, *RegionQryRequest) (*RegionInfoResponse, error)
	DeleteRegion(context.Context, *RegionQryRequest) (*BooleanResponse, error)
	CreateConnectionConfig(context.Context, *ConnectionConfigInfoRequest) (*ConnectionConfigInfoResponse, error)
	ListConnectionConfig(context.Context, *Empty) (*ListConnectionConfigInfoResponse, error)
	GetConnectionConfig(context.Context, *ConnectionConfigQryRequest) (*ConnectionConfigInfoResponse, error)
	DeleteConnectionConfig(context.Context, *ConnectionConfigQryRequest) (*BooleanResponse, error)
}

// UnimplementedCIMServer can be embedded to have forward compatible implementations.
type UnimplementedCIMServer struct {
}

func (*UnimplementedCIMServer) ListCloudOS(ctx context.Context, req *Empty) (*ListCloudOSInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudOS not implemented")
}
func (*UnimplementedCIMServer) CreateCloudDriver(ctx context.Context, req *CloudDriverInfoRequest) (*CloudDriverInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudDriver not implemented")
}
func (*UnimplementedCIMServer) ListCloudDriver(ctx context.Context, req *Empty) (*ListCloudDriverInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudDriver not implemented")
}
func (*UnimplementedCIMServer) GetCloudDriver(ctx context.Context, req *CloudDriverQryRequest) (*CloudDriverInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudDriver not implemented")
}
func (*UnimplementedCIMServer) DeleteCloudDriver(ctx context.Context, req *CloudDriverQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudDriver not implemented")
}
func (*UnimplementedCIMServer) CreateCredential(ctx context.Context, req *CredentialInfoRequest) (*CredentialInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (*UnimplementedCIMServer) ListCredential(ctx context.Context, req *Empty) (*ListCredentialInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredential not implemented")
}
func (*UnimplementedCIMServer) GetCredential(ctx context.Context, req *CredentialQryRequest) (*CredentialInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (*UnimplementedCIMServer) DeleteCredential(ctx context.Context, req *CredentialQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (*UnimplementedCIMServer) CreateRegion(ctx context.Context, req *RegionInfoRequest) (*RegionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegion not implemented")
}
func (*UnimplementedCIMServer) ListRegion(ctx context.Context, req *Empty) (*ListRegionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegion not implemented")
}
func (*UnimplementedCIMServer) GetRegion(ctx context.Context, req *RegionQryRequest) (*RegionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (*UnimplementedCIMServer) DeleteRegion(ctx context.Context, req *RegionQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegion not implemented")
}
func (*UnimplementedCIMServer) CreateConnectionConfig(ctx context.Context, req *ConnectionConfigInfoRequest) (*ConnectionConfigInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectionConfig not implemented")
}
func (*UnimplementedCIMServer) ListConnectionConfig(ctx context.Context, req *Empty) (*ListConnectionConfigInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectionConfig not implemented")
}
func (*UnimplementedCIMServer) GetConnectionConfig(ctx context.Context, req *ConnectionConfigQryRequest) (*ConnectionConfigInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionConfig not implemented")
}
func (*UnimplementedCIMServer) DeleteConnectionConfig(ctx context.Context, req *ConnectionConfigQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectionConfig not implemented")
}

func RegisterCIMServer(s *grpc.Server, srv CIMServer) {
	s.RegisterService(&_CIM_serviceDesc, srv)
}

func _CIM_ListCloudOS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).ListCloudOS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/ListCloudOS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).ListCloudOS(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_CreateCloudDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudDriverInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).CreateCloudDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/CreateCloudDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).CreateCloudDriver(ctx, req.(*CloudDriverInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_ListCloudDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).ListCloudDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/ListCloudDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).ListCloudDriver(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_GetCloudDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudDriverQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).GetCloudDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/GetCloudDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).GetCloudDriver(ctx, req.(*CloudDriverQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_DeleteCloudDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudDriverQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).DeleteCloudDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/DeleteCloudDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).DeleteCloudDriver(ctx, req.(*CloudDriverQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).CreateCredential(ctx, req.(*CredentialInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_ListCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).ListCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/ListCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).ListCredential(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).GetCredential(ctx, req.(*CredentialQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/DeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).DeleteCredential(ctx, req.(*CredentialQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_CreateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).CreateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/CreateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).CreateRegion(ctx, req.(*RegionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_ListRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).ListRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/ListRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).ListRegion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).GetRegion(ctx, req.(*RegionQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_DeleteRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).DeleteRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/DeleteRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).DeleteRegion(ctx, req.(*RegionQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_CreateConnectionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionConfigInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).CreateConnectionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/CreateConnectionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).CreateConnectionConfig(ctx, req.(*ConnectionConfigInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_ListConnectionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).ListConnectionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/ListConnectionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).ListConnectionConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_GetConnectionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionConfigQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).GetConnectionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/GetConnectionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).GetConnectionConfig(ctx, req.(*ConnectionConfigQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIM_DeleteConnectionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionConfigQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIMServer).DeleteConnectionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CIM/DeleteConnectionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIMServer).DeleteConnectionConfig(ctx, req.(*ConnectionConfigQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CIM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbspider.CIM",
	HandlerType: (*CIMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCloudOS",
			Handler:    _CIM_ListCloudOS_Handler,
		},
		{
			MethodName: "CreateCloudDriver",
			Handler:    _CIM_CreateCloudDriver_Handler,
		},
		{
			MethodName: "ListCloudDriver",
			Handler:    _CIM_ListCloudDriver_Handler,
		},
		{
			MethodName: "GetCloudDriver",
			Handler:    _CIM_GetCloudDriver_Handler,
		},
		{
			MethodName: "DeleteCloudDriver",
			Handler:    _CIM_DeleteCloudDriver_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _CIM_CreateCredential_Handler,
		},
		{
			MethodName: "ListCredential",
			Handler:    _CIM_ListCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _CIM_GetCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _CIM_DeleteCredential_Handler,
		},
		{
			MethodName: "CreateRegion",
			Handler:    _CIM_CreateRegion_Handler,
		},
		{
			MethodName: "ListRegion",
			Handler:    _CIM_ListRegion_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _CIM_GetRegion_Handler,
		},
		{
			MethodName: "DeleteRegion",
			Handler:    _CIM_DeleteRegion_Handler,
		},
		{
			MethodName: "CreateConnectionConfig",
			Handler:    _CIM_CreateConnectionConfig_Handler,
		},
		{
			MethodName: "ListConnectionConfig",
			Handler:    _CIM_ListConnectionConfig_Handler,
		},
		{
			MethodName: "GetConnectionConfig",
			Handler:    _CIM_GetConnectionConfig_Handler,
		},
		{
			MethodName: "DeleteConnectionConfig",
			Handler:    _CIM_DeleteConnectionConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbspider.proto",
}

// CCMClient is the client API for CCM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CCMClient interface {
	CreateImage(ctx context.Context, in *ImageCreateRequest, opts ...grpc.CallOption) (*ImageInfoResponse, error)
	ListImage(ctx context.Context, in *ImageAllQryRequest, opts ...grpc.CallOption) (*ListImageInfoResponse, error)
	GetImage(ctx context.Context, in *ImageQryRequest, opts ...grpc.CallOption) (*ImageInfoResponse, error)
	DeleteImage(ctx context.Context, in *ImageQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	ListVMSpec(ctx context.Context, in *VMSpecAllQryRequest, opts ...grpc.CallOption) (*ListVMSpecInfoResponse, error)
	GetVMSpec(ctx context.Context, in *VMSpecQryRequest, opts ...grpc.CallOption) (*VMSpecInfoResponse, error)
	ListOrgVMSpec(ctx context.Context, in *VMSpecAllQryRequest, opts ...grpc.CallOption) (*StringResponse, error)
	GetOrgVMSpec(ctx context.Context, in *VMSpecQryRequest, opts ...grpc.CallOption) (*StringResponse, error)
	CreateVPC(ctx context.Context, in *VPCCreateRequest, opts ...grpc.CallOption) (*VPCInfoResponse, error)
	ListVPC(ctx context.Context, in *VPCAllQryRequest, opts ...grpc.CallOption) (*ListVPCInfoResponse, error)
	GetVPC(ctx context.Context, in *VPCQryRequest, opts ...grpc.CallOption) (*VPCInfoResponse, error)
	DeleteVPC(ctx context.Context, in *VPCQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	ListAllVPC(ctx context.Context, in *VPCAllQryRequest, opts ...grpc.CallOption) (*AllResourceInfoResponse, error)
	DeleteCSPVPC(ctx context.Context, in *CSPVPCQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	AddSubnet(ctx context.Context, in *SubnetAddRequest, opts ...grpc.CallOption) (*VPCInfoResponse, error)
	RemoveSubnet(ctx context.Context, in *SubnetQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	RemoveCSPSubnet(ctx context.Context, in *CSPSubnetQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	RegisterVPC(ctx context.Context, in *VPCRegisterRequest, opts ...grpc.CallOption) (*VPCInfoResponse, error)
	UnregisterVPC(ctx context.Context, in *VPCUnregiserQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	CreateSecurity(ctx context.Context, in *SecurityCreateRequest, opts ...grpc.CallOption) (*SecurityInfoResponse, error)
	ListSecurity(ctx context.Context, in *SecurityAllQryRequest, opts ...grpc.CallOption) (*ListSecurityInfoResponse, error)
	GetSecurity(ctx context.Context, in *SecurityQryRequest, opts ...grpc.CallOption) (*SecurityInfoResponse, error)
	DeleteSecurity(ctx context.Context, in *SecurityQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	ListAllSecurity(ctx context.Context, in *SecurityAllQryRequest, opts ...grpc.CallOption) (*AllResourceInfoResponse, error)
	DeleteCSPSecurity(ctx context.Context, in *CSPSecurityQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	RegisterSecurity(ctx context.Context, in *SecurityRegisterRequest, opts ...grpc.CallOption) (*SecurityInfoResponse, error)
	UnregisterSecurity(ctx context.Context, in *SecurityUnregiserQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	CreateKey(ctx context.Context, in *KeyPairCreateRequest, opts ...grpc.CallOption) (*KeyPairInfoResponse, error)
	ListKey(ctx context.Context, in *KeyPairAllQryRequest, opts ...grpc.CallOption) (*ListKeyPairInfoResponse, error)
	GetKey(ctx context.Context, in *KeyPairQryRequest, opts ...grpc.CallOption) (*KeyPairInfoResponse, error)
	DeleteKey(ctx context.Context, in *KeyPairQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	ListAllKey(ctx context.Context, in *KeyPairAllQryRequest, opts ...grpc.CallOption) (*AllResourceInfoResponse, error)
	DeleteCSPKey(ctx context.Context, in *CSPKeyPairQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	RegisterKey(ctx context.Context, in *KeyPairRegisterRequest, opts ...grpc.CallOption) (*KeyPairInfoResponse, error)
	UnregisterKey(ctx context.Context, in *KeyPairUnregiserQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	StartVM(ctx context.Context, in *VMCreateRequest, opts ...grpc.CallOption) (*VMInfoResponse, error)
	ControlVM(ctx context.Context, in *VMActionRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListVMStatus(ctx context.Context, in *VMAllQryRequest, opts ...grpc.CallOption) (*ListVMStatusInfoResponse, error)
	GetVMStatus(ctx context.Context, in *VMQryRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListVM(ctx context.Context, in *VMAllQryRequest, opts ...grpc.CallOption) (*ListVMInfoResponse, error)
	GetVM(ctx context.Context, in *VMQryRequest, opts ...grpc.CallOption) (*VMInfoResponse, error)
	TerminateVM(ctx context.Context, in *VMQryRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListAllVM(ctx context.Context, in *VMAllQryRequest, opts ...grpc.CallOption) (*AllResourceInfoResponse, error)
	TerminateCSPVM(ctx context.Context, in *CSPVMQryRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RegisterVM(ctx context.Context, in *VMRegisterRequest, opts ...grpc.CallOption) (*VMInfoResponse, error)
	UnregisterVM(ctx context.Context, in *VMUnregiserQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
}

type cCMClient struct {
	cc *grpc.ClientConn
}

func NewCCMClient(cc *grpc.ClientConn) CCMClient {
	return &cCMClient{cc}
}

func (c *cCMClient) CreateImage(ctx context.Context, in *ImageCreateRequest, opts ...grpc.CallOption) (*ImageInfoResponse, error) {
	out := new(ImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListImage(ctx context.Context, in *ImageAllQryRequest, opts ...grpc.CallOption) (*ListImageInfoResponse, error) {
	out := new(ListImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) GetImage(ctx context.Context, in *ImageQryRequest, opts ...grpc.CallOption) (*ImageInfoResponse, error) {
	out := new(ImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) DeleteImage(ctx context.Context, in *ImageQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListVMSpec(ctx context.Context, in *VMSpecAllQryRequest, opts ...grpc.CallOption) (*ListVMSpecInfoResponse, error) {
	out := new(ListVMSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListVMSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) GetVMSpec(ctx context.Context, in *VMSpecQryRequest, opts ...grpc.CallOption) (*VMSpecInfoResponse, error) {
	out := new(VMSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/GetVMSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListOrgVMSpec(ctx context.Context, in *VMSpecAllQryRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListOrgVMSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) GetOrgVMSpec(ctx context.Context, in *VMSpecQryRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/GetOrgVMSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) CreateVPC(ctx context.Context, in *VPCCreateRequest, opts ...grpc.CallOption) (*VPCInfoResponse, error) {
	out := new(VPCInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/CreateVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListVPC(ctx context.Context, in *VPCAllQryRequest, opts ...grpc.CallOption) (*ListVPCInfoResponse, error) {
	out := new(ListVPCInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) GetVPC(ctx context.Context, in *VPCQryRequest, opts ...grpc.CallOption) (*VPCInfoResponse, error) {
	out := new(VPCInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/GetVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) DeleteVPC(ctx context.Context, in *VPCQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/DeleteVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListAllVPC(ctx context.Context, in *VPCAllQryRequest, opts ...grpc.CallOption) (*AllResourceInfoResponse, error) {
	out := new(AllResourceInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListAllVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) DeleteCSPVPC(ctx context.Context, in *CSPVPCQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/DeleteCSPVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) AddSubnet(ctx context.Context, in *SubnetAddRequest, opts ...grpc.CallOption) (*VPCInfoResponse, error) {
	out := new(VPCInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/AddSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) RemoveSubnet(ctx context.Context, in *SubnetQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/RemoveSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) RemoveCSPSubnet(ctx context.Context, in *CSPSubnetQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/RemoveCSPSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) RegisterVPC(ctx context.Context, in *VPCRegisterRequest, opts ...grpc.CallOption) (*VPCInfoResponse, error) {
	out := new(VPCInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/RegisterVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) UnregisterVPC(ctx context.Context, in *VPCUnregiserQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/UnregisterVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) CreateSecurity(ctx context.Context, in *SecurityCreateRequest, opts ...grpc.CallOption) (*SecurityInfoResponse, error) {
	out := new(SecurityInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/CreateSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListSecurity(ctx context.Context, in *SecurityAllQryRequest, opts ...grpc.CallOption) (*ListSecurityInfoResponse, error) {
	out := new(ListSecurityInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) GetSecurity(ctx context.Context, in *SecurityQryRequest, opts ...grpc.CallOption) (*SecurityInfoResponse, error) {
	out := new(SecurityInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/GetSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) DeleteSecurity(ctx context.Context, in *SecurityQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/DeleteSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListAllSecurity(ctx context.Context, in *SecurityAllQryRequest, opts ...grpc.CallOption) (*AllResourceInfoResponse, error) {
	out := new(AllResourceInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListAllSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) DeleteCSPSecurity(ctx context.Context, in *CSPSecurityQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/DeleteCSPSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) RegisterSecurity(ctx context.Context, in *SecurityRegisterRequest, opts ...grpc.CallOption) (*SecurityInfoResponse, error) {
	out := new(SecurityInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/RegisterSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) UnregisterSecurity(ctx context.Context, in *SecurityUnregiserQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/UnregisterSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) CreateKey(ctx context.Context, in *KeyPairCreateRequest, opts ...grpc.CallOption) (*KeyPairInfoResponse, error) {
	out := new(KeyPairInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/CreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListKey(ctx context.Context, in *KeyPairAllQryRequest, opts ...grpc.CallOption) (*ListKeyPairInfoResponse, error) {
	out := new(ListKeyPairInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) GetKey(ctx context.Context, in *KeyPairQryRequest, opts ...grpc.CallOption) (*KeyPairInfoResponse, error) {
	out := new(KeyPairInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) DeleteKey(ctx context.Context, in *KeyPairQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListAllKey(ctx context.Context, in *KeyPairAllQryRequest, opts ...grpc.CallOption) (*AllResourceInfoResponse, error) {
	out := new(AllResourceInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListAllKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) DeleteCSPKey(ctx context.Context, in *CSPKeyPairQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/DeleteCSPKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) RegisterKey(ctx context.Context, in *KeyPairRegisterRequest, opts ...grpc.CallOption) (*KeyPairInfoResponse, error) {
	out := new(KeyPairInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/RegisterKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) UnregisterKey(ctx context.Context, in *KeyPairUnregiserQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/UnregisterKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) StartVM(ctx context.Context, in *VMCreateRequest, opts ...grpc.CallOption) (*VMInfoResponse, error) {
	out := new(VMInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/StartVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ControlVM(ctx context.Context, in *VMActionRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ControlVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListVMStatus(ctx context.Context, in *VMAllQryRequest, opts ...grpc.CallOption) (*ListVMStatusInfoResponse, error) {
	out := new(ListVMStatusInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListVMStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) GetVMStatus(ctx context.Context, in *VMQryRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/GetVMStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListVM(ctx context.Context, in *VMAllQryRequest, opts ...grpc.CallOption) (*ListVMInfoResponse, error) {
	out := new(ListVMInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) GetVM(ctx context.Context, in *VMQryRequest, opts ...grpc.CallOption) (*VMInfoResponse, error) {
	out := new(VMInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/GetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) TerminateVM(ctx context.Context, in *VMQryRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/TerminateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) ListAllVM(ctx context.Context, in *VMAllQryRequest, opts ...grpc.CallOption) (*AllResourceInfoResponse, error) {
	out := new(AllResourceInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/ListAllVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) TerminateCSPVM(ctx context.Context, in *CSPVMQryRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/TerminateCSPVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) RegisterVM(ctx context.Context, in *VMRegisterRequest, opts ...grpc.CallOption) (*VMInfoResponse, error) {
	out := new(VMInfoResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/RegisterVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCMClient) UnregisterVM(ctx context.Context, in *VMUnregiserQryRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/cbspider.CCM/UnregisterVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCMServer is the server API for CCM service.
type CCMServer interface {
	CreateImage(context.Context, *ImageCreateRequest) (*ImageInfoResponse, error)
	ListImage(context.Context, *ImageAllQryRequest) (*ListImageInfoResponse, error)
	GetImage(context.Context, *ImageQryRequest) (*ImageInfoResponse, error)
	DeleteImage(context.Context, *ImageQryRequest) (*BooleanResponse, error)
	ListVMSpec(context.Context, *VMSpecAllQryRequest) (*ListVMSpecInfoResponse, error)
	GetVMSpec(context.Context, *VMSpecQryRequest) (*VMSpecInfoResponse, error)
	ListOrgVMSpec(context.Context, *VMSpecAllQryRequest) (*StringResponse, error)
	GetOrgVMSpec(context.Context, *VMSpecQryRequest) (*StringResponse, error)
	CreateVPC(context.Context, *VPCCreateRequest) (*VPCInfoResponse, error)
	ListVPC(context.Context, *VPCAllQryRequest) (*ListVPCInfoResponse, error)
	GetVPC(context.Context, *VPCQryRequest) (*VPCInfoResponse, error)
	DeleteVPC(context.Context, *VPCQryRequest) (*BooleanResponse, error)
	ListAllVPC(context.Context, *VPCAllQryRequest) (*AllResourceInfoResponse, error)
	DeleteCSPVPC(context.Context, *CSPVPCQryRequest) (*BooleanResponse, error)
	AddSubnet(context.Context, *SubnetAddRequest) (*VPCInfoResponse, error)
	RemoveSubnet(context.Context, *SubnetQryRequest) (*BooleanResponse, error)
	RemoveCSPSubnet(context.Context, *CSPSubnetQryRequest) (*BooleanResponse, error)
	RegisterVPC(context.Context, *VPCRegisterRequest) (*VPCInfoResponse, error)
	UnregisterVPC(context.Context, *VPCUnregiserQryRequest) (*BooleanResponse, error)
	CreateSecurity(context.Context, *SecurityCreateRequest) (*SecurityInfoResponse, error)
	ListSecurity(context.Context, *SecurityAllQryRequest) (*ListSecurityInfoResponse, error)
	GetSecurity(context.Context, *SecurityQryRequest) (*SecurityInfoResponse, error)
	DeleteSecurity(context.Context, *SecurityQryRequest) (*BooleanResponse, error)
	ListAllSecurity(context.Context, *SecurityAllQryRequest) (*AllResourceInfoResponse, error)
	DeleteCSPSecurity(context.Context, *CSPSecurityQryRequest) (*BooleanResponse, error)
	RegisterSecurity(context.Context, *SecurityRegisterRequest) (*SecurityInfoResponse, error)
	UnregisterSecurity(context.Context, *SecurityUnregiserQryRequest) (*BooleanResponse, error)
	CreateKey(context.Context, *KeyPairCreateRequest) (*KeyPairInfoResponse, error)
	ListKey(context.Context, *KeyPairAllQryRequest) (*ListKeyPairInfoResponse, error)
	GetKey(context.Context, *KeyPairQryRequest) (*KeyPairInfoResponse, error)
	DeleteKey(context.Context, *KeyPairQryRequest) (*BooleanResponse, error)
	ListAllKey(context.Context, *KeyPairAllQryRequest) (*AllResourceInfoResponse, error)
	DeleteCSPKey(context.Context, *CSPKeyPairQryRequest) (*BooleanResponse, error)
	RegisterKey(context.Context, *KeyPairRegisterRequest) (*KeyPairInfoResponse, error)
	UnregisterKey(context.Context, *KeyPairUnregiserQryRequest) (*BooleanResponse, error)
	StartVM(context.Context, *VMCreateRequest) (*VMInfoResponse, error)
	ControlVM(context.Context, *VMActionRequest) (*StatusResponse, error)
	ListVMStatus(context.Context, *VMAllQryRequest) (*ListVMStatusInfoResponse, error)
	GetVMStatus(context.Context, *VMQryRequest) (*StatusResponse, error)
	ListVM(context.Context, *VMAllQryRequest) (*ListVMInfoResponse, error)
	GetVM(context.Context, *VMQryRequest) (*VMInfoResponse, error)
	TerminateVM(context.Context, *VMQryRequest) (*StatusResponse, error)
	ListAllVM(context.Context, *VMAllQryRequest) (*AllResourceInfoResponse, error)
	TerminateCSPVM(context.Context, *CSPVMQryRequest) (*StatusResponse, error)
	RegisterVM(context.Context, *VMRegisterRequest) (*VMInfoResponse, error)
	UnregisterVM(context.Context, *VMUnregiserQryRequest) (*BooleanResponse, error)
}

// UnimplementedCCMServer can be embedded to have forward compatible implementations.
type UnimplementedCCMServer struct {
}

func (*UnimplementedCCMServer) CreateImage(ctx context.Context, req *ImageCreateRequest) (*ImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (*UnimplementedCCMServer) ListImage(ctx context.Context, req *ImageAllQryRequest) (*ListImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}
func (*UnimplementedCCMServer) GetImage(ctx context.Context, req *ImageQryRequest) (*ImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (*UnimplementedCCMServer) DeleteImage(ctx context.Context, req *ImageQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedCCMServer) ListVMSpec(ctx context.Context, req *VMSpecAllQryRequest) (*ListVMSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMSpec not implemented")
}
func (*UnimplementedCCMServer) GetVMSpec(ctx context.Context, req *VMSpecQryRequest) (*VMSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMSpec not implemented")
}
func (*UnimplementedCCMServer) ListOrgVMSpec(ctx context.Context, req *VMSpecAllQryRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgVMSpec not implemented")
}
func (*UnimplementedCCMServer) GetOrgVMSpec(ctx context.Context, req *VMSpecQryRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgVMSpec not implemented")
}
func (*UnimplementedCCMServer) CreateVPC(ctx context.Context, req *VPCCreateRequest) (*VPCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPC not implemented")
}
func (*UnimplementedCCMServer) ListVPC(ctx context.Context, req *VPCAllQryRequest) (*ListVPCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPC not implemented")
}
func (*UnimplementedCCMServer) GetVPC(ctx context.Context, req *VPCQryRequest) (*VPCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPC not implemented")
}
func (*UnimplementedCCMServer) DeleteVPC(ctx context.Context, req *VPCQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPC not implemented")
}
func (*UnimplementedCCMServer) ListAllVPC(ctx context.Context, req *VPCAllQryRequest) (*AllResourceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllVPC not implemented")
}
func (*UnimplementedCCMServer) DeleteCSPVPC(ctx context.Context, req *CSPVPCQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCSPVPC not implemented")
}
func (*UnimplementedCCMServer) AddSubnet(ctx context.Context, req *SubnetAddRequest) (*VPCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubnet not implemented")
}
func (*UnimplementedCCMServer) RemoveSubnet(ctx context.Context, req *SubnetQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubnet not implemented")
}
func (*UnimplementedCCMServer) RemoveCSPSubnet(ctx context.Context, req *CSPSubnetQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCSPSubnet not implemented")
}
func (*UnimplementedCCMServer) RegisterVPC(ctx context.Context, req *VPCRegisterRequest) (*VPCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVPC not implemented")
}
func (*UnimplementedCCMServer) UnregisterVPC(ctx context.Context, req *VPCUnregiserQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterVPC not implemented")
}
func (*UnimplementedCCMServer) CreateSecurity(ctx context.Context, req *SecurityCreateRequest) (*SecurityInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurity not implemented")
}
func (*UnimplementedCCMServer) ListSecurity(ctx context.Context, req *SecurityAllQryRequest) (*ListSecurityInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurity not implemented")
}
func (*UnimplementedCCMServer) GetSecurity(ctx context.Context, req *SecurityQryRequest) (*SecurityInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurity not implemented")
}
func (*UnimplementedCCMServer) DeleteSecurity(ctx context.Context, req *SecurityQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurity not implemented")
}
func (*UnimplementedCCMServer) ListAllSecurity(ctx context.Context, req *SecurityAllQryRequest) (*AllResourceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllSecurity not implemented")
}
func (*UnimplementedCCMServer) DeleteCSPSecurity(ctx context.Context, req *CSPSecurityQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCSPSecurity not implemented")
}
func (*UnimplementedCCMServer) RegisterSecurity(ctx context.Context, req *SecurityRegisterRequest) (*SecurityInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSecurity not implemented")
}
func (*UnimplementedCCMServer) UnregisterSecurity(ctx context.Context, req *SecurityUnregiserQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterSecurity not implemented")
}
func (*UnimplementedCCMServer) CreateKey(ctx context.Context, req *KeyPairCreateRequest) (*KeyPairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (*UnimplementedCCMServer) ListKey(ctx context.Context, req *KeyPairAllQryRequest) (*ListKeyPairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKey not implemented")
}
func (*UnimplementedCCMServer) GetKey(ctx context.Context, req *KeyPairQryRequest) (*KeyPairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (*UnimplementedCCMServer) DeleteKey(ctx context.Context, req *KeyPairQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (*UnimplementedCCMServer) ListAllKey(ctx context.Context, req *KeyPairAllQryRequest) (*AllResourceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllKey not implemented")
}
func (*UnimplementedCCMServer) DeleteCSPKey(ctx context.Context, req *CSPKeyPairQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCSPKey not implemented")
}
func (*UnimplementedCCMServer) RegisterKey(ctx context.Context, req *KeyPairRegisterRequest) (*KeyPairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKey not implemented")
}
func (*UnimplementedCCMServer) UnregisterKey(ctx context.Context, req *KeyPairUnregiserQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterKey not implemented")
}
func (*UnimplementedCCMServer) StartVM(ctx context.Context, req *VMCreateRequest) (*VMInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (*UnimplementedCCMServer) ControlVM(ctx context.Context, req *VMActionRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlVM not implemented")
}
func (*UnimplementedCCMServer) ListVMStatus(ctx context.Context, req *VMAllQryRequest) (*ListVMStatusInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMStatus not implemented")
}
func (*UnimplementedCCMServer) GetVMStatus(ctx context.Context, req *VMQryRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMStatus not implemented")
}
func (*UnimplementedCCMServer) ListVM(ctx context.Context, req *VMAllQryRequest) (*ListVMInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVM not implemented")
}
func (*UnimplementedCCMServer) GetVM(ctx context.Context, req *VMQryRequest) (*VMInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (*UnimplementedCCMServer) TerminateVM(ctx context.Context, req *VMQryRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateVM not implemented")
}
func (*UnimplementedCCMServer) ListAllVM(ctx context.Context, req *VMAllQryRequest) (*AllResourceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllVM not implemented")
}
func (*UnimplementedCCMServer) TerminateCSPVM(ctx context.Context, req *CSPVMQryRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateCSPVM not implemented")
}
func (*UnimplementedCCMServer) RegisterVM(ctx context.Context, req *VMRegisterRequest) (*VMInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVM not implemented")
}
func (*UnimplementedCCMServer) UnregisterVM(ctx context.Context, req *VMUnregiserQryRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterVM not implemented")
}

func RegisterCCMServer(s *grpc.Server, srv CCMServer) {
	s.RegisterService(&_CCM_serviceDesc, srv)
}

func _CCM_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).CreateImage(ctx, req.(*ImageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListImage(ctx, req.(*ImageAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).GetImage(ctx, req.(*ImageQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).DeleteImage(ctx, req.(*ImageQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListVMSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMSpecAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListVMSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListVMSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListVMSpec(ctx, req.(*VMSpecAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_GetVMSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMSpecQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).GetVMSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/GetVMSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).GetVMSpec(ctx, req.(*VMSpecQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListOrgVMSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMSpecAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListOrgVMSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListOrgVMSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListOrgVMSpec(ctx, req.(*VMSpecAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_GetOrgVMSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMSpecQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).GetOrgVMSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/GetOrgVMSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).GetOrgVMSpec(ctx, req.(*VMSpecQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_CreateVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).CreateVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/CreateVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).CreateVPC(ctx, req.(*VPCCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListVPC(ctx, req.(*VPCAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_GetVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).GetVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/GetVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).GetVPC(ctx, req.(*VPCQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_DeleteVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).DeleteVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/DeleteVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).DeleteVPC(ctx, req.(*VPCQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListAllVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListAllVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListAllVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListAllVPC(ctx, req.(*VPCAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_DeleteCSPVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPVPCQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).DeleteCSPVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/DeleteCSPVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).DeleteCSPVPC(ctx, req.(*CSPVPCQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_AddSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).AddSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/AddSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).AddSubnet(ctx, req.(*SubnetAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_RemoveSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).RemoveSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/RemoveSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).RemoveSubnet(ctx, req.(*SubnetQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_RemoveCSPSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPSubnetQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).RemoveCSPSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/RemoveCSPSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).RemoveCSPSubnet(ctx, req.(*CSPSubnetQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_RegisterVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).RegisterVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/RegisterVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).RegisterVPC(ctx, req.(*VPCRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_UnregisterVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCUnregiserQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).UnregisterVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/UnregisterVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).UnregisterVPC(ctx, req.(*VPCUnregiserQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_CreateSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).CreateSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/CreateSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).CreateSecurity(ctx, req.(*SecurityCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListSecurity(ctx, req.(*SecurityAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_GetSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).GetSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/GetSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).GetSecurity(ctx, req.(*SecurityQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_DeleteSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).DeleteSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/DeleteSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).DeleteSecurity(ctx, req.(*SecurityQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListAllSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListAllSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListAllSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListAllSecurity(ctx, req.(*SecurityAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_DeleteCSPSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPSecurityQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).DeleteCSPSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/DeleteCSPSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).DeleteCSPSecurity(ctx, req.(*CSPSecurityQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_RegisterSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).RegisterSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/RegisterSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).RegisterSecurity(ctx, req.(*SecurityRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_UnregisterSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityUnregiserQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).UnregisterSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/UnregisterSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).UnregisterSecurity(ctx, req.(*SecurityUnregiserQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).CreateKey(ctx, req.(*KeyPairCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListKey(ctx, req.(*KeyPairAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).GetKey(ctx, req.(*KeyPairQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).DeleteKey(ctx, req.(*KeyPairQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListAllKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListAllKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListAllKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListAllKey(ctx, req.(*KeyPairAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_DeleteCSPKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPKeyPairQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).DeleteCSPKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/DeleteCSPKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).DeleteCSPKey(ctx, req.(*CSPKeyPairQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_RegisterKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).RegisterKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/RegisterKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).RegisterKey(ctx, req.(*KeyPairRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_UnregisterKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairUnregiserQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).UnregisterKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/UnregisterKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).UnregisterKey(ctx, req.(*KeyPairUnregiserQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/StartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).StartVM(ctx, req.(*VMCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ControlVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ControlVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ControlVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ControlVM(ctx, req.(*VMActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListVMStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListVMStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListVMStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListVMStatus(ctx, req.(*VMAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_GetVMStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).GetVMStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/GetVMStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).GetVMStatus(ctx, req.(*VMQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListVM(ctx, req.(*VMAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/GetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).GetVM(ctx, req.(*VMQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_TerminateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).TerminateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/TerminateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).TerminateVM(ctx, req.(*VMQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_ListAllVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).ListAllVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/ListAllVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).ListAllVM(ctx, req.(*VMAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_TerminateCSPVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPVMQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).TerminateCSPVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/TerminateCSPVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).TerminateCSPVM(ctx, req.(*CSPVMQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_RegisterVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).RegisterVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/RegisterVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).RegisterVM(ctx, req.(*VMRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCM_UnregisterVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMUnregiserQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCMServer).UnregisterVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.CCM/UnregisterVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCMServer).UnregisterVM(ctx, req.(*VMUnregiserQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CCM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbspider.CCM",
	HandlerType: (*CCMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImage",
			Handler:    _CCM_CreateImage_Handler,
		},
		{
			MethodName: "ListImage",
			Handler:    _CCM_ListImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _CCM_GetImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _CCM_DeleteImage_Handler,
		},
		{
			MethodName: "ListVMSpec",
			Handler:    _CCM_ListVMSpec_Handler,
		},
		{
			MethodName: "GetVMSpec",
			Handler:    _CCM_GetVMSpec_Handler,
		},
		{
			MethodName: "ListOrgVMSpec",
			Handler:    _CCM_ListOrgVMSpec_Handler,
		},
		{
			MethodName: "GetOrgVMSpec",
			Handler:    _CCM_GetOrgVMSpec_Handler,
		},
		{
			MethodName: "CreateVPC",
			Handler:    _CCM_CreateVPC_Handler,
		},
		{
			MethodName: "ListVPC",
			Handler:    _CCM_ListVPC_Handler,
		},
		{
			MethodName: "GetVPC",
			Handler:    _CCM_GetVPC_Handler,
		},
		{
			MethodName: "DeleteVPC",
			Handler:    _CCM_DeleteVPC_Handler,
		},
		{
			MethodName: "ListAllVPC",
			Handler:    _CCM_ListAllVPC_Handler,
		},
		{
			MethodName: "DeleteCSPVPC",
			Handler:    _CCM_DeleteCSPVPC_Handler,
		},
		{
			MethodName: "AddSubnet",
			Handler:    _CCM_AddSubnet_Handler,
		},
		{
			MethodName: "RemoveSubnet",
			Handler:    _CCM_RemoveSubnet_Handler,
		},
		{
			MethodName: "RemoveCSPSubnet",
			Handler:    _CCM_RemoveCSPSubnet_Handler,
		},
		{
			MethodName: "RegisterVPC",
			Handler:    _CCM_RegisterVPC_Handler,
		},
		{
			MethodName: "UnregisterVPC",
			Handler:    _CCM_UnregisterVPC_Handler,
		},
		{
			MethodName: "CreateSecurity",
			Handler:    _CCM_CreateSecurity_Handler,
		},
		{
			MethodName: "ListSecurity",
			Handler:    _CCM_ListSecurity_Handler,
		},
		{
			MethodName: "GetSecurity",
			Handler:    _CCM_GetSecurity_Handler,
		},
		{
			MethodName: "DeleteSecurity",
			Handler:    _CCM_DeleteSecurity_Handler,
		},
		{
			MethodName: "ListAllSecurity",
			Handler:    _CCM_ListAllSecurity_Handler,
		},
		{
			MethodName: "DeleteCSPSecurity",
			Handler:    _CCM_DeleteCSPSecurity_Handler,
		},
		{
			MethodName: "RegisterSecurity",
			Handler:    _CCM_RegisterSecurity_Handler,
		},
		{
			MethodName: "UnregisterSecurity",
			Handler:    _CCM_UnregisterSecurity_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _CCM_CreateKey_Handler,
		},
		{
			MethodName: "ListKey",
			Handler:    _CCM_ListKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _CCM_GetKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _CCM_DeleteKey_Handler,
		},
		{
			MethodName: "ListAllKey",
			Handler:    _CCM_ListAllKey_Handler,
		},
		{
			MethodName: "DeleteCSPKey",
			Handler:    _CCM_DeleteCSPKey_Handler,
		},
		{
			MethodName: "RegisterKey",
			Handler:    _CCM_RegisterKey_Handler,
		},
		{
			MethodName: "UnregisterKey",
			Handler:    _CCM_UnregisterKey_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _CCM_StartVM_Handler,
		},
		{
			MethodName: "ControlVM",
			Handler:    _CCM_ControlVM_Handler,
		},
		{
			MethodName: "ListVMStatus",
			Handler:    _CCM_ListVMStatus_Handler,
		},
		{
			MethodName: "GetVMStatus",
			Handler:    _CCM_GetVMStatus_Handler,
		},
		{
			MethodName: "ListVM",
			Handler:    _CCM_ListVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _CCM_GetVM_Handler,
		},
		{
			MethodName: "TerminateVM",
			Handler:    _CCM_TerminateVM_Handler,
		},
		{
			MethodName: "ListAllVM",
			Handler:    _CCM_ListAllVM_Handler,
		},
		{
			MethodName: "TerminateCSPVM",
			Handler:    _CCM_TerminateCSPVM_Handler,
		},
		{
			MethodName: "RegisterVM",
			Handler:    _CCM_RegisterVM_Handler,
		},
		{
			MethodName: "UnregisterVM",
			Handler:    _CCM_UnregisterVM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbspider.proto",
}

// SSHClient is the client API for SSH service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SSHClient interface {
	SSHRun(ctx context.Context, in *SSHRunRequest, opts ...grpc.CallOption) (*StringResponse, error)
}

type sSHClient struct {
	cc *grpc.ClientConn
}

func NewSSHClient(cc *grpc.ClientConn) SSHClient {
	return &sSHClient{cc}
}

func (c *sSHClient) SSHRun(ctx context.Context, in *SSHRunRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/cbspider.SSH/SSHRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSHServer is the server API for SSH service.
type SSHServer interface {
	SSHRun(context.Context, *SSHRunRequest) (*StringResponse, error)
}

// UnimplementedSSHServer can be embedded to have forward compatible implementations.
type UnimplementedSSHServer struct {
}

func (*UnimplementedSSHServer) SSHRun(ctx context.Context, req *SSHRunRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSHRun not implemented")
}

func RegisterSSHServer(s *grpc.Server, srv SSHServer) {
	s.RegisterService(&_SSH_serviceDesc, srv)
}

func _SSH_SSHRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHServer).SSHRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbspider.SSH/SSHRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHServer).SSHRun(ctx, req.(*SSHRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SSH_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbspider.SSH",
	HandlerType: (*SSHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SSHRun",
			Handler:    _SSH_SSHRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbspider.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SystemId) > 0 {
		i -= len(m.SystemId)
		copy(dAtA[i:], m.SystemId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.SystemId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NameId) > 0 {
		i -= len(m.NameId)
		copy(dAtA[i:], m.NameId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.NameId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BooleanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BooleanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCloudOSInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCloudOSInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCloudOSInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Items[iNdEx])
			copy(dAtA[i:], m.Items[iNdEx])
			i = encodeVarintCbspider(dAtA, i, uint64(len(m.Items[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CloudDriverInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudDriverInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudDriverInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudDriverInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudDriverInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudDriverInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCloudDriverInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCloudDriverInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCloudDriverInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CloudDriverInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudDriverInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudDriverInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DriverLibFileName) > 0 {
		i -= len(m.DriverLibFileName)
		copy(dAtA[i:], m.DriverLibFileName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.DriverLibFileName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DriverName) > 0 {
		i -= len(m.DriverName)
		copy(dAtA[i:], m.DriverName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.DriverName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudDriverQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudDriverQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudDriverQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DriverName) > 0 {
		i -= len(m.DriverName)
		copy(dAtA[i:], m.DriverName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.DriverName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CredentialInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueInfoList) > 0 {
		for iNdEx := len(m.KeyValueInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CredentialName) > 0 {
		i -= len(m.CredentialName)
		copy(dAtA[i:], m.CredentialName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.CredentialName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CredentialName) > 0 {
		i -= len(m.CredentialName)
		copy(dAtA[i:], m.CredentialName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.CredentialName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRegionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRegionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRegionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueInfoList) > 0 {
		for iNdEx := len(m.KeyValueInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionConfigInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionConfigInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionConfigInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionConfigInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionConfigInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionConfigInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListConnectionConfigInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListConnectionConfigInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListConnectionConfigInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionConfigInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionConfigInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionConfigInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CredentialName) > 0 {
		i -= len(m.CredentialName)
		copy(dAtA[i:], m.CredentialName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.CredentialName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DriverName) > 0 {
		i -= len(m.DriverName)
		copy(dAtA[i:], m.DriverName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.DriverName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConfigName) > 0 {
		i -= len(m.ConfigName)
		copy(dAtA[i:], m.ConfigName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConfigName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionConfigQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionConfigQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionConfigQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfigName) > 0 {
		i -= len(m.ConfigName)
		copy(dAtA[i:], m.ConfigName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConfigName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllResourceInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllResourceInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllResourceInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllResourceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllResourceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllResourceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OnlyCspList) > 0 {
		for iNdEx := len(m.OnlyCspList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OnlyCspList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OnlySpiderList) > 0 {
		for iNdEx := len(m.OnlySpiderList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OnlySpiderList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MappedList) > 0 {
		for iNdEx := len(m.MappedList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MappedList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImageInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListImageInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListImageInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListImageInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GuestOs) > 0 {
		i -= len(m.GuestOs)
		copy(dAtA[i:], m.GuestOs)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.GuestOs)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageCreateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageCreateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageCreateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVMSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVMSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVMSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VMSpecInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMSpecInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMSpecInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Gpu) > 0 {
		for iNdEx := len(m.Gpu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gpu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Mem) > 0 {
		i -= len(m.Mem)
		copy(dAtA[i:], m.Mem)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Mem)))
		i--
		dAtA[i] = 0x22
	}
	if m.VCpu != nil {
		{
			size, err := m.VCpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VCpuInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VCpuInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VCpuInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clock) > 0 {
		i -= len(m.Clock)
		copy(dAtA[i:], m.Clock)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Clock)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GpuInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GpuInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GpuInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mem) > 0 {
		i -= len(m.Mem)
		copy(dAtA[i:], m.Mem)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Mem)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mfr) > 0 {
		i -= len(m.Mfr)
		copy(dAtA[i:], m.Mfr)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Mfr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMSpecAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMSpecAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMSpecAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMSpecQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMSpecQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMSpecQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVPCInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVPCInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVPCInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VPCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SubnetInfoList) > 0 {
		for iNdEx := len(m.SubnetInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubnetInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubnetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCCreateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCCreateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCCreateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubnetInfoList) > 0 {
		for iNdEx := len(m.SubnetInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubnetInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubnetCreateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetCreateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetCreateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCRegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCRegisterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCRegisterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCRegisterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CspId) > 0 {
		i -= len(m.CspId)
		copy(dAtA[i:], m.CspId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.CspId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSPVPCQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSPVPCQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSPVPCQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubnetAddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetAddRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetAddRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubnetQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubnetName) > 0 {
		i -= len(m.SubnetName)
		copy(dAtA[i:], m.SubnetName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.SubnetName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSPSubnetQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSPSubnetQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSPSubnetQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCUnregiserQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCUnregiserQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCUnregiserQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSecurityInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSecurityInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSecurityInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SecurityRules) > 0 {
		for iNdEx := len(m.SecurityRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VpcIid != nil {
		{
			size, err := m.VpcIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityRuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityRuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityRuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cidr) > 0 {
		i -= len(m.Cidr)
		copy(dAtA[i:], m.Cidr)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Cidr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IpProtocol) > 0 {
		i -= len(m.IpProtocol)
		copy(dAtA[i:], m.IpProtocol)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.IpProtocol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToPort) > 0 {
		i -= len(m.ToPort)
		copy(dAtA[i:], m.ToPort)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ToPort)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromPort) > 0 {
		i -= len(m.FromPort)
		copy(dAtA[i:], m.FromPort)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.FromPort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityCreateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityCreateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityCreateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SecurityRules) > 0 {
		for iNdEx := len(m.SecurityRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityRegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityRegisterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityRegisterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityRegisterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CspId) > 0 {
		i -= len(m.CspId)
		copy(dAtA[i:], m.CspId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.CspId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSPSecurityQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSPSecurityQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSPSecurityQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityUnregiserQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityUnregiserQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityUnregiserQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListKeyPairInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListKeyPairInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListKeyPairInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.VmUserId) > 0 {
		i -= len(m.VmUserId)
		copy(dAtA[i:], m.VmUserId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmUserId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairCreateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairCreateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairCreateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairRegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairRegisterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairRegisterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairRegisterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CspId) > 0 {
		i -= len(m.CspId)
		copy(dAtA[i:], m.CspId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.CspId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSPKeyPairQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSPKeyPairQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSPKeyPairQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPairUnregiserQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPairUnregiserQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPairUnregiserQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVMStatusInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVMStatusInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVMStatusInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VMStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VmStatus) > 0 {
		i -= len(m.VmStatus)
		copy(dAtA[i:], m.VmStatus)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmStatus)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVMInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVMInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVMInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VMInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.SshAccessPoint) > 0 {
		i -= len(m.SshAccessPoint)
		copy(dAtA[i:], m.SshAccessPoint)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.SshAccessPoint)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.VmBlockDisk) > 0 {
		i -= len(m.VmBlockDisk)
		copy(dAtA[i:], m.VmBlockDisk)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmBlockDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.VmBootDisk) > 0 {
		i -= len(m.VmBootDisk)
		copy(dAtA[i:], m.VmBootDisk)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmBootDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.PrivateDns) > 0 {
		i -= len(m.PrivateDns)
		copy(dAtA[i:], m.PrivateDns)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.PrivateDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PrivateIp) > 0 {
		i -= len(m.PrivateIp)
		copy(dAtA[i:], m.PrivateIp)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.PrivateIp)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PublicDns) > 0 {
		i -= len(m.PublicDns)
		copy(dAtA[i:], m.PublicDns)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.PublicDns)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.NetworkInterface) > 0 {
		i -= len(m.NetworkInterface)
		copy(dAtA[i:], m.NetworkInterface)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.NetworkInterface)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.VmUserPasswd) > 0 {
		i -= len(m.VmUserPasswd)
		copy(dAtA[i:], m.VmUserPasswd)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmUserPasswd)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.VmUserId) > 0 {
		i -= len(m.VmUserId)
		copy(dAtA[i:], m.VmUserId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmUserId)))
		i--
		dAtA[i] = 0x52
	}
	if m.KeyPairIid != nil {
		{
			size, err := m.KeyPairIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityGroupIids) > 0 {
		for iNdEx := len(m.SecurityGroupIids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityGroupIids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbspider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.SubnetIid != nil {
		{
			size, err := m.SubnetIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.VpcIid != nil {
		{
			size, err := m.VpcIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.VmSpecName) > 0 {
		i -= len(m.VmSpecName)
		copy(dAtA[i:], m.VmSpecName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmSpecName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ImageIid != nil {
		{
			size, err := m.ImageIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Region != nil {
		{
			size, err := m.Region.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMRegionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMRegionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMRegionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMCreateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMCreateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMCreateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VmUserPasswd) > 0 {
		i -= len(m.VmUserPasswd)
		copy(dAtA[i:], m.VmUserPasswd)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmUserPasswd)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VmUserId) > 0 {
		i -= len(m.VmUserId)
		copy(dAtA[i:], m.VmUserId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmUserId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeyPairName) > 0 {
		i -= len(m.KeyPairName)
		copy(dAtA[i:], m.KeyPairName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.KeyPairName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VmSpecName) > 0 {
		i -= len(m.VmSpecName)
		copy(dAtA[i:], m.VmSpecName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VmSpecName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityGroupNames) > 0 {
		for iNdEx := len(m.SecurityGroupNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityGroupNames[iNdEx])
			copy(dAtA[i:], m.SecurityGroupNames[iNdEx])
			i = encodeVarintCbspider(dAtA, i, uint64(len(m.SecurityGroupNames[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SubnetName) > 0 {
		i -= len(m.SubnetName)
		copy(dAtA[i:], m.SubnetName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.SubnetName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImageName) > 0 {
		i -= len(m.ImageName)
		copy(dAtA[i:], m.ImageName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ImageName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMRegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbspider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMRegisterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMRegisterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMRegisterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CspId) > 0 {
		i -= len(m.CspId)
		copy(dAtA[i:], m.CspId)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.CspId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSPVMQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSPVMQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSPVMQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMUnregiserQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMUnregiserQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMUnregiserQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SSHRunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSHRunRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHRunRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerPort) > 0 {
		i -= len(m.ServerPort)
		copy(dAtA[i:], m.ServerPort)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.ServerPort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrivateKey) > 0 {
		for iNdEx := len(m.PrivateKey) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrivateKey[iNdEx])
			copy(dAtA[i:], m.PrivateKey[iNdEx])
			i = encodeVarintCbspider(dAtA, i, uint64(len(m.PrivateKey[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintCbspider(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCbspider(dAtA []byte, offset int, v uint64) int {
	offset -= sovCbspider(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NameId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.SystemId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BooleanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCloudOSInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			l = len(s)
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloudDriverInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloudDriverInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCloudDriverInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloudDriverInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DriverName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.DriverLibFileName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloudDriverQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DriverName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CredentialInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CredentialInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCredentialInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CredentialInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.KeyValueInfoList) > 0 {
		for _, e := range m.KeyValueInfoList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CredentialQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRegionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.KeyValueInfoList) > 0 {
		for _, e := range m.KeyValueInfoList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectionConfigInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectionConfigInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListConnectionConfigInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectionConfigInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.DriverName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.CredentialName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectionConfigQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllResourceInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllResourceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MappedList) > 0 {
		for _, e := range m.MappedList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if len(m.OnlySpiderList) > 0 {
		for _, e := range m.OnlySpiderList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if len(m.OnlyCspList) > 0 {
		for _, e := range m.OnlyCspList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListImageInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.GuestOs)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageCreateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVMSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMSpecInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.VCpu != nil {
		l = m.VCpu.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Mem)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.Gpu) > 0 {
		for _, e := range m.Gpu {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VCpuInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Clock)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GpuInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Mfr)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Mem)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMSpecAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMSpecQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVPCInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.SubnetInfoList) > 0 {
		for _, e := range m.SubnetInfoList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubnetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCCreateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.SubnetInfoList) > 0 {
		for _, e := range m.SubnetInfoList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubnetCreateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCRegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCRegisterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.CspId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CSPVPCQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubnetAddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubnetQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.SubnetName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CSPSubnetQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VPCUnregiserQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSecurityInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.VpcIid != nil {
		l = m.VpcIid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.SecurityRules) > 0 {
		for _, e := range m.SecurityRules {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityRuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromPort)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.ToPort)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.IpProtocol)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Cidr)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityCreateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.SecurityRules) > 0 {
		for _, e := range m.SecurityRules {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityRegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityRegisterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.CspId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CSPSecurityQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecurityUnregiserQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListKeyPairInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmUserId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairCreateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairRegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairRegisterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.CspId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CSPKeyPairQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyPairUnregiserQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVMStatusInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmStatus)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVMInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.ImageIid != nil {
		l = m.ImageIid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmSpecName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.VpcIid != nil {
		l = m.VpcIid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.SubnetIid != nil {
		l = m.SubnetIid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.SecurityGroupIids) > 0 {
		for _, e := range m.SecurityGroupIids {
			l = e.Size()
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	if m.KeyPairIid != nil {
		l = m.KeyPairIid.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmUserId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmUserPasswd)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.NetworkInterface)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.PublicDns)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.PrivateIp)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.PrivateDns)
	if l > 0 {
		n += 2 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmBootDisk)
	if l > 0 {
		n += 2 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmBlockDisk)
	if l > 0 {
		n += 2 + l + sovCbspider(uint64(l))
	}
	l = len(m.SshAccessPoint)
	if l > 0 {
		n += 2 + l + sovCbspider(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 2 + l + sovCbspider(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMRegionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMCreateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.SubnetName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.SecurityGroupNames) > 0 {
		for _, s := range m.SecurityGroupNames {
			l = len(s)
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	l = len(m.VmSpecName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.KeyPairName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmUserId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.VmUserPasswd)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMRegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMRegisterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.CspId)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CSPVMQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VMUnregiserQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SSHRunRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if len(m.PrivateKey) > 0 {
		for _, s := range m.PrivateKey {
			l = len(s)
			n += 1 + l + sovCbspider(uint64(l))
		}
	}
	l = len(m.ServerPort)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovCbspider(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCbspider(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCbspider(x uint64) (n int) {
	return sovCbspider(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BooleanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCloudOSInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCloudOSInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCloudOSInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudDriverInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudDriverInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudDriverInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &CloudDriverInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudDriverInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudDriverInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudDriverInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &CloudDriverInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCloudDriverInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCloudDriverInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCloudDriverInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CloudDriverInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudDriverInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudDriverInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudDriverInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverLibFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverLibFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudDriverQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudDriverQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudDriverQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &CredentialInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &CredentialInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCredentialInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCredentialInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CredentialInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueInfoList = append(m.KeyValueInfoList, &KeyValue{})
			if err := m.KeyValueInfoList[len(m.KeyValueInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &RegionInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &RegionInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRegionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRegionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRegionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RegionInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueInfoList = append(m.KeyValueInfoList, &KeyValue{})
			if err := m.KeyValueInfoList[len(m.KeyValueInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionConfigInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionConfigInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionConfigInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ConnectionConfigInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionConfigInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionConfigInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionConfigInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ConnectionConfigInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListConnectionConfigInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListConnectionConfigInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListConnectionConfigInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ConnectionConfigInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionConfigInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionConfigInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionConfigInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionConfigQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionConfigQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionConfigQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllResourceInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllResourceInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllResourceInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &AllResourceInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllResourceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllResourceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllResourceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappedList = append(m.MappedList, &IID{})
			if err := m.MappedList[len(m.MappedList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlySpiderList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlySpiderList = append(m.OnlySpiderList, &IID{})
			if err := m.OnlySpiderList[len(m.OnlySpiderList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyCspList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlyCspList = append(m.OnlyCspList, &IID{})
			if err := m.OnlyCspList[len(m.OnlyCspList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ImageInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListImageInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListImageInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListImageInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ImageInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestOs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuestOs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ImageCreateInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageCreateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageCreateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageCreateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &VMSpecInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVMSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVMSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVMSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &VMSpecInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMSpecInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMSpecInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMSpecInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VCpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VCpu == nil {
				m.VCpu = &VCpuInfo{}
			}
			if err := m.VCpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpu = append(m.Gpu, &GpuInfo{})
			if err := m.Gpu[len(m.Gpu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCpuInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCpuInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCpuInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GpuInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GpuInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GpuInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mfr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mfr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMSpecAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMSpecAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMSpecAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMSpecQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMSpecQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMSpecQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &VPCInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVPCInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVPCInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVPCInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &VPCInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetInfoList = append(m.SubnetInfoList, &SubnetInfo{})
			if err := m.SubnetInfoList[len(m.SubnetInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &VPCCreateInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCCreateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCCreateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCCreateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetInfoList = append(m.SubnetInfoList, &SubnetCreateInfo{})
			if err := m.SubnetInfoList[len(m.SubnetInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetCreateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetCreateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetCreateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &VPCRegisterInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCRegisterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCRegisterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCRegisterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSPVPCQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSPVPCQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSPVPCQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetAddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetAddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetAddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &SubnetCreateInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSPSubnetQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSPSubnetQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSPSubnetQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCUnregiserQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCUnregiserQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCUnregiserQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &SecurityInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSecurityInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSecurityInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSecurityInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SecurityInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIid == nil {
				m.VpcIid = &IID{}
			}
			if err := m.VpcIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRules = append(m.SecurityRules, &SecurityRuleInfo{})
			if err := m.SecurityRules[len(m.SecurityRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityRuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityRuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityRuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &SecurityCreateInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityCreateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityCreateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityCreateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRules = append(m.SecurityRules, &SecurityRuleInfo{})
			if err := m.SecurityRules[len(m.SecurityRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &SecurityRegisterInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityRegisterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityRegisterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityRegisterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSPSecurityQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSPSecurityQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSPSecurityQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityUnregiserQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityUnregiserQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityUnregiserQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &KeyPairInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListKeyPairInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListKeyPairInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListKeyPairInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &KeyPairInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &KeyPairCreateInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairCreateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairCreateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairCreateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &KeyPairRegisterInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairRegisterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairRegisterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairRegisterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSPKeyPairQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSPKeyPairQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSPKeyPairQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPairUnregiserQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPairUnregiserQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPairUnregiserQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVMStatusInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVMStatusInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVMStatusInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &VMStatusInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &VMInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVMInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVMInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVMInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &VMInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &VMRegionInfo{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageIid == nil {
				m.ImageIid = &IID{}
			}
			if err := m.ImageIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIid == nil {
				m.VpcIid = &IID{}
			}
			if err := m.VpcIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubnetIid == nil {
				m.SubnetIid = &IID{}
			}
			if err := m.SubnetIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupIids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupIids = append(m.SecurityGroupIids, &IID{})
			if err := m.SecurityGroupIids[len(m.SecurityGroupIids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPairIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyPairIid == nil {
				m.KeyPairIid = &IID{}
			}
			if err := m.KeyPairIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserPasswd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserPasswd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBootDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBootDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBlockDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBlockDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshAccessPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshAccessPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMRegionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMRegionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMRegionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &VMCreateInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMCreateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMCreateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMCreateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupNames = append(m.SecurityGroupNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPairName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPairName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserPasswd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserPasswd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &VMRegisterInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMRegisterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMRegisterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMRegisterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSPVMQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSPVMQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSPVMQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMUnregiserQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMUnregiserQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMUnregiserQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSHRunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSHRunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSHRunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = append(m.PrivateKey, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbspider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbspider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbspider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbspider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCbspider(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCbspider
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbspider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCbspider
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCbspider
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCbspider
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCbspider        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCbspider          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCbspider = fmt.Errorf("proto: unexpected end of group")
)

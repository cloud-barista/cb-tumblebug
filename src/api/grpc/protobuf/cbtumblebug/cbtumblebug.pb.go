// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cbtumblebug/cbtumblebug.proto

package cbtumblebug

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cloud-barista/cb-tumblebug/src/api/grpc/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type KeyValue struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,json=Key,proto3" json:"Key" yaml:"Key"`
	Value                string   `protobuf:"bytes,2,opt,name=value,json=Value,proto3" json:"Value" yaml:"Value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{1}
}
func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return m.Size()
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IID is defined & used by CB-Spider
type IID struct {
	NameId               string   `protobuf:"bytes,1,opt,name=name_id,json=NameId,proto3" json:"NameId" yaml:"NameId"`
	SystemId             string   `protobuf:"bytes,2,opt,name=system_id,json=SystemId,proto3" json:"SystemId" yaml:"SystemId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IID) Reset()         { *m = IID{} }
func (m *IID) String() string { return proto.CompactTextString(m) }
func (*IID) ProtoMessage()    {}
func (*IID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{2}
}
func (m *IID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IID.Merge(m, src)
}
func (m *IID) XXX_Size() int {
	return m.Size()
}
func (m *IID) XXX_DiscardUnknown() {
	xxx_messageInfo_IID.DiscardUnknown(m)
}

var xxx_messageInfo_IID proto.InternalMessageInfo

func (m *IID) GetNameId() string {
	if m != nil {
		return m.NameId
	}
	return ""
}

func (m *IID) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

type BooleanResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,json=Result,proto3" json:"Result" yaml:"Result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BooleanResponse) Reset()         { *m = BooleanResponse{} }
func (m *BooleanResponse) String() string { return proto.CompactTextString(m) }
func (*BooleanResponse) ProtoMessage()    {}
func (*BooleanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{3}
}
func (m *BooleanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BooleanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BooleanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BooleanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanResponse.Merge(m, src)
}
func (m *BooleanResponse) XXX_Size() int {
	return m.Size()
}
func (m *BooleanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanResponse proto.InternalMessageInfo

func (m *BooleanResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type ExistsResponse struct {
	Exists               bool     `protobuf:"varint,1,opt,name=exists,proto3" json:"exists" yaml:"exists"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistsResponse) Reset()         { *m = ExistsResponse{} }
func (m *ExistsResponse) String() string { return proto.CompactTextString(m) }
func (*ExistsResponse) ProtoMessage()    {}
func (*ExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{4}
}
func (m *ExistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsResponse.Merge(m, src)
}
func (m *ExistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsResponse proto.InternalMessageInfo

func (m *ExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type StringResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,json=Result,proto3" json:"Result" yaml:"Result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringResponse) Reset()         { *m = StringResponse{} }
func (m *StringResponse) String() string { return proto.CompactTextString(m) }
func (*StringResponse) ProtoMessage()    {}
func (*StringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{5}
}
func (m *StringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringResponse.Merge(m, src)
}
func (m *StringResponse) XXX_Size() int {
	return m.Size()
}
func (m *StringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StringResponse proto.InternalMessageInfo

func (m *StringResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type MessageResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message" yaml:"message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageResponse) Reset()         { *m = MessageResponse{} }
func (m *MessageResponse) String() string { return proto.CompactTextString(m) }
func (*MessageResponse) ProtoMessage()    {}
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{6}
}
func (m *MessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageResponse.Merge(m, src)
}
func (m *MessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MessageResponse proto.InternalMessageInfo

func (m *MessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StatusResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,json=Status,proto3" json:"Status" yaml:"Status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{7}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type NSInfoResponse struct {
	Item                 *NSInfo  `protobuf:"bytes,1,opt,name=item,json=ns,proto3" json:"ns" yaml:"ns"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSInfoResponse) Reset()         { *m = NSInfoResponse{} }
func (m *NSInfoResponse) String() string { return proto.CompactTextString(m) }
func (*NSInfoResponse) ProtoMessage()    {}
func (*NSInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{8}
}
func (m *NSInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSInfoResponse.Merge(m, src)
}
func (m *NSInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *NSInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NSInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NSInfoResponse proto.InternalMessageInfo

func (m *NSInfoResponse) GetItem() *NSInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListNSInfoResponse struct {
	Items                []*NSInfo `protobuf:"bytes,1,rep,name=items,json=ns,proto3" json:"ns" yaml:"ns"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListNSInfoResponse) Reset()         { *m = ListNSInfoResponse{} }
func (m *ListNSInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListNSInfoResponse) ProtoMessage()    {}
func (*ListNSInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{9}
}
func (m *ListNSInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNSInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNSInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNSInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNSInfoResponse.Merge(m, src)
}
func (m *ListNSInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNSInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNSInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNSInfoResponse proto.InternalMessageInfo

func (m *ListNSInfoResponse) GetItems() []*NSInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type NSInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSInfo) Reset()         { *m = NSInfo{} }
func (m *NSInfo) String() string { return proto.CompactTextString(m) }
func (*NSInfo) ProtoMessage()    {}
func (*NSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{10}
}
func (m *NSInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSInfo.Merge(m, src)
}
func (m *NSInfo) XXX_Size() int {
	return m.Size()
}
func (m *NSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NSInfo proto.InternalMessageInfo

func (m *NSInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NSInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NSInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type NSCreateRequest struct {
	Item                 *NsReq   `protobuf:"bytes,1,opt,name=item,json=ns,proto3" json:"ns" yaml:"ns"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSCreateRequest) Reset()         { *m = NSCreateRequest{} }
func (m *NSCreateRequest) String() string { return proto.CompactTextString(m) }
func (*NSCreateRequest) ProtoMessage()    {}
func (*NSCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{11}
}
func (m *NSCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSCreateRequest.Merge(m, src)
}
func (m *NSCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSCreateRequest proto.InternalMessageInfo

func (m *NSCreateRequest) GetItem() *NsReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type NsReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NsReq) Reset()         { *m = NsReq{} }
func (m *NsReq) String() string { return proto.CompactTextString(m) }
func (*NsReq) ProtoMessage()    {}
func (*NsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{12}
}
func (m *NsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NsReq.Merge(m, src)
}
func (m *NsReq) XXX_Size() int {
	return m.Size()
}
func (m *NsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NsReq.DiscardUnknown(m)
}

var xxx_messageInfo_NsReq proto.InternalMessageInfo

func (m *NsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NsReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type NSQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSQryRequest) Reset()         { *m = NSQryRequest{} }
func (m *NSQryRequest) String() string { return proto.CompactTextString(m) }
func (*NSQryRequest) ProtoMessage()    {}
func (*NSQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{13}
}
func (m *NSQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSQryRequest.Merge(m, src)
}
func (m *NSQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSQryRequest proto.InternalMessageInfo

func (m *NSQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

type ListIdResponse struct {
	IdList               []string `protobuf:"bytes,1,rep,name=id_list,json=idList,proto3" json:"idList" yaml:"idList"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListIdResponse) Reset()         { *m = ListIdResponse{} }
func (m *ListIdResponse) String() string { return proto.CompactTextString(m) }
func (*ListIdResponse) ProtoMessage()    {}
func (*ListIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{14}
}
func (m *ListIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIdResponse.Merge(m, src)
}
func (m *ListIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListIdResponse proto.InternalMessageInfo

func (m *ListIdResponse) GetIdList() []string {
	if m != nil {
		return m.IdList
	}
	return nil
}

type ResourceQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	ResourceType         string   `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resourceType" yaml:"resourceType"`
	ResourceId           string   `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resourceId" yaml:"resourceId"`
	Force                string   `protobuf:"bytes,4,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceQryRequest) Reset()         { *m = ResourceQryRequest{} }
func (m *ResourceQryRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceQryRequest) ProtoMessage()    {}
func (*ResourceQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{15}
}
func (m *ResourceQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceQryRequest.Merge(m, src)
}
func (m *ResourceQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResourceQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceQryRequest proto.InternalMessageInfo

func (m *ResourceQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *ResourceQryRequest) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ResourceQryRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ResourceQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type ResourceAllQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	ResourceType         string   `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resourceType" yaml:"resourceType"`
	Force                string   `protobuf:"bytes,3,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceAllQryRequest) Reset()         { *m = ResourceAllQryRequest{} }
func (m *ResourceAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceAllQryRequest) ProtoMessage()    {}
func (*ResourceAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{16}
}
func (m *ResourceAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceAllQryRequest.Merge(m, src)
}
func (m *ResourceAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResourceAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceAllQryRequest proto.InternalMessageInfo

func (m *ResourceAllQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *ResourceAllQryRequest) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ResourceAllQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type TbImageInfoRequest struct {
	NsId                 string       `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbImageInfo `protobuf:"bytes,2,opt,name=item,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TbImageInfoRequest) Reset()         { *m = TbImageInfoRequest{} }
func (m *TbImageInfoRequest) String() string { return proto.CompactTextString(m) }
func (*TbImageInfoRequest) ProtoMessage()    {}
func (*TbImageInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{17}
}
func (m *TbImageInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageInfoRequest.Merge(m, src)
}
func (m *TbImageInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbImageInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageInfoRequest proto.InternalMessageInfo

func (m *TbImageInfoRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbImageInfoRequest) GetItem() *TbImageInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbImageInfoResponse struct {
	Item                 *TbImageInfo `protobuf:"bytes,1,opt,name=item,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TbImageInfoResponse) Reset()         { *m = TbImageInfoResponse{} }
func (m *TbImageInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbImageInfoResponse) ProtoMessage()    {}
func (*TbImageInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{18}
}
func (m *TbImageInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageInfoResponse.Merge(m, src)
}
func (m *TbImageInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbImageInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageInfoResponse proto.InternalMessageInfo

func (m *TbImageInfoResponse) GetItem() *TbImageInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbImageInfoResponse struct {
	Items                []*TbImageInfo `protobuf:"bytes,1,rep,name=items,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListTbImageInfoResponse) Reset()         { *m = ListTbImageInfoResponse{} }
func (m *ListTbImageInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbImageInfoResponse) ProtoMessage()    {}
func (*ListTbImageInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{19}
}
func (m *ListTbImageInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbImageInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbImageInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbImageInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbImageInfoResponse.Merge(m, src)
}
func (m *ListTbImageInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbImageInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbImageInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbImageInfoResponse proto.InternalMessageInfo

func (m *ListTbImageInfoResponse) GetItems() []*TbImageInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbImageInfo struct {
	Namespace            string      `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace" yaml:"namespace"`
	Id                   string      `protobuf:"bytes,2,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string      `protobuf:"bytes,4,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspImageId           string      `protobuf:"bytes,5,opt,name=csp_image_id,json=cspImageId,proto3" json:"cspImageId" yaml:"cspImageId"`
	CspImageName         string      `protobuf:"bytes,6,opt,name=csp_image_name,json=cspImageName,proto3" json:"cspImageName" yaml:"cspImageName"`
	Description          string      `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	CreationDate         string      `protobuf:"bytes,8,opt,name=creation_date,json=creationDate,proto3" json:"creationDate,omitempty" yaml:"creationDate"`
	GuestOs              string      `protobuf:"bytes,9,opt,name=guest_os,json=guestOS,proto3" json:"guestOS,omitempty" yaml:"guestOS"`
	Status               string      `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty" yaml:"status"`
	KeyValueList         []*KeyValue `protobuf:"bytes,11,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList,omitempty" yaml:"keyValueList"`
	AssociatedObjectList []string    `protobuf:"bytes,12,rep,name=associated_object_list,json=associatedObjectList,proto3" json:"associatedObjectList" yaml:"associatedObjectList"`
	IsAutoGenerated      bool        `protobuf:"varint,13,opt,name=is_auto_generated,json=isAutoGenerated,proto3" json:"isAutoGenerated" yaml:"isAutoGenerated"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbImageInfo) Reset()         { *m = TbImageInfo{} }
func (m *TbImageInfo) String() string { return proto.CompactTextString(m) }
func (*TbImageInfo) ProtoMessage()    {}
func (*TbImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{20}
}
func (m *TbImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageInfo.Merge(m, src)
}
func (m *TbImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageInfo proto.InternalMessageInfo

func (m *TbImageInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *TbImageInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbImageInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbImageInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbImageInfo) GetCspImageId() string {
	if m != nil {
		return m.CspImageId
	}
	return ""
}

func (m *TbImageInfo) GetCspImageName() string {
	if m != nil {
		return m.CspImageName
	}
	return ""
}

func (m *TbImageInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbImageInfo) GetCreationDate() string {
	if m != nil {
		return m.CreationDate
	}
	return ""
}

func (m *TbImageInfo) GetGuestOs() string {
	if m != nil {
		return m.GuestOs
	}
	return ""
}

func (m *TbImageInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbImageInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

func (m *TbImageInfo) GetAssociatedObjectList() []string {
	if m != nil {
		return m.AssociatedObjectList
	}
	return nil
}

func (m *TbImageInfo) GetIsAutoGenerated() bool {
	if m != nil {
		return m.IsAutoGenerated
	}
	return false
}

type TbImageCreateRequest struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbImageReq `protobuf:"bytes,2,opt,name=item,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbImageCreateRequest) Reset()         { *m = TbImageCreateRequest{} }
func (m *TbImageCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbImageCreateRequest) ProtoMessage()    {}
func (*TbImageCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{21}
}
func (m *TbImageCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageCreateRequest.Merge(m, src)
}
func (m *TbImageCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbImageCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageCreateRequest proto.InternalMessageInfo

func (m *TbImageCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbImageCreateRequest) GetItem() *TbImageReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbImageReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspImageId           string   `protobuf:"bytes,3,opt,name=csp_image_id,json=cspImageId,proto3" json:"cspImageId" yaml:"cspImageId"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbImageReq) Reset()         { *m = TbImageReq{} }
func (m *TbImageReq) String() string { return proto.CompactTextString(m) }
func (*TbImageReq) ProtoMessage()    {}
func (*TbImageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{22}
}
func (m *TbImageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageReq.Merge(m, src)
}
func (m *TbImageReq) XXX_Size() int {
	return m.Size()
}
func (m *TbImageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageReq proto.InternalMessageInfo

func (m *TbImageReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbImageReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbImageReq) GetCspImageId() string {
	if m != nil {
		return m.CspImageId
	}
	return ""
}

func (m *TbImageReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type FetchImageQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	NsId                 string   `protobuf:"bytes,2,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchImageQryRequest) Reset()         { *m = FetchImageQryRequest{} }
func (m *FetchImageQryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchImageQryRequest) ProtoMessage()    {}
func (*FetchImageQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{23}
}
func (m *FetchImageQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchImageQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchImageQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchImageQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchImageQryRequest.Merge(m, src)
}
func (m *FetchImageQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchImageQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchImageQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchImageQryRequest proto.InternalMessageInfo

func (m *FetchImageQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *FetchImageQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

type SearchImageQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Keywords             []string `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords" yaml:"keywords"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchImageQryRequest) Reset()         { *m = SearchImageQryRequest{} }
func (m *SearchImageQryRequest) String() string { return proto.CompactTextString(m) }
func (*SearchImageQryRequest) ProtoMessage()    {}
func (*SearchImageQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{24}
}
func (m *SearchImageQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchImageQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchImageQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchImageQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchImageQryRequest.Merge(m, src)
}
func (m *SearchImageQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchImageQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchImageQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchImageQryRequest proto.InternalMessageInfo

func (m *SearchImageQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *SearchImageQryRequest) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

type SpiderImageInfoResponse struct {
	Item                 *SpiderImageInfo `protobuf:"bytes,1,opt,name=item,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SpiderImageInfoResponse) Reset()         { *m = SpiderImageInfoResponse{} }
func (m *SpiderImageInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SpiderImageInfoResponse) ProtoMessage()    {}
func (*SpiderImageInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{25}
}
func (m *SpiderImageInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderImageInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderImageInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderImageInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderImageInfoResponse.Merge(m, src)
}
func (m *SpiderImageInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpiderImageInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderImageInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderImageInfoResponse proto.InternalMessageInfo

func (m *SpiderImageInfoResponse) GetItem() *SpiderImageInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListSpiderImageInfoResponse struct {
	Items                []*SpiderImageInfo `protobuf:"bytes,1,rep,name=items,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListSpiderImageInfoResponse) Reset()         { *m = ListSpiderImageInfoResponse{} }
func (m *ListSpiderImageInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListSpiderImageInfoResponse) ProtoMessage()    {}
func (*ListSpiderImageInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{26}
}
func (m *ListSpiderImageInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSpiderImageInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSpiderImageInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSpiderImageInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpiderImageInfoResponse.Merge(m, src)
}
func (m *ListSpiderImageInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSpiderImageInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpiderImageInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpiderImageInfoResponse proto.InternalMessageInfo

func (m *ListSpiderImageInfoResponse) GetItems() []*SpiderImageInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type SpiderImageInfo struct {
	Iid                  *IID        `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	GuestOs              string      `protobuf:"bytes,2,opt,name=guest_os,json=GuestOS,proto3" json:"GuestOS" yaml:"GuestOS"`
	Status               string      `protobuf:"bytes,3,opt,name=status,json=Status,proto3" json:"Status" yaml:"Status"`
	KeyValueList         []*KeyValue `protobuf:"bytes,4,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SpiderImageInfo) Reset()         { *m = SpiderImageInfo{} }
func (m *SpiderImageInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderImageInfo) ProtoMessage()    {}
func (*SpiderImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{27}
}
func (m *SpiderImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderImageInfo.Merge(m, src)
}
func (m *SpiderImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderImageInfo proto.InternalMessageInfo

func (m *SpiderImageInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *SpiderImageInfo) GetGuestOs() string {
	if m != nil {
		return m.GuestOs
	}
	return ""
}

func (m *SpiderImageInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SpiderImageInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type LookupImageListQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupImageListQryRequest) Reset()         { *m = LookupImageListQryRequest{} }
func (m *LookupImageListQryRequest) String() string { return proto.CompactTextString(m) }
func (*LookupImageListQryRequest) ProtoMessage()    {}
func (*LookupImageListQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{28}
}
func (m *LookupImageListQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupImageListQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupImageListQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupImageListQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupImageListQryRequest.Merge(m, src)
}
func (m *LookupImageListQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupImageListQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupImageListQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupImageListQryRequest proto.InternalMessageInfo

func (m *LookupImageListQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type LookupImageQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspImageId           string   `protobuf:"bytes,2,opt,name=csp_image_id,json=cspImageId,proto3" json:"cspImageId" yaml:"cspImageId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupImageQryRequest) Reset()         { *m = LookupImageQryRequest{} }
func (m *LookupImageQryRequest) String() string { return proto.CompactTextString(m) }
func (*LookupImageQryRequest) ProtoMessage()    {}
func (*LookupImageQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{29}
}
func (m *LookupImageQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupImageQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupImageQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupImageQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupImageQryRequest.Merge(m, src)
}
func (m *LookupImageQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupImageQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupImageQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupImageQryRequest proto.InternalMessageInfo

func (m *LookupImageQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *LookupImageQryRequest) GetCspImageId() string {
	if m != nil {
		return m.CspImageId
	}
	return ""
}

type TbSshKeyInfoResponse struct {
	Item                 *TbSshKeyInfo `protobuf:"bytes,1,opt,name=item,json=sshKey,proto3" json:"sshKey" yaml:"sshKey"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TbSshKeyInfoResponse) Reset()         { *m = TbSshKeyInfoResponse{} }
func (m *TbSshKeyInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbSshKeyInfoResponse) ProtoMessage()    {}
func (*TbSshKeyInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{30}
}
func (m *TbSshKeyInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSshKeyInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSshKeyInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSshKeyInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSshKeyInfoResponse.Merge(m, src)
}
func (m *TbSshKeyInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbSshKeyInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSshKeyInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbSshKeyInfoResponse proto.InternalMessageInfo

func (m *TbSshKeyInfoResponse) GetItem() *TbSshKeyInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbSshKeyInfoResponse struct {
	Items                []*TbSshKeyInfo `protobuf:"bytes,1,rep,name=items,json=sshKey,proto3" json:"sshKey" yaml:"sshKey"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListTbSshKeyInfoResponse) Reset()         { *m = ListTbSshKeyInfoResponse{} }
func (m *ListTbSshKeyInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbSshKeyInfoResponse) ProtoMessage()    {}
func (*ListTbSshKeyInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{31}
}
func (m *ListTbSshKeyInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbSshKeyInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbSshKeyInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbSshKeyInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbSshKeyInfoResponse.Merge(m, src)
}
func (m *ListTbSshKeyInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbSshKeyInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbSshKeyInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbSshKeyInfoResponse proto.InternalMessageInfo

func (m *ListTbSshKeyInfoResponse) GetItems() []*TbSshKeyInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbSshKeyInfo struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string      `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	Description          string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	CspSshKeyName        string      `protobuf:"bytes,5,opt,name=csp_ssh_key_name,json=cspSshKeyName,proto3" json:"cspSshKeyName" yaml:"cspSshKeyName"`
	Fingerprint          string      `protobuf:"bytes,6,opt,name=fingerprint,proto3" json:"fingerprint" yaml:"fingerprint"`
	Username             string      `protobuf:"bytes,7,opt,name=username,proto3" json:"username" yaml:"username"`
	VerifiedUserName     string      `protobuf:"bytes,8,opt,name=verified_user_name,json=verifiedUsername,proto3" json:"verifiedUsername" yaml:"verifiedUsername"`
	PublicKey            string      `protobuf:"bytes,9,opt,name=public_key,json=publicKey,proto3" json:"publicKey" yaml:"publicKey"`
	PrivateKey           string      `protobuf:"bytes,10,opt,name=private_key,json=privateKey,proto3" json:"privateKey" yaml:"privateKey"`
	KeyValueList         []*KeyValue `protobuf:"bytes,11,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList" yaml:"keyValueList"`
	AssociatedObjectList []string    `protobuf:"bytes,12,rep,name=associated_object_list,json=associatedObjectList,proto3" json:"associatedObjectList" yaml:"associatedObjectList"`
	IsAutoGenerated      bool        `protobuf:"varint,13,opt,name=is_auto_generated,json=isAutoGenerated,proto3" json:"isAutoGenerated" yaml:"isAutoGenerated"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbSshKeyInfo) Reset()         { *m = TbSshKeyInfo{} }
func (m *TbSshKeyInfo) String() string { return proto.CompactTextString(m) }
func (*TbSshKeyInfo) ProtoMessage()    {}
func (*TbSshKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{32}
}
func (m *TbSshKeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSshKeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSshKeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSshKeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSshKeyInfo.Merge(m, src)
}
func (m *TbSshKeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbSshKeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSshKeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbSshKeyInfo proto.InternalMessageInfo

func (m *TbSshKeyInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbSshKeyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSshKeyInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSshKeyInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSshKeyInfo) GetCspSshKeyName() string {
	if m != nil {
		return m.CspSshKeyName
	}
	return ""
}

func (m *TbSshKeyInfo) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *TbSshKeyInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TbSshKeyInfo) GetVerifiedUserName() string {
	if m != nil {
		return m.VerifiedUserName
	}
	return ""
}

func (m *TbSshKeyInfo) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *TbSshKeyInfo) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TbSshKeyInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

func (m *TbSshKeyInfo) GetAssociatedObjectList() []string {
	if m != nil {
		return m.AssociatedObjectList
	}
	return nil
}

func (m *TbSshKeyInfo) GetIsAutoGenerated() bool {
	if m != nil {
		return m.IsAutoGenerated
	}
	return false
}

type TbSshKeyCreateRequest struct {
	NsId                 string       `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbSshKeyReq `protobuf:"bytes,2,opt,name=item,json=sshKey,proto3" json:"sshKey" yaml:"sshKey"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TbSshKeyCreateRequest) Reset()         { *m = TbSshKeyCreateRequest{} }
func (m *TbSshKeyCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbSshKeyCreateRequest) ProtoMessage()    {}
func (*TbSshKeyCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{33}
}
func (m *TbSshKeyCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSshKeyCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSshKeyCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSshKeyCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSshKeyCreateRequest.Merge(m, src)
}
func (m *TbSshKeyCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbSshKeyCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSshKeyCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbSshKeyCreateRequest proto.InternalMessageInfo

func (m *TbSshKeyCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbSshKeyCreateRequest) GetItem() *TbSshKeyReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbSshKeyReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbSshKeyReq) Reset()         { *m = TbSshKeyReq{} }
func (m *TbSshKeyReq) String() string { return proto.CompactTextString(m) }
func (*TbSshKeyReq) ProtoMessage()    {}
func (*TbSshKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{34}
}
func (m *TbSshKeyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSshKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSshKeyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSshKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSshKeyReq.Merge(m, src)
}
func (m *TbSshKeyReq) XXX_Size() int {
	return m.Size()
}
func (m *TbSshKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSshKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbSshKeyReq proto.InternalMessageInfo

func (m *TbSshKeyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSshKeyReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSshKeyReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type TbSpecInfoRequest struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbSpecInfo `protobuf:"bytes,2,opt,name=item,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbSpecInfoRequest) Reset()         { *m = TbSpecInfoRequest{} }
func (m *TbSpecInfoRequest) String() string { return proto.CompactTextString(m) }
func (*TbSpecInfoRequest) ProtoMessage()    {}
func (*TbSpecInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{35}
}
func (m *TbSpecInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecInfoRequest.Merge(m, src)
}
func (m *TbSpecInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecInfoRequest proto.InternalMessageInfo

func (m *TbSpecInfoRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbSpecInfoRequest) GetItem() *TbSpecInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbSpecInfoResponse struct {
	Item                 *TbSpecInfo `protobuf:"bytes,1,opt,name=item,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbSpecInfoResponse) Reset()         { *m = TbSpecInfoResponse{} }
func (m *TbSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbSpecInfoResponse) ProtoMessage()    {}
func (*TbSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{36}
}
func (m *TbSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecInfoResponse.Merge(m, src)
}
func (m *TbSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecInfoResponse proto.InternalMessageInfo

func (m *TbSpecInfoResponse) GetItem() *TbSpecInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbSpecInfoResponse struct {
	Items                []*TbSpecInfo `protobuf:"bytes,1,rep,name=items,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListTbSpecInfoResponse) Reset()         { *m = ListTbSpecInfoResponse{} }
func (m *ListTbSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbSpecInfoResponse) ProtoMessage()    {}
func (*ListTbSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{37}
}
func (m *ListTbSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbSpecInfoResponse.Merge(m, src)
}
func (m *ListTbSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbSpecInfoResponse proto.InternalMessageInfo

func (m *ListTbSpecInfoResponse) GetItems() []*TbSpecInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbSpecInfo struct {
	Namespace             string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace" yaml:"namespace"`
	Id                    string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                  string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName        string   `protobuf:"bytes,4,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspSpecName           string   `protobuf:"bytes,5,opt,name=csp_spec_name,json=cspSpecName,proto3" json:"cspSpecName" yaml:"cspSpecName"`
	OsType                string   `protobuf:"bytes,6,opt,name=os_type,proto3" json:"os_type" yaml:"os_type"`
	NumVcpu               uint32   `protobuf:"varint,7,opt,name=num_vcpu,json=num_vCPU,proto3" json:"num_vCPU" yaml:"num_vCPU"`
	NumCore               uint32   `protobuf:"varint,8,opt,name=num_core,proto3" json:"num_core" yaml:"num_core"`
	MemGib                uint32   `protobuf:"varint,9,opt,name=mem_gib,json=mem_GiB,proto3" json:"mem_GiB" yaml:"mem_GiB"`
	StorageGib            uint32   `protobuf:"varint,10,opt,name=storage_gib,json=storage_GiB,proto3" json:"storage_GiB" yaml:"storage_GiB"`
	Description           string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description" yaml:"description"`
	CostPerHour           float32  `protobuf:"fixed32,12,opt,name=cost_per_hour,proto3" json:"cost_per_hour" yaml:"cost_per_hour"`
	NumStorage            uint32   `protobuf:"varint,13,opt,name=num_storage,proto3" json:"num_storage" yaml:"num_storage"`
	MaxNumStorage         uint32   `protobuf:"varint,14,opt,name=max_num_storage,proto3" json:"max_num_storage" yaml:"max_num_storage"`
	MaxTotalStorageTib    uint32   `protobuf:"varint,15,opt,name=max_total_storage_tib,json=max_total_storage_TiB,proto3" json:"max_total_storage_TiB" yaml:"max_total_storage_TiB"`
	NetBwGbps             uint32   `protobuf:"varint,16,opt,name=net_bw_gbps,json=net_bw_Gbps,proto3" json:"net_bw_Gbps" yaml:"net_bw_Gbps"`
	EbsBwMbps             uint32   `protobuf:"varint,17,opt,name=ebs_bw_mbps,json=ebs_bw_Mbps,proto3" json:"ebs_bw_Mbps" yaml:"ebs_bw_Mbps"`
	GpuModel              string   `protobuf:"bytes,18,opt,name=gpu_model,proto3" json:"gpu_model" yaml:"gpu_model"`
	NumGpu                uint32   `protobuf:"varint,19,opt,name=num_gpu,proto3" json:"num_gpu" yaml:"num_gpu"`
	GpumemGib             uint32   `protobuf:"varint,20,opt,name=gpumem_gib,json=gpumem_GiB,proto3" json:"gpumem_GiB" yaml:"gpumem_GiB"`
	GpuP2P                string   `protobuf:"bytes,21,opt,name=gpu_p2p,proto3" json:"gpu_p2p" yaml:"gpu_p2p"`
	OrderInFilteredResult uint32   `protobuf:"varint,22,opt,name=order_in_filtered_result,json=orderInFilteredResult,proto3" json:"orderInFilteredResult" yaml:"orderInFilteredResult"`
	EvaluationStatus      string   `protobuf:"bytes,23,opt,name=evaluation_status,json=evaluationStatus,proto3" json:"evaluationStatus" yaml:"evaluationStatus"`
	EvaluationScore_01    float32  `protobuf:"fixed32,31,opt,name=evaluation_score_01,json=evaluationScore_01,proto3" json:"evaluationScore_01" yaml:"evaluationScore_01"`
	EvaluationScore_02    float32  `protobuf:"fixed32,32,opt,name=evaluation_score_02,json=evaluationScore_02,proto3" json:"evaluationScore_02" yaml:"evaluationScore_02"`
	EvaluationScore_03    float32  `protobuf:"fixed32,33,opt,name=evaluation_score_03,json=evaluationScore_03,proto3" json:"evaluationScore_03" yaml:"evaluationScore_03"`
	EvaluationScore_04    float32  `protobuf:"fixed32,34,opt,name=evaluation_score_04,json=evaluationScore_04,proto3" json:"evaluationScore_04" yaml:"evaluationScore_04"`
	EvaluationScore_05    float32  `protobuf:"fixed32,35,opt,name=evaluation_score_05,json=evaluationScore_05,proto3" json:"evaluationScore_05" yaml:"evaluationScore_05"`
	EvaluationScore_06    float32  `protobuf:"fixed32,36,opt,name=evaluation_score_06,json=evaluationScore_06,proto3" json:"evaluationScore_06" yaml:"evaluationScore_06"`
	EvaluationScore_07    float32  `protobuf:"fixed32,37,opt,name=evaluation_score_07,json=evaluationScore_07,proto3" json:"evaluationScore_07" yaml:"evaluationScore_07"`
	EvaluationScore_08    float32  `protobuf:"fixed32,38,opt,name=evaluation_score_08,json=evaluationScore_08,proto3" json:"evaluationScore_08" yaml:"evaluationScore_08"`
	EvaluationScore_09    float32  `protobuf:"fixed32,39,opt,name=evaluation_score_09,json=evaluationScore_09,proto3" json:"evaluationScore_09" yaml:"evaluationScore_09"`
	EvaluationScore_10    float32  `protobuf:"fixed32,40,opt,name=evaluation_score_10,json=evaluationScore_10,proto3" json:"evaluationScore_10" yaml:"evaluationScore_10"`
	AssociatedObjectList  []string `protobuf:"bytes,41,rep,name=associated_object_list,json=associatedObjectList,proto3" json:"associatedObjectList" yaml:"associatedObjectList"`
	IsAutoGenerated       bool     `protobuf:"varint,42,opt,name=is_auto_generated,json=isAutoGenerated,proto3" json:"isAutoGenerated" yaml:"isAutoGenerated"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *TbSpecInfo) Reset()         { *m = TbSpecInfo{} }
func (m *TbSpecInfo) String() string { return proto.CompactTextString(m) }
func (*TbSpecInfo) ProtoMessage()    {}
func (*TbSpecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{38}
}
func (m *TbSpecInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecInfo.Merge(m, src)
}
func (m *TbSpecInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecInfo proto.InternalMessageInfo

func (m *TbSpecInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *TbSpecInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbSpecInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSpecInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSpecInfo) GetCspSpecName() string {
	if m != nil {
		return m.CspSpecName
	}
	return ""
}

func (m *TbSpecInfo) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *TbSpecInfo) GetNumVcpu() uint32 {
	if m != nil {
		return m.NumVcpu
	}
	return 0
}

func (m *TbSpecInfo) GetNumCore() uint32 {
	if m != nil {
		return m.NumCore
	}
	return 0
}

func (m *TbSpecInfo) GetMemGib() uint32 {
	if m != nil {
		return m.MemGib
	}
	return 0
}

func (m *TbSpecInfo) GetStorageGib() uint32 {
	if m != nil {
		return m.StorageGib
	}
	return 0
}

func (m *TbSpecInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSpecInfo) GetCostPerHour() float32 {
	if m != nil {
		return m.CostPerHour
	}
	return 0
}

func (m *TbSpecInfo) GetNumStorage() uint32 {
	if m != nil {
		return m.NumStorage
	}
	return 0
}

func (m *TbSpecInfo) GetMaxNumStorage() uint32 {
	if m != nil {
		return m.MaxNumStorage
	}
	return 0
}

func (m *TbSpecInfo) GetMaxTotalStorageTib() uint32 {
	if m != nil {
		return m.MaxTotalStorageTib
	}
	return 0
}

func (m *TbSpecInfo) GetNetBwGbps() uint32 {
	if m != nil {
		return m.NetBwGbps
	}
	return 0
}

func (m *TbSpecInfo) GetEbsBwMbps() uint32 {
	if m != nil {
		return m.EbsBwMbps
	}
	return 0
}

func (m *TbSpecInfo) GetGpuModel() string {
	if m != nil {
		return m.GpuModel
	}
	return ""
}

func (m *TbSpecInfo) GetNumGpu() uint32 {
	if m != nil {
		return m.NumGpu
	}
	return 0
}

func (m *TbSpecInfo) GetGpumemGib() uint32 {
	if m != nil {
		return m.GpumemGib
	}
	return 0
}

func (m *TbSpecInfo) GetGpuP2P() string {
	if m != nil {
		return m.GpuP2P
	}
	return ""
}

func (m *TbSpecInfo) GetOrderInFilteredResult() uint32 {
	if m != nil {
		return m.OrderInFilteredResult
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationStatus() string {
	if m != nil {
		return m.EvaluationStatus
	}
	return ""
}

func (m *TbSpecInfo) GetEvaluationScore_01() float32 {
	if m != nil {
		return m.EvaluationScore_01
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_02() float32 {
	if m != nil {
		return m.EvaluationScore_02
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_03() float32 {
	if m != nil {
		return m.EvaluationScore_03
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_04() float32 {
	if m != nil {
		return m.EvaluationScore_04
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_05() float32 {
	if m != nil {
		return m.EvaluationScore_05
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_06() float32 {
	if m != nil {
		return m.EvaluationScore_06
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_07() float32 {
	if m != nil {
		return m.EvaluationScore_07
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_08() float32 {
	if m != nil {
		return m.EvaluationScore_08
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_09() float32 {
	if m != nil {
		return m.EvaluationScore_09
	}
	return 0
}

func (m *TbSpecInfo) GetEvaluationScore_10() float32 {
	if m != nil {
		return m.EvaluationScore_10
	}
	return 0
}

func (m *TbSpecInfo) GetAssociatedObjectList() []string {
	if m != nil {
		return m.AssociatedObjectList
	}
	return nil
}

func (m *TbSpecInfo) GetIsAutoGenerated() bool {
	if m != nil {
		return m.IsAutoGenerated
	}
	return false
}

type TbSpecCreateRequest struct {
	NsId                 string     `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbSpecReq `protobuf:"bytes,2,opt,name=item,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TbSpecCreateRequest) Reset()         { *m = TbSpecCreateRequest{} }
func (m *TbSpecCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbSpecCreateRequest) ProtoMessage()    {}
func (*TbSpecCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{39}
}
func (m *TbSpecCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecCreateRequest.Merge(m, src)
}
func (m *TbSpecCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecCreateRequest proto.InternalMessageInfo

func (m *TbSpecCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbSpecCreateRequest) GetItem() *TbSpecReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbSpecReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspSpecName          string   `protobuf:"bytes,3,opt,name=csp_spec_name,json=cspSpecName,proto3" json:"cspSpecName" yaml:"cspSpecName"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbSpecReq) Reset()         { *m = TbSpecReq{} }
func (m *TbSpecReq) String() string { return proto.CompactTextString(m) }
func (*TbSpecReq) ProtoMessage()    {}
func (*TbSpecReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{40}
}
func (m *TbSpecReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecReq.Merge(m, src)
}
func (m *TbSpecReq) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecReq proto.InternalMessageInfo

func (m *TbSpecReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSpecReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSpecReq) GetCspSpecName() string {
	if m != nil {
		return m.CspSpecName
	}
	return ""
}

func (m *TbSpecReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type FetchSpecQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	NsId                 string   `protobuf:"bytes,2,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchSpecQryRequest) Reset()         { *m = FetchSpecQryRequest{} }
func (m *FetchSpecQryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchSpecQryRequest) ProtoMessage()    {}
func (*FetchSpecQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{41}
}
func (m *FetchSpecQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchSpecQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchSpecQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchSpecQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchSpecQryRequest.Merge(m, src)
}
func (m *FetchSpecQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchSpecQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchSpecQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchSpecQryRequest proto.InternalMessageInfo

func (m *FetchSpecQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *FetchSpecQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

type SpiderSpecInfoResponse struct {
	Item                 *SpiderSpecInfo `protobuf:"bytes,1,opt,name=item,json=vmspec,proto3" json:"vmspec" yaml:"vmspec"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SpiderSpecInfoResponse) Reset()         { *m = SpiderSpecInfoResponse{} }
func (m *SpiderSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SpiderSpecInfoResponse) ProtoMessage()    {}
func (*SpiderSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{42}
}
func (m *SpiderSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSpecInfoResponse.Merge(m, src)
}
func (m *SpiderSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSpecInfoResponse proto.InternalMessageInfo

func (m *SpiderSpecInfoResponse) GetItem() *SpiderSpecInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListSpiderSpecInfoResponse struct {
	Items                []*SpiderSpecInfo `protobuf:"bytes,1,rep,name=items,json=vmspec,proto3" json:"vmspec" yaml:"vmspec"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListSpiderSpecInfoResponse) Reset()         { *m = ListSpiderSpecInfoResponse{} }
func (m *ListSpiderSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListSpiderSpecInfoResponse) ProtoMessage()    {}
func (*ListSpiderSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{43}
}
func (m *ListSpiderSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSpiderSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSpiderSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSpiderSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpiderSpecInfoResponse.Merge(m, src)
}
func (m *ListSpiderSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSpiderSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpiderSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpiderSpecInfoResponse proto.InternalMessageInfo

func (m *ListSpiderSpecInfoResponse) GetItems() []*SpiderSpecInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type SpiderSpecInfo struct {
	Region               string           `protobuf:"bytes,1,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	Name                 string           `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	VCpu                 *SpiderVCpuInfo  `protobuf:"bytes,3,opt,name=v_cpu,json=VCpu,proto3" json:"VCpu" yaml:"VCpu"`
	Mem                  string           `protobuf:"bytes,4,opt,name=mem,json=Mem,proto3" json:"Mem" yaml:"Mem"`
	Gpu                  []*SpiderGpuInfo `protobuf:"bytes,5,rep,name=gpu,json=Gpu,proto3" json:"Gpu" yaml:"Gpu"`
	KeyValueList         []*KeyValue      `protobuf:"bytes,6,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SpiderSpecInfo) Reset()         { *m = SpiderSpecInfo{} }
func (m *SpiderSpecInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderSpecInfo) ProtoMessage()    {}
func (*SpiderSpecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{44}
}
func (m *SpiderSpecInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSpecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSpecInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSpecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSpecInfo.Merge(m, src)
}
func (m *SpiderSpecInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSpecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSpecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSpecInfo proto.InternalMessageInfo

func (m *SpiderSpecInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *SpiderSpecInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpiderSpecInfo) GetVCpu() *SpiderVCpuInfo {
	if m != nil {
		return m.VCpu
	}
	return nil
}

func (m *SpiderSpecInfo) GetMem() string {
	if m != nil {
		return m.Mem
	}
	return ""
}

func (m *SpiderSpecInfo) GetGpu() []*SpiderGpuInfo {
	if m != nil {
		return m.Gpu
	}
	return nil
}

func (m *SpiderSpecInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type SpiderVCpuInfo struct {
	Count                string   `protobuf:"bytes,1,opt,name=count,json=Count,proto3" json:"Count" yaml:"Count"`
	Clock                string   `protobuf:"bytes,2,opt,name=clock,json=Clock,proto3" json:"Clock" yaml:"Clock"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiderVCpuInfo) Reset()         { *m = SpiderVCpuInfo{} }
func (m *SpiderVCpuInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderVCpuInfo) ProtoMessage()    {}
func (*SpiderVCpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{45}
}
func (m *SpiderVCpuInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderVCpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderVCpuInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderVCpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderVCpuInfo.Merge(m, src)
}
func (m *SpiderVCpuInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderVCpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderVCpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderVCpuInfo proto.InternalMessageInfo

func (m *SpiderVCpuInfo) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *SpiderVCpuInfo) GetClock() string {
	if m != nil {
		return m.Clock
	}
	return ""
}

type SpiderGpuInfo struct {
	Count                string   `protobuf:"bytes,1,opt,name=count,json=Count,proto3" json:"Count" yaml:"Count"`
	Mfr                  string   `protobuf:"bytes,2,opt,name=mfr,json=Mfr,proto3" json:"Mfr" yaml:"Mfr"`
	Model                string   `protobuf:"bytes,3,opt,name=model,json=Model,proto3" json:"Model" yaml:"Model"`
	Mem                  string   `protobuf:"bytes,4,opt,name=mem,json=Mem,proto3" json:"Mem" yaml:"Mem"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiderGpuInfo) Reset()         { *m = SpiderGpuInfo{} }
func (m *SpiderGpuInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderGpuInfo) ProtoMessage()    {}
func (*SpiderGpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{46}
}
func (m *SpiderGpuInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderGpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderGpuInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderGpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderGpuInfo.Merge(m, src)
}
func (m *SpiderGpuInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderGpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderGpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderGpuInfo proto.InternalMessageInfo

func (m *SpiderGpuInfo) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *SpiderGpuInfo) GetMfr() string {
	if m != nil {
		return m.Mfr
	}
	return ""
}

func (m *SpiderGpuInfo) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *SpiderGpuInfo) GetMem() string {
	if m != nil {
		return m.Mem
	}
	return ""
}

type LookupSpecListQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupSpecListQryRequest) Reset()         { *m = LookupSpecListQryRequest{} }
func (m *LookupSpecListQryRequest) String() string { return proto.CompactTextString(m) }
func (*LookupSpecListQryRequest) ProtoMessage()    {}
func (*LookupSpecListQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{47}
}
func (m *LookupSpecListQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSpecListQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupSpecListQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupSpecListQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSpecListQryRequest.Merge(m, src)
}
func (m *LookupSpecListQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupSpecListQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSpecListQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSpecListQryRequest proto.InternalMessageInfo

func (m *LookupSpecListQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type LookupSpecQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspSpecName          string   `protobuf:"bytes,2,opt,name=csp_spec_name,json=cspSpecName,proto3" json:"cspSpecName" yaml:"cspSpecName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupSpecQryRequest) Reset()         { *m = LookupSpecQryRequest{} }
func (m *LookupSpecQryRequest) String() string { return proto.CompactTextString(m) }
func (*LookupSpecQryRequest) ProtoMessage()    {}
func (*LookupSpecQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{48}
}
func (m *LookupSpecQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSpecQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupSpecQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupSpecQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSpecQryRequest.Merge(m, src)
}
func (m *LookupSpecQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupSpecQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSpecQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSpecQryRequest proto.InternalMessageInfo

func (m *LookupSpecQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *LookupSpecQryRequest) GetCspSpecName() string {
	if m != nil {
		return m.CspSpecName
	}
	return ""
}

type FilterSpecsByRangeRequest struct {
	NsId                 string           `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Filter               *SpecRangeFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter" yaml:"filter"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FilterSpecsByRangeRequest) Reset()         { *m = FilterSpecsByRangeRequest{} }
func (m *FilterSpecsByRangeRequest) String() string { return proto.CompactTextString(m) }
func (*FilterSpecsByRangeRequest) ProtoMessage()    {}
func (*FilterSpecsByRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{49}
}
func (m *FilterSpecsByRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterSpecsByRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterSpecsByRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterSpecsByRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterSpecsByRangeRequest.Merge(m, src)
}
func (m *FilterSpecsByRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *FilterSpecsByRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterSpecsByRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FilterSpecsByRangeRequest proto.InternalMessageInfo

func (m *FilterSpecsByRangeRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *FilterSpecsByRangeRequest) GetFilter() *SpecRangeFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type SpecRangeFilter struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspSpecName          string   `protobuf:"bytes,4,opt,name=csp_spec_name,json=cspSpecName,proto3" json:"cspSpecName" yaml:"cspSpecName"`
	OsType               string   `protobuf:"bytes,5,opt,name=os_type,proto3" json:"os_type" yaml:"os_type"`
	NumVCPU              *Range   `protobuf:"bytes,6,opt,name=num_vCPU,proto3" json:"num_vCPU" yaml:"num_vCPU"`
	NumCore              *Range   `protobuf:"bytes,7,opt,name=num_core,proto3" json:"num_core" yaml:"num_core"`
	Mem_GiB              *Range   `protobuf:"bytes,8,opt,name=mem_GiB,proto3" json:"mem_GiB" yaml:"mem_GiB"`
	Storage_GiB          *Range   `protobuf:"bytes,9,opt,name=storage_GiB,proto3" json:"storage_GiB" yaml:"storage_GiB"`
	Description          string   `protobuf:"bytes,10,opt,name=description,proto3" json:"description" yaml:"description"`
	CostPerHour          *Range   `protobuf:"bytes,11,opt,name=cost_per_hour,proto3" json:"cost_per_hour" yaml:"cost_per_hour"`
	NumStorage           *Range   `protobuf:"bytes,12,opt,name=num_storage,proto3" json:"num_storage" yaml:"num_storage"`
	MaxNumStorage        *Range   `protobuf:"bytes,13,opt,name=max_num_storage,proto3" json:"max_num_storage" yaml:"max_num_storage"`
	MaxTotalStorage_TiB  *Range   `protobuf:"bytes,14,opt,name=max_total_storage_TiB,proto3" json:"max_total_storage_TiB" yaml:"max_total_storage_TiB"`
	NetBw_Gbps           *Range   `protobuf:"bytes,15,opt,name=net_bw_Gbps,proto3" json:"net_bw_Gbps" yaml:"net_bw_Gbps"`
	EbsBw_Mbps           *Range   `protobuf:"bytes,16,opt,name=ebs_bw_Mbps,proto3" json:"ebs_bw_Mbps" yaml:"ebs_bw_Mbps"`
	GpuModel             string   `protobuf:"bytes,17,opt,name=gpu_model,proto3" json:"gpu_model" yaml:"gpu_model"`
	NumGpu               *Range   `protobuf:"bytes,18,opt,name=num_gpu,proto3" json:"num_gpu" yaml:"num_gpu"`
	Gpumem_GiB           *Range   `protobuf:"bytes,19,opt,name=gpumem_GiB,proto3" json:"gpumem_GiB" yaml:"gpumem_GiB"`
	GpuP2P               string   `protobuf:"bytes,20,opt,name=gpu_p2p,proto3" json:"gpu_p2p" yaml:"gpu_p2p"`
	EvaluationStatus     string   `protobuf:"bytes,21,opt,name=evaluation_status,json=evaluationStatus,proto3" json:"evaluationStatus" yaml:"evaluationStatus"`
	EvaluationScore_01   *Range   `protobuf:"bytes,31,opt,name=evaluationScore_01,proto3" json:"evaluationScore_01" yaml:"evaluationScore_01"`
	EvaluationScore_02   *Range   `protobuf:"bytes,32,opt,name=evaluationScore_02,proto3" json:"evaluationScore_02" yaml:"evaluationScore_02"`
	EvaluationScore_03   *Range   `protobuf:"bytes,33,opt,name=evaluationScore_03,proto3" json:"evaluationScore_03" yaml:"evaluationScore_03"`
	EvaluationScore_04   *Range   `protobuf:"bytes,34,opt,name=evaluationScore_04,proto3" json:"evaluationScore_04" yaml:"evaluationScore_04"`
	EvaluationScore_05   *Range   `protobuf:"bytes,35,opt,name=evaluationScore_05,proto3" json:"evaluationScore_05" yaml:"evaluationScore_05"`
	EvaluationScore_06   *Range   `protobuf:"bytes,36,opt,name=evaluationScore_06,proto3" json:"evaluationScore_06" yaml:"evaluationScore_06"`
	EvaluationScore_07   *Range   `protobuf:"bytes,37,opt,name=evaluationScore_07,proto3" json:"evaluationScore_07" yaml:"evaluationScore_07"`
	EvaluationScore_08   *Range   `protobuf:"bytes,38,opt,name=evaluationScore_08,proto3" json:"evaluationScore_08" yaml:"evaluationScore_08"`
	EvaluationScore_09   *Range   `protobuf:"bytes,39,opt,name=evaluationScore_09,proto3" json:"evaluationScore_09" yaml:"evaluationScore_09"`
	EvaluationScore_10   *Range   `protobuf:"bytes,40,opt,name=evaluationScore_10,proto3" json:"evaluationScore_10" yaml:"evaluationScore_10"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecRangeFilter) Reset()         { *m = SpecRangeFilter{} }
func (m *SpecRangeFilter) String() string { return proto.CompactTextString(m) }
func (*SpecRangeFilter) ProtoMessage()    {}
func (*SpecRangeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{50}
}
func (m *SpecRangeFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecRangeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecRangeFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecRangeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecRangeFilter.Merge(m, src)
}
func (m *SpecRangeFilter) XXX_Size() int {
	return m.Size()
}
func (m *SpecRangeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecRangeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SpecRangeFilter proto.InternalMessageInfo

func (m *SpecRangeFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SpecRangeFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpecRangeFilter) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *SpecRangeFilter) GetCspSpecName() string {
	if m != nil {
		return m.CspSpecName
	}
	return ""
}

func (m *SpecRangeFilter) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *SpecRangeFilter) GetNumVCPU() *Range {
	if m != nil {
		return m.NumVCPU
	}
	return nil
}

func (m *SpecRangeFilter) GetNumCore() *Range {
	if m != nil {
		return m.NumCore
	}
	return nil
}

func (m *SpecRangeFilter) GetMem_GiB() *Range {
	if m != nil {
		return m.Mem_GiB
	}
	return nil
}

func (m *SpecRangeFilter) GetStorage_GiB() *Range {
	if m != nil {
		return m.Storage_GiB
	}
	return nil
}

func (m *SpecRangeFilter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SpecRangeFilter) GetCostPerHour() *Range {
	if m != nil {
		return m.CostPerHour
	}
	return nil
}

func (m *SpecRangeFilter) GetNumStorage() *Range {
	if m != nil {
		return m.NumStorage
	}
	return nil
}

func (m *SpecRangeFilter) GetMaxNumStorage() *Range {
	if m != nil {
		return m.MaxNumStorage
	}
	return nil
}

func (m *SpecRangeFilter) GetMaxTotalStorage_TiB() *Range {
	if m != nil {
		return m.MaxTotalStorage_TiB
	}
	return nil
}

func (m *SpecRangeFilter) GetNetBw_Gbps() *Range {
	if m != nil {
		return m.NetBw_Gbps
	}
	return nil
}

func (m *SpecRangeFilter) GetEbsBw_Mbps() *Range {
	if m != nil {
		return m.EbsBw_Mbps
	}
	return nil
}

func (m *SpecRangeFilter) GetGpuModel() string {
	if m != nil {
		return m.GpuModel
	}
	return ""
}

func (m *SpecRangeFilter) GetNumGpu() *Range {
	if m != nil {
		return m.NumGpu
	}
	return nil
}

func (m *SpecRangeFilter) GetGpumem_GiB() *Range {
	if m != nil {
		return m.Gpumem_GiB
	}
	return nil
}

func (m *SpecRangeFilter) GetGpuP2P() string {
	if m != nil {
		return m.GpuP2P
	}
	return ""
}

func (m *SpecRangeFilter) GetEvaluationStatus() string {
	if m != nil {
		return m.EvaluationStatus
	}
	return ""
}

func (m *SpecRangeFilter) GetEvaluationScore_01() *Range {
	if m != nil {
		return m.EvaluationScore_01
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_02() *Range {
	if m != nil {
		return m.EvaluationScore_02
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_03() *Range {
	if m != nil {
		return m.EvaluationScore_03
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_04() *Range {
	if m != nil {
		return m.EvaluationScore_04
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_05() *Range {
	if m != nil {
		return m.EvaluationScore_05
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_06() *Range {
	if m != nil {
		return m.EvaluationScore_06
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_07() *Range {
	if m != nil {
		return m.EvaluationScore_07
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_08() *Range {
	if m != nil {
		return m.EvaluationScore_08
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_09() *Range {
	if m != nil {
		return m.EvaluationScore_09
	}
	return nil
}

func (m *SpecRangeFilter) GetEvaluationScore_10() *Range {
	if m != nil {
		return m.EvaluationScore_10
	}
	return nil
}

type Range struct {
	Min                  float32  `protobuf:"fixed32,1,opt,name=min,proto3" json:"min" yaml:"min"`
	Max                  float32  `protobuf:"fixed32,2,opt,name=max,proto3" json:"max" yaml:"max"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{51}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return m.Size()
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetMin() float32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Range) GetMax() float32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type SortSpecsRequest struct {
	Items                []*TbSpecInfo `protobuf:"bytes,1,rep,name=items,json=spec,proto3" json:"spec" yaml:"spec"`
	OrderBy              string        `protobuf:"bytes,2,opt,name=order_by,json=orderBy,proto3" json:"orderBy" yaml:"orderBy"`
	Direction            string        `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction" yaml:"direction"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SortSpecsRequest) Reset()         { *m = SortSpecsRequest{} }
func (m *SortSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*SortSpecsRequest) ProtoMessage()    {}
func (*SortSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{52}
}
func (m *SortSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortSpecsRequest.Merge(m, src)
}
func (m *SortSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SortSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SortSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SortSpecsRequest proto.InternalMessageInfo

func (m *SortSpecsRequest) GetItems() []*TbSpecInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SortSpecsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *SortSpecsRequest) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

type TbSecurityGroupInfoResponse struct {
	Item                 *TbSecurityGroupInfo `protobuf:"bytes,1,opt,name=item,json=securityGroup,proto3" json:"securityGroup" yaml:"securityGroup"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TbSecurityGroupInfoResponse) Reset()         { *m = TbSecurityGroupInfoResponse{} }
func (m *TbSecurityGroupInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbSecurityGroupInfoResponse) ProtoMessage()    {}
func (*TbSecurityGroupInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{53}
}
func (m *TbSecurityGroupInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSecurityGroupInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSecurityGroupInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSecurityGroupInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSecurityGroupInfoResponse.Merge(m, src)
}
func (m *TbSecurityGroupInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbSecurityGroupInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSecurityGroupInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbSecurityGroupInfoResponse proto.InternalMessageInfo

func (m *TbSecurityGroupInfoResponse) GetItem() *TbSecurityGroupInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbSecurityGroupInfoResponse struct {
	Items                []*TbSecurityGroupInfo `protobuf:"bytes,1,rep,name=items,json=securityGroup,proto3" json:"securityGroup" yaml:"securityGroup"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListTbSecurityGroupInfoResponse) Reset()         { *m = ListTbSecurityGroupInfoResponse{} }
func (m *ListTbSecurityGroupInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbSecurityGroupInfoResponse) ProtoMessage()    {}
func (*ListTbSecurityGroupInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{54}
}
func (m *ListTbSecurityGroupInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbSecurityGroupInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbSecurityGroupInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbSecurityGroupInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbSecurityGroupInfoResponse.Merge(m, src)
}
func (m *ListTbSecurityGroupInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbSecurityGroupInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbSecurityGroupInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbSecurityGroupInfoResponse proto.InternalMessageInfo

func (m *ListTbSecurityGroupInfoResponse) GetItems() []*TbSecurityGroupInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbSecurityGroupInfo struct {
	Id                   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string                    `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	VnetId               string                    `protobuf:"bytes,4,opt,name=vnet_id,json=vNetId,proto3" json:"vNetId" yaml:"vNetId"`
	Description          string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	FirewallRules        []*SpiderSecurityRuleInfo `protobuf:"bytes,6,rep,name=firewall_rules,json=firewallRules,proto3" json:"firewallRules" yaml:"firewallRules"`
	CspSecurityGroupId   string                    `protobuf:"bytes,7,opt,name=csp_security_group_id,json=cspSecurityGroupId,proto3" json:"cspSecurityGroupId" yaml:"cspSecurityGroupId"`
	CspSecurityGroupName string                    `protobuf:"bytes,8,opt,name=csp_security_group_name,json=cspSecurityGroupName,proto3" json:"cspSecurityGroupName" yaml:"cspSecurityGroupName"`
	KeyValueList         []*KeyValue               `protobuf:"bytes,9,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList" yaml:"keyValueList"`
	AssociatedObjectList []string                  `protobuf:"bytes,10,rep,name=associated_object_list,json=associatedObjectList,proto3" json:"associatedObjectList" yaml:"associatedObjectList"`
	IsAutoGenerated      bool                      `protobuf:"varint,11,opt,name=is_auto_generated,json=isAutoGenerated,proto3" json:"isAutoGenerated" yaml:"isAutoGenerated"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TbSecurityGroupInfo) Reset()         { *m = TbSecurityGroupInfo{} }
func (m *TbSecurityGroupInfo) String() string { return proto.CompactTextString(m) }
func (*TbSecurityGroupInfo) ProtoMessage()    {}
func (*TbSecurityGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{55}
}
func (m *TbSecurityGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSecurityGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSecurityGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSecurityGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSecurityGroupInfo.Merge(m, src)
}
func (m *TbSecurityGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbSecurityGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSecurityGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbSecurityGroupInfo proto.InternalMessageInfo

func (m *TbSecurityGroupInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetVnetId() string {
	if m != nil {
		return m.VnetId
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetFirewallRules() []*SpiderSecurityRuleInfo {
	if m != nil {
		return m.FirewallRules
	}
	return nil
}

func (m *TbSecurityGroupInfo) GetCspSecurityGroupId() string {
	if m != nil {
		return m.CspSecurityGroupId
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetCspSecurityGroupName() string {
	if m != nil {
		return m.CspSecurityGroupName
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

func (m *TbSecurityGroupInfo) GetAssociatedObjectList() []string {
	if m != nil {
		return m.AssociatedObjectList
	}
	return nil
}

func (m *TbSecurityGroupInfo) GetIsAutoGenerated() bool {
	if m != nil {
		return m.IsAutoGenerated
	}
	return false
}

type SpiderSecurityRuleInfo struct {
	FromPort             string   `protobuf:"bytes,1,opt,name=from_port,json=FromPort,proto3" json:"FromPort" yaml:"FromPort"`
	ToPort               string   `protobuf:"bytes,2,opt,name=to_port,json=ToPort,proto3" json:"ToPort" yaml:"ToPort"`
	IpProtocol           string   `protobuf:"bytes,3,opt,name=ip_protocol,json=IPProtocol,proto3" json:"IPProtocol" yaml:"IPProtocol"`
	Direction            string   `protobuf:"bytes,4,opt,name=direction,json=Direction,proto3" json:"Direction" yaml:"Direction"`
	Cidr                 string   `protobuf:"bytes,5,opt,name=cidr,json=CIDR,proto3" json:"CIDR" yaml:"CIDR"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiderSecurityRuleInfo) Reset()         { *m = SpiderSecurityRuleInfo{} }
func (m *SpiderSecurityRuleInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderSecurityRuleInfo) ProtoMessage()    {}
func (*SpiderSecurityRuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{56}
}
func (m *SpiderSecurityRuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSecurityRuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSecurityRuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSecurityRuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSecurityRuleInfo.Merge(m, src)
}
func (m *SpiderSecurityRuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSecurityRuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSecurityRuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSecurityRuleInfo proto.InternalMessageInfo

func (m *SpiderSecurityRuleInfo) GetFromPort() string {
	if m != nil {
		return m.FromPort
	}
	return ""
}

func (m *SpiderSecurityRuleInfo) GetToPort() string {
	if m != nil {
		return m.ToPort
	}
	return ""
}

func (m *SpiderSecurityRuleInfo) GetIpProtocol() string {
	if m != nil {
		return m.IpProtocol
	}
	return ""
}

func (m *SpiderSecurityRuleInfo) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *SpiderSecurityRuleInfo) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

type TbSecurityGroupCreateRequest struct {
	NsId                 string              `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbSecurityGroupReq `protobuf:"bytes,2,opt,name=item,json=securityGroup,proto3" json:"securityGroup" yaml:"securityGroup"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TbSecurityGroupCreateRequest) Reset()         { *m = TbSecurityGroupCreateRequest{} }
func (m *TbSecurityGroupCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbSecurityGroupCreateRequest) ProtoMessage()    {}
func (*TbSecurityGroupCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{57}
}
func (m *TbSecurityGroupCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSecurityGroupCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSecurityGroupCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSecurityGroupCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSecurityGroupCreateRequest.Merge(m, src)
}
func (m *TbSecurityGroupCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbSecurityGroupCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSecurityGroupCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbSecurityGroupCreateRequest proto.InternalMessageInfo

func (m *TbSecurityGroupCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbSecurityGroupCreateRequest) GetItem() *TbSecurityGroupReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbSecurityGroupReq struct {
	Name                 string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string                    `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	VnetId               string                    `protobuf:"bytes,3,opt,name=vnet_id,json=vNetId,proto3" json:"vNetId" yaml:"vNetId"`
	Description          string                    `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	FirewallRules        []*SpiderSecurityRuleInfo `protobuf:"bytes,5,rep,name=firewall_rules,json=firewallRules,proto3" json:"firewallRules" yaml:"firewallRules"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TbSecurityGroupReq) Reset()         { *m = TbSecurityGroupReq{} }
func (m *TbSecurityGroupReq) String() string { return proto.CompactTextString(m) }
func (*TbSecurityGroupReq) ProtoMessage()    {}
func (*TbSecurityGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{58}
}
func (m *TbSecurityGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSecurityGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSecurityGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSecurityGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSecurityGroupReq.Merge(m, src)
}
func (m *TbSecurityGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *TbSecurityGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSecurityGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbSecurityGroupReq proto.InternalMessageInfo

func (m *TbSecurityGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSecurityGroupReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSecurityGroupReq) GetVnetId() string {
	if m != nil {
		return m.VnetId
	}
	return ""
}

func (m *TbSecurityGroupReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSecurityGroupReq) GetFirewallRules() []*SpiderSecurityRuleInfo {
	if m != nil {
		return m.FirewallRules
	}
	return nil
}

type TbVNetInfoResponse struct {
	Item                 *TbVNetInfo `protobuf:"bytes,1,opt,name=item,json=vNet,proto3" json:"vNet" yaml:"vNet"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbVNetInfoResponse) Reset()         { *m = TbVNetInfoResponse{} }
func (m *TbVNetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbVNetInfoResponse) ProtoMessage()    {}
func (*TbVNetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{59}
}
func (m *TbVNetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVNetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVNetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVNetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVNetInfoResponse.Merge(m, src)
}
func (m *TbVNetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbVNetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVNetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbVNetInfoResponse proto.InternalMessageInfo

func (m *TbVNetInfoResponse) GetItem() *TbVNetInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbVNetInfoResponse struct {
	Items                []*TbVNetInfo `protobuf:"bytes,1,rep,name=items,json=vNet,proto3" json:"vNet" yaml:"vNet"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListTbVNetInfoResponse) Reset()         { *m = ListTbVNetInfoResponse{} }
func (m *ListTbVNetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbVNetInfoResponse) ProtoMessage()    {}
func (*ListTbVNetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{60}
}
func (m *ListTbVNetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbVNetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbVNetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbVNetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbVNetInfoResponse.Merge(m, src)
}
func (m *ListTbVNetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbVNetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbVNetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbVNetInfoResponse proto.InternalMessageInfo

func (m *ListTbVNetInfoResponse) GetItems() []*TbVNetInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbVNetInfo struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string              `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CidrBlock            string              `protobuf:"bytes,4,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidrBlock" yaml:"cidrBlock"`
	SubnetInfoList       []*SpiderSubnetInfo `protobuf:"bytes,5,rep,name=subnet_info_list,json=subnetInfoList,proto3" json:"subnetInfoList" yaml:"subnetInfoList"`
	Description          string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description" yaml:"description"`
	CspVnetId            string              `protobuf:"bytes,7,opt,name=csp_vnet_id,json=cspVNetId,proto3" json:"cspVNetId" yaml:"cspVNetId"`
	CspVnetName          string              `protobuf:"bytes,8,opt,name=csp_vnet_name,json=cspVNetName,proto3" json:"cspVNetName" yaml:"cspVNetName"`
	Status               string              `protobuf:"bytes,9,opt,name=status,proto3" json:"status" yaml:"status"`
	KeyValueList         []*KeyValue         `protobuf:"bytes,10,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList" yaml:"keyValueList"`
	AssociatedObjectList []string            `protobuf:"bytes,11,rep,name=associated_object_list,json=associatedObjectList,proto3" json:"associatedObjectList" yaml:"associatedObjectList"`
	IsAutoGenerated      bool                `protobuf:"varint,12,opt,name=is_auto_generated,json=isAutoGenerated,proto3" json:"isAutoGenerated" yaml:"isAutoGenerated"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TbVNetInfo) Reset()         { *m = TbVNetInfo{} }
func (m *TbVNetInfo) String() string { return proto.CompactTextString(m) }
func (*TbVNetInfo) ProtoMessage()    {}
func (*TbVNetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{61}
}
func (m *TbVNetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVNetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVNetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVNetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVNetInfo.Merge(m, src)
}
func (m *TbVNetInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbVNetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVNetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbVNetInfo proto.InternalMessageInfo

func (m *TbVNetInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbVNetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVNetInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbVNetInfo) GetCidrBlock() string {
	if m != nil {
		return m.CidrBlock
	}
	return ""
}

func (m *TbVNetInfo) GetSubnetInfoList() []*SpiderSubnetInfo {
	if m != nil {
		return m.SubnetInfoList
	}
	return nil
}

func (m *TbVNetInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbVNetInfo) GetCspVnetId() string {
	if m != nil {
		return m.CspVnetId
	}
	return ""
}

func (m *TbVNetInfo) GetCspVnetName() string {
	if m != nil {
		return m.CspVnetName
	}
	return ""
}

func (m *TbVNetInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbVNetInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

func (m *TbVNetInfo) GetAssociatedObjectList() []string {
	if m != nil {
		return m.AssociatedObjectList
	}
	return nil
}

func (m *TbVNetInfo) GetIsAutoGenerated() bool {
	if m != nil {
		return m.IsAutoGenerated
	}
	return false
}

type SpiderSubnetInfo struct {
	Iid                  *IID        `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	Ipv4Cidr             string      `protobuf:"bytes,2,opt,name=ipv4_cidr,json=IPv4_CIDR,proto3" json:"IPv4_CIDR" yaml:"IPv4_CIDR"`
	KeyValueList         []*KeyValue `protobuf:"bytes,3,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SpiderSubnetInfo) Reset()         { *m = SpiderSubnetInfo{} }
func (m *SpiderSubnetInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderSubnetInfo) ProtoMessage()    {}
func (*SpiderSubnetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{62}
}
func (m *SpiderSubnetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSubnetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSubnetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSubnetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSubnetInfo.Merge(m, src)
}
func (m *SpiderSubnetInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSubnetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSubnetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSubnetInfo proto.InternalMessageInfo

func (m *SpiderSubnetInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *SpiderSubnetInfo) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *SpiderSubnetInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type TbVNetCreateRequest struct {
	NsId                 string     `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbVNetReq `protobuf:"bytes,2,opt,name=item,json=vNet,proto3" json:"vNet" yaml:"vNet"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TbVNetCreateRequest) Reset()         { *m = TbVNetCreateRequest{} }
func (m *TbVNetCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbVNetCreateRequest) ProtoMessage()    {}
func (*TbVNetCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{63}
}
func (m *TbVNetCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVNetCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVNetCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVNetCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVNetCreateRequest.Merge(m, src)
}
func (m *TbVNetCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVNetCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVNetCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVNetCreateRequest proto.InternalMessageInfo

func (m *TbVNetCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVNetCreateRequest) GetItem() *TbVNetReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVNetReq struct {
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string                 `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CidrBlock            string                 `protobuf:"bytes,3,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidrBlock" yaml:"cidrBlock"`
	SubnetInfoList       []*SpiderSubnetReqInfo `protobuf:"bytes,4,rep,name=subnet_info_list,json=subnetInfoList,proto3" json:"subnetInfoList" yaml:"subnetInfoList"`
	Description          string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TbVNetReq) Reset()         { *m = TbVNetReq{} }
func (m *TbVNetReq) String() string { return proto.CompactTextString(m) }
func (*TbVNetReq) ProtoMessage()    {}
func (*TbVNetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{64}
}
func (m *TbVNetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVNetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVNetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVNetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVNetReq.Merge(m, src)
}
func (m *TbVNetReq) XXX_Size() int {
	return m.Size()
}
func (m *TbVNetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVNetReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbVNetReq proto.InternalMessageInfo

func (m *TbVNetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVNetReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbVNetReq) GetCidrBlock() string {
	if m != nil {
		return m.CidrBlock
	}
	return ""
}

func (m *TbVNetReq) GetSubnetInfoList() []*SpiderSubnetReqInfo {
	if m != nil {
		return m.SubnetInfoList
	}
	return nil
}

func (m *TbVNetReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type SpiderSubnetReqInfo struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Ipv4Cidr             string      `protobuf:"bytes,2,opt,name=ipv4_cidr,json=IPv4_CIDR,proto3" json:"IPv4_CIDR" yaml:"IPv4_CIDR"`
	KeyValueList         []*KeyValue `protobuf:"bytes,3,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SpiderSubnetReqInfo) Reset()         { *m = SpiderSubnetReqInfo{} }
func (m *SpiderSubnetReqInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderSubnetReqInfo) ProtoMessage()    {}
func (*SpiderSubnetReqInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{65}
}
func (m *SpiderSubnetReqInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSubnetReqInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSubnetReqInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSubnetReqInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSubnetReqInfo.Merge(m, src)
}
func (m *SpiderSubnetReqInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSubnetReqInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSubnetReqInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSubnetReqInfo proto.InternalMessageInfo

func (m *SpiderSubnetReqInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpiderSubnetReqInfo) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *SpiderSubnetReqInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type TbMcisInfoResponse struct {
	Item                 *TbMcisInfo `protobuf:"bytes,1,opt,name=item,json=mcis,proto3" json:"mcis" yaml:"mcis"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbMcisInfoResponse) Reset()         { *m = TbMcisInfoResponse{} }
func (m *TbMcisInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbMcisInfoResponse) ProtoMessage()    {}
func (*TbMcisInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{66}
}
func (m *TbMcisInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisInfoResponse.Merge(m, src)
}
func (m *TbMcisInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisInfoResponse proto.InternalMessageInfo

func (m *TbMcisInfoResponse) GetItem() *TbMcisInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbMcisInfoResponse struct {
	Items                []*TbMcisInfo `protobuf:"bytes,1,rep,name=items,json=mcis,proto3" json:"mcis" yaml:"mcis"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListTbMcisInfoResponse) Reset()         { *m = ListTbMcisInfoResponse{} }
func (m *ListTbMcisInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbMcisInfoResponse) ProtoMessage()    {}
func (*ListTbMcisInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{67}
}
func (m *ListTbMcisInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbMcisInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbMcisInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbMcisInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbMcisInfoResponse.Merge(m, src)
}
func (m *ListTbMcisInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbMcisInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbMcisInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbMcisInfoResponse proto.InternalMessageInfo

func (m *ListTbMcisInfoResponse) GetItems() []*TbMcisInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbMcisInfo struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	Status               string      `protobuf:"bytes,7,opt,name=status,proto3" json:"status" yaml:"status"`
	TargetStatus         string      `protobuf:"bytes,8,opt,name=target_status,json=targetStatus,proto3" json:"targetStatus" yaml:"targetStatus"`
	TargetAction         string      `protobuf:"bytes,9,opt,name=target_action,json=targetAction,proto3" json:"targetAction" yaml:"targetAction"`
	InstallMonAgent      string      `protobuf:"bytes,10,opt,name=install_mon_agent,json=installMonAgent,proto3" json:"installMonAgent" yaml:"installMonAgent"`
	Label                string      `protobuf:"bytes,6,opt,name=label,proto3" json:"label" yaml:"label"`
	PlacementAlgo        string      `protobuf:"bytes,4,opt,name=placement_algo,json=placementAlgo,proto3" json:"placementAlgo" yaml:"placementAlgo"`
	Description          string      `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	Vm                   []*TbVmInfo `protobuf:"bytes,3,rep,name=vm,proto3" json:"vm" yaml:"vm"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbMcisInfo) Reset()         { *m = TbMcisInfo{} }
func (m *TbMcisInfo) String() string { return proto.CompactTextString(m) }
func (*TbMcisInfo) ProtoMessage()    {}
func (*TbMcisInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{68}
}
func (m *TbMcisInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisInfo.Merge(m, src)
}
func (m *TbMcisInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisInfo proto.InternalMessageInfo

func (m *TbMcisInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbMcisInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbMcisInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbMcisInfo) GetTargetStatus() string {
	if m != nil {
		return m.TargetStatus
	}
	return ""
}

func (m *TbMcisInfo) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

func (m *TbMcisInfo) GetInstallMonAgent() string {
	if m != nil {
		return m.InstallMonAgent
	}
	return ""
}

func (m *TbMcisInfo) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TbMcisInfo) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *TbMcisInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbMcisInfo) GetVm() []*TbVmInfo {
	if m != nil {
		return m.Vm
	}
	return nil
}

type TbVmInfo struct {
	Id                   string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	VmGroupId            string        `protobuf:"bytes,3,opt,name=vm_group_id,json=vmGroupId,proto3" json:"vmGroupId" yaml:"vmGroupId"`
	Location             *GeoLocation  `protobuf:"bytes,4,opt,name=location,proto3" json:"location" yaml:"location"`
	Status               string        `protobuf:"bytes,5,opt,name=status,proto3" json:"status" yaml:"status"`
	TargetStatus         string        `protobuf:"bytes,6,opt,name=target_status,json=targetStatus,proto3" json:"targetStatus" yaml:"targetStatus"`
	TargetAction         string        `protobuf:"bytes,7,opt,name=target_action,json=targetAction,proto3" json:"targetAction" yaml:"targetAction"`
	MonAgentStatus       string        `protobuf:"bytes,8,opt,name=mon_agent_status,json=monAgentStatus,proto3" json:"monAgentStatus" yaml:"monAgentStatus"`
	SystemMessage        string        `protobuf:"bytes,9,opt,name=system_message,json=systemMessage,proto3" json:"systemMessage" yaml:"systemMessage"`
	CreatedTime          string        `protobuf:"bytes,10,opt,name=created_time,json=createdTime,proto3" json:"createdTime" yaml:"createdTime"`
	Label                string        `protobuf:"bytes,11,opt,name=label,proto3" json:"label" yaml:"label"`
	Description          string        `protobuf:"bytes,12,opt,name=description,proto3" json:"description" yaml:"description"`
	Region               *RegionInfo   `protobuf:"bytes,13,opt,name=region,proto3" json:"region" yaml:"region"`
	PublicIp             string        `protobuf:"bytes,14,opt,name=public_ip,json=publicIP,proto3" json:"publicIP" yaml:"publicIP"`
	SshPort              string        `protobuf:"bytes,15,opt,name=ssh_port,json=sshPort,proto3" json:"sshPort" yaml:"sshPort"`
	PublicDns            string        `protobuf:"bytes,16,opt,name=public_dns,json=publicDNS,proto3" json:"publicDNS" yaml:"publicDNS"`
	PrivateIp            string        `protobuf:"bytes,17,opt,name=private_ip,json=privateIP,proto3" json:"privateIP" yaml:"privateIP"`
	PrivateDns           string        `protobuf:"bytes,18,opt,name=private_dns,json=privateDNS,proto3" json:"privateDNS" yaml:"privateDNS"`
	VmBootDisk           string        `protobuf:"bytes,19,opt,name=vm_boot_disk,json=vmBootDisk,proto3" json:"vmBootDisk" yaml:"vmBootDisk"`
	VmBlockDisk          string        `protobuf:"bytes,20,opt,name=vm_block_disk,json=vmBlockDisk,proto3" json:"vmBlockDisk" yaml:"vmBlockDisk"`
	ConnectionName       string        `protobuf:"bytes,21,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	SpecId               string        `protobuf:"bytes,22,opt,name=spec_id,json=specId,proto3" json:"specId" yaml:"specId"`
	ImageId              string        `protobuf:"bytes,23,opt,name=image_id,json=imageId,proto3" json:"imageId" yaml:"imageId"`
	VnetId               string        `protobuf:"bytes,24,opt,name=vnet_id,json=vNetId,proto3" json:"vNetId" yaml:"vNetId"`
	SubnetId             string        `protobuf:"bytes,25,opt,name=subnet_id,json=subnetId,proto3" json:"subnetId" yaml:"subnetId"`
	SecurityGroupIds     []string      `protobuf:"bytes,26,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"securityGroupIds" yaml:"securityGroupIds"`
	SshKeyId             string        `protobuf:"bytes,27,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"sshKeyId" yaml:"sshKeyId"`
	VmUserAccount        string        `protobuf:"bytes,28,opt,name=vm_user_account,json=vmUserAccount,proto3" json:"vmUserAccount" yaml:"vmUserAccount"`
	VmUserPassword       string        `protobuf:"bytes,29,opt,name=vm_user_password,json=vmUserPassword,proto3" json:"vmUserPassword" yaml:"vmUserPassword"`
	CspViewVmDetail      *SpiderVMInfo `protobuf:"bytes,30,opt,name=csp_view_vm_detail,json=cspViewVmDetail,proto3" json:"cspViewVmDetail" yaml:"cspViewVmDetail"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TbVmInfo) Reset()         { *m = TbVmInfo{} }
func (m *TbVmInfo) String() string { return proto.CompactTextString(m) }
func (*TbVmInfo) ProtoMessage()    {}
func (*TbVmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{69}
}
func (m *TbVmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmInfo.Merge(m, src)
}
func (m *TbVmInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbVmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmInfo proto.InternalMessageInfo

func (m *TbVmInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbVmInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVmInfo) GetVmGroupId() string {
	if m != nil {
		return m.VmGroupId
	}
	return ""
}

func (m *TbVmInfo) GetLocation() *GeoLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TbVmInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbVmInfo) GetTargetStatus() string {
	if m != nil {
		return m.TargetStatus
	}
	return ""
}

func (m *TbVmInfo) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

func (m *TbVmInfo) GetMonAgentStatus() string {
	if m != nil {
		return m.MonAgentStatus
	}
	return ""
}

func (m *TbVmInfo) GetSystemMessage() string {
	if m != nil {
		return m.SystemMessage
	}
	return ""
}

func (m *TbVmInfo) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *TbVmInfo) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TbVmInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbVmInfo) GetRegion() *RegionInfo {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *TbVmInfo) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *TbVmInfo) GetSshPort() string {
	if m != nil {
		return m.SshPort
	}
	return ""
}

func (m *TbVmInfo) GetPublicDns() string {
	if m != nil {
		return m.PublicDns
	}
	return ""
}

func (m *TbVmInfo) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

func (m *TbVmInfo) GetPrivateDns() string {
	if m != nil {
		return m.PrivateDns
	}
	return ""
}

func (m *TbVmInfo) GetVmBootDisk() string {
	if m != nil {
		return m.VmBootDisk
	}
	return ""
}

func (m *TbVmInfo) GetVmBlockDisk() string {
	if m != nil {
		return m.VmBlockDisk
	}
	return ""
}

func (m *TbVmInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbVmInfo) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

func (m *TbVmInfo) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *TbVmInfo) GetVnetId() string {
	if m != nil {
		return m.VnetId
	}
	return ""
}

func (m *TbVmInfo) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *TbVmInfo) GetSecurityGroupIds() []string {
	if m != nil {
		return m.SecurityGroupIds
	}
	return nil
}

func (m *TbVmInfo) GetSshKeyId() string {
	if m != nil {
		return m.SshKeyId
	}
	return ""
}

func (m *TbVmInfo) GetVmUserAccount() string {
	if m != nil {
		return m.VmUserAccount
	}
	return ""
}

func (m *TbVmInfo) GetVmUserPassword() string {
	if m != nil {
		return m.VmUserPassword
	}
	return ""
}

func (m *TbVmInfo) GetCspViewVmDetail() *SpiderVMInfo {
	if m != nil {
		return m.CspViewVmDetail
	}
	return nil
}

type GeoLocation struct {
	Latitude             string   `protobuf:"bytes,1,opt,name=latitude,proto3" json:"latitude" yaml:"latitude"`
	Longitude            string   `protobuf:"bytes,2,opt,name=longitude,proto3" json:"longitude" yaml:"longitude"`
	BriefAddr            string   `protobuf:"bytes,3,opt,name=brief_addr,json=briefAddr,proto3" json:"briefAddr" yaml:"briefAddr"`
	CloudType            string   `protobuf:"bytes,4,opt,name=cloud_type,json=cloudType,proto3" json:"cloudType" yaml:"cloudType"`
	NativeRegion         string   `protobuf:"bytes,5,opt,name=native_region,json=nativeRegion,proto3" json:"nativeRegion" yaml:"nativeRegion"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoLocation) Reset()         { *m = GeoLocation{} }
func (m *GeoLocation) String() string { return proto.CompactTextString(m) }
func (*GeoLocation) ProtoMessage()    {}
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{70}
}
func (m *GeoLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoLocation.Merge(m, src)
}
func (m *GeoLocation) XXX_Size() int {
	return m.Size()
}
func (m *GeoLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoLocation.DiscardUnknown(m)
}

var xxx_messageInfo_GeoLocation proto.InternalMessageInfo

func (m *GeoLocation) GetLatitude() string {
	if m != nil {
		return m.Latitude
	}
	return ""
}

func (m *GeoLocation) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *GeoLocation) GetBriefAddr() string {
	if m != nil {
		return m.BriefAddr
	}
	return ""
}

func (m *GeoLocation) GetCloudType() string {
	if m != nil {
		return m.CloudType
	}
	return ""
}

func (m *GeoLocation) GetNativeRegion() string {
	if m != nil {
		return m.NativeRegion
	}
	return ""
}

type RegionInfo struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	Zone                 string   `protobuf:"bytes,2,opt,name=zone,json=Zone,proto3" json:"Zone" yaml:"Zone"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionInfo) Reset()         { *m = RegionInfo{} }
func (m *RegionInfo) String() string { return proto.CompactTextString(m) }
func (*RegionInfo) ProtoMessage()    {}
func (*RegionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{71}
}
func (m *RegionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionInfo.Merge(m, src)
}
func (m *RegionInfo) XXX_Size() int {
	return m.Size()
}
func (m *RegionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RegionInfo proto.InternalMessageInfo

func (m *RegionInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RegionInfo) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type SpiderVMInfo struct {
	// Fields for request
	Name               string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	ImageName          string   `protobuf:"bytes,2,opt,name=image_name,json=ImageName,proto3" json:"ImageName" yaml:"ImageName"`
	VpcName            string   `protobuf:"bytes,3,opt,name=vpc_name,json=VPCName,proto3" json:"VPCName" yaml:"VPCName"`
	SubnetName         string   `protobuf:"bytes,4,opt,name=subnet_name,json=SubnetName,proto3" json:"SubnetName" yaml:"SubnetName"`
	SecurityGroupNames []string `protobuf:"bytes,5,rep,name=security_group_names,json=SecurityGroupNames,proto3" json:"SecurityGroupNames" yaml:"SecurityGroupNames"`
	KeyPairName        string   `protobuf:"bytes,6,opt,name=key_pair_name,json=KeyPairName,proto3" json:"KeyPairName" yaml:"KeyPairName"`
	// Fields for both request and response
	VmSpecName   string `protobuf:"bytes,7,opt,name=vm_spec_name,json=VMSpecName,proto3" json:"VMSpecName" yaml:"VMSpecName"`
	VmUserId     string `protobuf:"bytes,8,opt,name=vm_user_id,json=VMUserId,proto3" json:"VMUserId" yaml:"VMUserId"`
	VmUserPasswd string `protobuf:"bytes,9,opt,name=vm_user_passwd,json=VMUserPasswd,proto3" json:"VMUserPasswd" yaml:"VMUserPasswd"`
	// Fields for response
	Iid                  *IID        `protobuf:"bytes,10,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	ImageIid             *IID        `protobuf:"bytes,11,opt,name=image_iid,json=ImageIId,proto3" json:"ImageIId" yaml:"ImageIId"`
	VpcIid               *IID        `protobuf:"bytes,12,opt,name=vpc_iid,json=VpcIID,proto3" json:"VpcIID" yaml:"VpcIID"`
	SubnetIid            *IID        `protobuf:"bytes,13,opt,name=subnet_iid,json=SubnetIID,proto3" json:"SubnetIID" yaml:"SubnetIID"`
	SecurityGroupIids    []*IID      `protobuf:"bytes,14,rep,name=security_group_iids,json=SecurityGroupIIds,proto3" json:"SecurityGroupIIds" yaml:"SecurityGroupIIds"`
	KeyPairIid           *IID        `protobuf:"bytes,15,opt,name=key_pair_iid,json=KeyPairIId,proto3" json:"KeyPairIId" yaml:"KeyPairIId"`
	StartTime            string      `protobuf:"bytes,16,opt,name=start_time,json=StartTime,proto3" json:"StartTime" yaml:"StartTime"`
	Region               *RegionInfo `protobuf:"bytes,17,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	NetworkInterface     string      `protobuf:"bytes,18,opt,name=network_interface,json=NetworkInterface,proto3" json:"NetworkInterface" yaml:"NetworkInterface"`
	PublicIp             string      `protobuf:"bytes,19,opt,name=public_ip,json=PublicIP,proto3" json:"PublicIP" yaml:"PublicIP"`
	PublicDns            string      `protobuf:"bytes,20,opt,name=public_dns,json=PublicDNS,proto3" json:"PublicDNS" yaml:"PublicDNS"`
	PrivateIp            string      `protobuf:"bytes,21,opt,name=private_ip,json=PrivateIP,proto3" json:"PrivateIP" yaml:"PrivateIP"`
	PrivateDns           string      `protobuf:"bytes,22,opt,name=private_dns,json=PrivateDNS,proto3" json:"PrivateDNS" yaml:"PrivateDNS"`
	VmBootDisk           string      `protobuf:"bytes,23,opt,name=vm_boot_disk,json=VMBootDisk,proto3" json:"VMBootDisk" yaml:"VMBootDisk"`
	VmBlockDisk          string      `protobuf:"bytes,24,opt,name=vm_block_disk,json=VMBlockDisk,proto3" json:"VMBlockDisk" yaml:"VMBlockDisk"`
	SshAccessPoint       string      `protobuf:"bytes,25,opt,name=ssh_access_point,json=SSHAccessPoint,proto3" json:"SSHAccessPoint" yaml:"SSHAccessPoint"`
	KeyValueList         []*KeyValue `protobuf:"bytes,26,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SpiderVMInfo) Reset()         { *m = SpiderVMInfo{} }
func (m *SpiderVMInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderVMInfo) ProtoMessage()    {}
func (*SpiderVMInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{72}
}
func (m *SpiderVMInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderVMInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderVMInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderVMInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderVMInfo.Merge(m, src)
}
func (m *SpiderVMInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderVMInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderVMInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderVMInfo proto.InternalMessageInfo

func (m *SpiderVMInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpiderVMInfo) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *SpiderVMInfo) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *SpiderVMInfo) GetSubnetName() string {
	if m != nil {
		return m.SubnetName
	}
	return ""
}

func (m *SpiderVMInfo) GetSecurityGroupNames() []string {
	if m != nil {
		return m.SecurityGroupNames
	}
	return nil
}

func (m *SpiderVMInfo) GetKeyPairName() string {
	if m != nil {
		return m.KeyPairName
	}
	return ""
}

func (m *SpiderVMInfo) GetVmSpecName() string {
	if m != nil {
		return m.VmSpecName
	}
	return ""
}

func (m *SpiderVMInfo) GetVmUserId() string {
	if m != nil {
		return m.VmUserId
	}
	return ""
}

func (m *SpiderVMInfo) GetVmUserPasswd() string {
	if m != nil {
		return m.VmUserPasswd
	}
	return ""
}

func (m *SpiderVMInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *SpiderVMInfo) GetImageIid() *IID {
	if m != nil {
		return m.ImageIid
	}
	return nil
}

func (m *SpiderVMInfo) GetVpcIid() *IID {
	if m != nil {
		return m.VpcIid
	}
	return nil
}

func (m *SpiderVMInfo) GetSubnetIid() *IID {
	if m != nil {
		return m.SubnetIid
	}
	return nil
}

func (m *SpiderVMInfo) GetSecurityGroupIids() []*IID {
	if m != nil {
		return m.SecurityGroupIids
	}
	return nil
}

func (m *SpiderVMInfo) GetKeyPairIid() *IID {
	if m != nil {
		return m.KeyPairIid
	}
	return nil
}

func (m *SpiderVMInfo) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *SpiderVMInfo) GetRegion() *RegionInfo {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *SpiderVMInfo) GetNetworkInterface() string {
	if m != nil {
		return m.NetworkInterface
	}
	return ""
}

func (m *SpiderVMInfo) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *SpiderVMInfo) GetPublicDns() string {
	if m != nil {
		return m.PublicDns
	}
	return ""
}

func (m *SpiderVMInfo) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

func (m *SpiderVMInfo) GetPrivateDns() string {
	if m != nil {
		return m.PrivateDns
	}
	return ""
}

func (m *SpiderVMInfo) GetVmBootDisk() string {
	if m != nil {
		return m.VmBootDisk
	}
	return ""
}

func (m *SpiderVMInfo) GetVmBlockDisk() string {
	if m != nil {
		return m.VmBlockDisk
	}
	return ""
}

func (m *SpiderVMInfo) GetSshAccessPoint() string {
	if m != nil {
		return m.SshAccessPoint
	}
	return ""
}

func (m *SpiderVMInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type TbMcisCreateRequest struct {
	NsId                 string     `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbMcisReq `protobuf:"bytes,2,opt,name=item,json=mcis,proto3" json:"mcis" yaml:"mcis"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TbMcisCreateRequest) Reset()         { *m = TbMcisCreateRequest{} }
func (m *TbMcisCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbMcisCreateRequest) ProtoMessage()    {}
func (*TbMcisCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{73}
}
func (m *TbMcisCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisCreateRequest.Merge(m, src)
}
func (m *TbMcisCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisCreateRequest proto.InternalMessageInfo

func (m *TbMcisCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbMcisCreateRequest) GetItem() *TbMcisReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbMcisReq struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	InstallMonAgent      string     `protobuf:"bytes,2,opt,name=install_mon_agent,json=installMonAgent,proto3" json:"installMonAgent" yaml:"installMonAgent"`
	Label                string     `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
	PlacementAlgo        string     `protobuf:"bytes,4,opt,name=placement_algo,json=placementAlgo,proto3" json:"placementAlgo" yaml:"placementAlgo"`
	Description          string     `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	Vm                   []*TbVmReq `protobuf:"bytes,6,rep,name=vm,proto3" json:"vm" yaml:"vm"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TbMcisReq) Reset()         { *m = TbMcisReq{} }
func (m *TbMcisReq) String() string { return proto.CompactTextString(m) }
func (*TbMcisReq) ProtoMessage()    {}
func (*TbMcisReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{74}
}
func (m *TbMcisReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisReq.Merge(m, src)
}
func (m *TbMcisReq) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisReq proto.InternalMessageInfo

func (m *TbMcisReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbMcisReq) GetInstallMonAgent() string {
	if m != nil {
		return m.InstallMonAgent
	}
	return ""
}

func (m *TbMcisReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TbMcisReq) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *TbMcisReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbMcisReq) GetVm() []*TbVmReq {
	if m != nil {
		return m.Vm
	}
	return nil
}

type TbVmReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	VmGroupSize          string   `protobuf:"bytes,2,opt,name=vm_group_size,json=vmGroupSize,proto3" json:"vmGroupSize" yaml:"vmGroupSize"`
	Label                string   `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	ConnectionName       string   `protobuf:"bytes,5,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	SpecId               string   `protobuf:"bytes,6,opt,name=spec_id,json=specId,proto3" json:"specId" yaml:"specId"`
	ImageId              string   `protobuf:"bytes,7,opt,name=image_id,json=imageId,proto3" json:"imageId" yaml:"imageId"`
	VnetId               string   `protobuf:"bytes,8,opt,name=vnet_id,json=vNetId,proto3" json:"vNetId" yaml:"vNetId"`
	SubnetId             string   `protobuf:"bytes,9,opt,name=subnet_id,json=subnetId,proto3" json:"subnetId" yaml:"subnetId"`
	SecurityGroupIds     []string `protobuf:"bytes,10,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"securityGroupIds" yaml:"securityGroupIds"`
	SshKeyId             string   `protobuf:"bytes,11,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"sshKeyId" yaml:"sshKeyId"`
	VmUserAccount        string   `protobuf:"bytes,12,opt,name=vm_user_account,json=vmUserAccount,proto3" json:"vmUserAccount" yaml:"vmUserAccount"`
	VmUserPassword       string   `protobuf:"bytes,13,opt,name=vm_user_password,json=vmUserPassword,proto3" json:"vmUserPassword" yaml:"vmUserPassword"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbVmReq) Reset()         { *m = TbVmReq{} }
func (m *TbVmReq) String() string { return proto.CompactTextString(m) }
func (*TbVmReq) ProtoMessage()    {}
func (*TbVmReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{75}
}
func (m *TbVmReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmReq.Merge(m, src)
}
func (m *TbVmReq) XXX_Size() int {
	return m.Size()
}
func (m *TbVmReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmReq proto.InternalMessageInfo

func (m *TbVmReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVmReq) GetVmGroupSize() string {
	if m != nil {
		return m.VmGroupSize
	}
	return ""
}

func (m *TbVmReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TbVmReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbVmReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbVmReq) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

func (m *TbVmReq) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *TbVmReq) GetVnetId() string {
	if m != nil {
		return m.VnetId
	}
	return ""
}

func (m *TbVmReq) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *TbVmReq) GetSecurityGroupIds() []string {
	if m != nil {
		return m.SecurityGroupIds
	}
	return nil
}

func (m *TbVmReq) GetSshKeyId() string {
	if m != nil {
		return m.SshKeyId
	}
	return ""
}

func (m *TbVmReq) GetVmUserAccount() string {
	if m != nil {
		return m.VmUserAccount
	}
	return ""
}

func (m *TbVmReq) GetVmUserPassword() string {
	if m != nil {
		return m.VmUserPassword
	}
	return ""
}

type ListTbMcisStatusInfoResponse struct {
	Items                []*McisStatusInfo `protobuf:"bytes,1,rep,name=items,json=mcis,proto3" json:"mcis" yaml:"mcis"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListTbMcisStatusInfoResponse) Reset()         { *m = ListTbMcisStatusInfoResponse{} }
func (m *ListTbMcisStatusInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbMcisStatusInfoResponse) ProtoMessage()    {}
func (*ListTbMcisStatusInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{76}
}
func (m *ListTbMcisStatusInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbMcisStatusInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbMcisStatusInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbMcisStatusInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbMcisStatusInfoResponse.Merge(m, src)
}
func (m *ListTbMcisStatusInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbMcisStatusInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbMcisStatusInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbMcisStatusInfoResponse proto.InternalMessageInfo

func (m *ListTbMcisStatusInfoResponse) GetItems() []*McisStatusInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbMcisStatusInfoResponse struct {
	Item                 *McisStatusInfo `protobuf:"bytes,1,opt,name=item,json=status,proto3" json:"status" yaml:"status"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TbMcisStatusInfoResponse) Reset()         { *m = TbMcisStatusInfoResponse{} }
func (m *TbMcisStatusInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbMcisStatusInfoResponse) ProtoMessage()    {}
func (*TbMcisStatusInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{77}
}
func (m *TbMcisStatusInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisStatusInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisStatusInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisStatusInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisStatusInfoResponse.Merge(m, src)
}
func (m *TbMcisStatusInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisStatusInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisStatusInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisStatusInfoResponse proto.InternalMessageInfo

func (m *TbMcisStatusInfoResponse) GetItem() *McisStatusInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisStatusInfo struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	Status               string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status" yaml:"status"`
	TargetStatus         string            `protobuf:"bytes,4,opt,name=target_status,json=targetStatus,proto3" json:"targetStatus" yaml:"targetStatus"`
	TargetAction         string            `protobuf:"bytes,5,opt,name=target_action,json=targetAction,proto3" json:"targetAction" yaml:"targetAction"`
	InstallMonAgent      string            `protobuf:"bytes,6,opt,name=install_mon_agent,json=installMonAgent,proto3" json:"installMonAgent" yaml:"installMonAgent"`
	MasterVmId           string            `protobuf:"bytes,7,opt,name=master_vm_id,json=masterVmId,proto3" json:"masterVmId" yaml:"masterVmId"`
	MasterIp             string            `protobuf:"bytes,8,opt,name=master_ip,json=masterIp,proto3" json:"masterIp" yaml:"masterIp"`
	MasterSshPort        string            `protobuf:"bytes,9,opt,name=master_ssh_port,json=masterSSHPort,proto3" json:"masterSSHPort" yaml:"masterSSHPort"`
	Vm                   []*TbVmStatusInfo `protobuf:"bytes,10,rep,name=vm,proto3" json:"vm" yaml:"vm"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *McisStatusInfo) Reset()         { *m = McisStatusInfo{} }
func (m *McisStatusInfo) String() string { return proto.CompactTextString(m) }
func (*McisStatusInfo) ProtoMessage()    {}
func (*McisStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{78}
}
func (m *McisStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisStatusInfo.Merge(m, src)
}
func (m *McisStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *McisStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_McisStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_McisStatusInfo proto.InternalMessageInfo

func (m *McisStatusInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *McisStatusInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *McisStatusInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *McisStatusInfo) GetTargetStatus() string {
	if m != nil {
		return m.TargetStatus
	}
	return ""
}

func (m *McisStatusInfo) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

func (m *McisStatusInfo) GetInstallMonAgent() string {
	if m != nil {
		return m.InstallMonAgent
	}
	return ""
}

func (m *McisStatusInfo) GetMasterVmId() string {
	if m != nil {
		return m.MasterVmId
	}
	return ""
}

func (m *McisStatusInfo) GetMasterIp() string {
	if m != nil {
		return m.MasterIp
	}
	return ""
}

func (m *McisStatusInfo) GetMasterSshPort() string {
	if m != nil {
		return m.MasterSshPort
	}
	return ""
}

func (m *McisStatusInfo) GetVm() []*TbVmStatusInfo {
	if m != nil {
		return m.Vm
	}
	return nil
}

type TbVmStatusInfo struct {
	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	CspVmId              string       `protobuf:"bytes,3,opt,name=csp_vm_id,json=cspVmId,proto3" json:"cspVmId" yaml:"cspVmId"`
	Status               string       `protobuf:"bytes,4,opt,name=status,proto3" json:"status" yaml:"status"`
	TargetStatus         string       `protobuf:"bytes,5,opt,name=target_status,json=targetStatus,proto3" json:"targetStatus" yaml:"targetStatus"`
	TargetAction         string       `protobuf:"bytes,6,opt,name=target_action,json=targetAction,proto3" json:"targetAction" yaml:"targetAction"`
	NativeStatus         string       `protobuf:"bytes,7,opt,name=native_status,json=nativeStatus,proto3" json:"nativeStatus" yaml:"nativeStatus"`
	MonAgentStatus       string       `protobuf:"bytes,8,opt,name=mon_agent_status,json=monAgentStatus,proto3" json:"monAgentStatus" yaml:"monAgentStatus"`
	SystemMessage        string       `protobuf:"bytes,9,opt,name=system_message,json=systemMessage,proto3" json:"systemMessage" yaml:"systemMessage"`
	CreatedTime          string       `protobuf:"bytes,10,opt,name=created_time,json=createdTime,proto3" json:"createdTime" yaml:"createdTime"`
	PublicIp             string       `protobuf:"bytes,11,opt,name=public_ip,json=publicIp,proto3" json:"publicIp" yaml:"publicIp"`
	PrivateIp            string       `protobuf:"bytes,12,opt,name=private_ip,json=privateIp,proto3" json:"privateIp" yaml:"privateIp"`
	SshPort              string       `protobuf:"bytes,13,opt,name=ssh_port,json=sshPort,proto3" json:"sshPort" yaml:"sshPort"`
	Location             *GeoLocation `protobuf:"bytes,14,opt,name=location,proto3" json:"location" yaml:"location"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TbVmStatusInfo) Reset()         { *m = TbVmStatusInfo{} }
func (m *TbVmStatusInfo) String() string { return proto.CompactTextString(m) }
func (*TbVmStatusInfo) ProtoMessage()    {}
func (*TbVmStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{79}
}
func (m *TbVmStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmStatusInfo.Merge(m, src)
}
func (m *TbVmStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbVmStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmStatusInfo proto.InternalMessageInfo

func (m *TbVmStatusInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbVmStatusInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVmStatusInfo) GetCspVmId() string {
	if m != nil {
		return m.CspVmId
	}
	return ""
}

func (m *TbVmStatusInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbVmStatusInfo) GetTargetStatus() string {
	if m != nil {
		return m.TargetStatus
	}
	return ""
}

func (m *TbVmStatusInfo) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

func (m *TbVmStatusInfo) GetNativeStatus() string {
	if m != nil {
		return m.NativeStatus
	}
	return ""
}

func (m *TbVmStatusInfo) GetMonAgentStatus() string {
	if m != nil {
		return m.MonAgentStatus
	}
	return ""
}

func (m *TbVmStatusInfo) GetSystemMessage() string {
	if m != nil {
		return m.SystemMessage
	}
	return ""
}

func (m *TbVmStatusInfo) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *TbVmStatusInfo) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *TbVmStatusInfo) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

func (m *TbVmStatusInfo) GetSshPort() string {
	if m != nil {
		return m.SshPort
	}
	return ""
}

func (m *TbVmStatusInfo) GetLocation() *GeoLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

type TbMcisAllQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbMcisAllQryRequest) Reset()         { *m = TbMcisAllQryRequest{} }
func (m *TbMcisAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*TbMcisAllQryRequest) ProtoMessage()    {}
func (*TbMcisAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{80}
}
func (m *TbMcisAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisAllQryRequest.Merge(m, src)
}
func (m *TbMcisAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisAllQryRequest proto.InternalMessageInfo

func (m *TbMcisAllQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

type TbMcisActionRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action" yaml:"action"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbMcisActionRequest) Reset()         { *m = TbMcisActionRequest{} }
func (m *TbMcisActionRequest) String() string { return proto.CompactTextString(m) }
func (*TbMcisActionRequest) ProtoMessage()    {}
func (*TbMcisActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{81}
}
func (m *TbMcisActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisActionRequest.Merge(m, src)
}
func (m *TbMcisActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisActionRequest proto.InternalMessageInfo

func (m *TbMcisActionRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbMcisActionRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbMcisActionRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type TbMcisQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbMcisQryRequest) Reset()         { *m = TbMcisQryRequest{} }
func (m *TbMcisQryRequest) String() string { return proto.CompactTextString(m) }
func (*TbMcisQryRequest) ProtoMessage()    {}
func (*TbMcisQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{82}
}
func (m *TbMcisQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisQryRequest.Merge(m, src)
}
func (m *TbMcisQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisQryRequest proto.InternalMessageInfo

func (m *TbMcisQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbMcisQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

type TbVmInfoResponse struct {
	Item                 *TbVmInfo `protobuf:"bytes,1,opt,name=item,json=mcisvm,proto3" json:"mcisvm" yaml:"mcisvm"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TbVmInfoResponse) Reset()         { *m = TbVmInfoResponse{} }
func (m *TbVmInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbVmInfoResponse) ProtoMessage()    {}
func (*TbVmInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{83}
}
func (m *TbVmInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmInfoResponse.Merge(m, src)
}
func (m *TbVmInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbVmInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmInfoResponse proto.InternalMessageInfo

func (m *TbVmInfoResponse) GetItem() *TbVmInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVmCreateRequest struct {
	NsId                 string    `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string    `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Item                 *TbVmInfo `protobuf:"bytes,3,opt,name=item,json=mcisvm,proto3" json:"mcisvm" yaml:"mcisvm"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TbVmCreateRequest) Reset()         { *m = TbVmCreateRequest{} }
func (m *TbVmCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbVmCreateRequest) ProtoMessage()    {}
func (*TbVmCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{84}
}
func (m *TbVmCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmCreateRequest.Merge(m, src)
}
func (m *TbVmCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVmCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmCreateRequest proto.InternalMessageInfo

func (m *TbVmCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVmCreateRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbVmCreateRequest) GetItem() *TbVmInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVmGroupCreateRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Item                 *TbVmReq `protobuf:"bytes,3,opt,name=item,json=groupvm,proto3" json:"groupvm" yaml:"groupvm"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbVmGroupCreateRequest) Reset()         { *m = TbVmGroupCreateRequest{} }
func (m *TbVmGroupCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbVmGroupCreateRequest) ProtoMessage()    {}
func (*TbVmGroupCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{85}
}
func (m *TbVmGroupCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmGroupCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmGroupCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmGroupCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmGroupCreateRequest.Merge(m, src)
}
func (m *TbVmGroupCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVmGroupCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmGroupCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmGroupCreateRequest proto.InternalMessageInfo

func (m *TbVmGroupCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVmGroupCreateRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbVmGroupCreateRequest) GetItem() *TbVmReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVmStatusInfoesponse struct {
	Item                 *TbVmStatusInfo `protobuf:"bytes,1,opt,name=item,json=statusvm,proto3" json:"statusvm" yaml:"statusvm"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TbVmStatusInfoesponse) Reset()         { *m = TbVmStatusInfoesponse{} }
func (m *TbVmStatusInfoesponse) String() string { return proto.CompactTextString(m) }
func (*TbVmStatusInfoesponse) ProtoMessage()    {}
func (*TbVmStatusInfoesponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{86}
}
func (m *TbVmStatusInfoesponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmStatusInfoesponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmStatusInfoesponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmStatusInfoesponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmStatusInfoesponse.Merge(m, src)
}
func (m *TbVmStatusInfoesponse) XXX_Size() int {
	return m.Size()
}
func (m *TbVmStatusInfoesponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmStatusInfoesponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmStatusInfoesponse proto.InternalMessageInfo

func (m *TbVmStatusInfoesponse) GetItem() *TbVmStatusInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVmQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	VmId                 string   `protobuf:"bytes,3,opt,name=vm_id,json=vmId,proto3" json:"vmId" yaml:"vmId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbVmQryRequest) Reset()         { *m = TbVmQryRequest{} }
func (m *TbVmQryRequest) String() string { return proto.CompactTextString(m) }
func (*TbVmQryRequest) ProtoMessage()    {}
func (*TbVmQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{87}
}
func (m *TbVmQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmQryRequest.Merge(m, src)
}
func (m *TbVmQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVmQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmQryRequest proto.InternalMessageInfo

func (m *TbVmQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVmQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbVmQryRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

type TbVmActionRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	VmId                 string   `protobuf:"bytes,3,opt,name=vm_id,json=vmId,proto3" json:"vmId" yaml:"vmId"`
	Action               string   `protobuf:"bytes,4,opt,name=action,proto3" json:"action" yaml:"action"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbVmActionRequest) Reset()         { *m = TbVmActionRequest{} }
func (m *TbVmActionRequest) String() string { return proto.CompactTextString(m) }
func (*TbVmActionRequest) ProtoMessage()    {}
func (*TbVmActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{88}
}
func (m *TbVmActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmActionRequest.Merge(m, src)
}
func (m *TbVmActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVmActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmActionRequest proto.InternalMessageInfo

func (m *TbVmActionRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVmActionRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbVmActionRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *TbVmActionRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type McisRecommendInfoResponse struct {
	Item                 *McisRecommendInfo `protobuf:"bytes,1,opt,name=item,json=recommend,proto3" json:"recommend" yaml:"recommend"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *McisRecommendInfoResponse) Reset()         { *m = McisRecommendInfoResponse{} }
func (m *McisRecommendInfoResponse) String() string { return proto.CompactTextString(m) }
func (*McisRecommendInfoResponse) ProtoMessage()    {}
func (*McisRecommendInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{89}
}
func (m *McisRecommendInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendInfoResponse.Merge(m, src)
}
func (m *McisRecommendInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendInfoResponse proto.InternalMessageInfo

func (m *McisRecommendInfoResponse) GetItem() *McisRecommendInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisRecommendInfo struct {
	VmRecommend          []*TbVmRecommendInfo `protobuf:"bytes,1,rep,name=vm_recommend,proto3" json:"vm_recommend" yaml:"vm_recommend"`
	PlacementAlgo        string               `protobuf:"bytes,2,opt,name=placement_algo,json=placementAlgo,proto3" json:"placementAlgo" yaml:"placementAlgo"`
	PlacementParam       []*KeyValue          `protobuf:"bytes,3,rep,name=placement_param,json=placementParam,proto3" json:"placementParam" yaml:"placementParam"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *McisRecommendInfo) Reset()         { *m = McisRecommendInfo{} }
func (m *McisRecommendInfo) String() string { return proto.CompactTextString(m) }
func (*McisRecommendInfo) ProtoMessage()    {}
func (*McisRecommendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{90}
}
func (m *McisRecommendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendInfo.Merge(m, src)
}
func (m *McisRecommendInfo) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendInfo proto.InternalMessageInfo

func (m *McisRecommendInfo) GetVmRecommend() []*TbVmRecommendInfo {
	if m != nil {
		return m.VmRecommend
	}
	return nil
}

func (m *McisRecommendInfo) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *McisRecommendInfo) GetPlacementParam() []*KeyValue {
	if m != nil {
		return m.PlacementParam
	}
	return nil
}

type TbVmRecommendInfo struct {
	VmReq                *TbVmRecommendReq `protobuf:"bytes,1,opt,name=vm_req,json=vmReq,proto3" json:"vmReq" yaml:"vmReq"`
	VmPriority           []*TbVmPriority   `protobuf:"bytes,2,rep,name=vm_priority,json=vmPriority,proto3" json:"vmPriority" yaml:"vmPriority"`
	PlacementAlgo        string            `protobuf:"bytes,3,opt,name=placement_algo,json=placementAlgo,proto3" json:"placementAlgo" yaml:"placementAlgo"`
	PlacementParam       []*KeyValue       `protobuf:"bytes,4,rep,name=placement_param,json=placementParam,proto3" json:"placementParam" yaml:"placementParam"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TbVmRecommendInfo) Reset()         { *m = TbVmRecommendInfo{} }
func (m *TbVmRecommendInfo) String() string { return proto.CompactTextString(m) }
func (*TbVmRecommendInfo) ProtoMessage()    {}
func (*TbVmRecommendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{91}
}
func (m *TbVmRecommendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmRecommendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmRecommendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmRecommendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmRecommendInfo.Merge(m, src)
}
func (m *TbVmRecommendInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbVmRecommendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmRecommendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmRecommendInfo proto.InternalMessageInfo

func (m *TbVmRecommendInfo) GetVmReq() *TbVmRecommendReq {
	if m != nil {
		return m.VmReq
	}
	return nil
}

func (m *TbVmRecommendInfo) GetVmPriority() []*TbVmPriority {
	if m != nil {
		return m.VmPriority
	}
	return nil
}

func (m *TbVmRecommendInfo) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *TbVmRecommendInfo) GetPlacementParam() []*KeyValue {
	if m != nil {
		return m.PlacementParam
	}
	return nil
}

type TbVmPriority struct {
	Priority             string      `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority" yaml:"priority"`
	VmSpec               *TbSpecInfo `protobuf:"bytes,2,opt,name=vm_spec,json=vmSpec,proto3" json:"vmSpec" yaml:"vmSpec"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbVmPriority) Reset()         { *m = TbVmPriority{} }
func (m *TbVmPriority) String() string { return proto.CompactTextString(m) }
func (*TbVmPriority) ProtoMessage()    {}
func (*TbVmPriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{92}
}
func (m *TbVmPriority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmPriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmPriority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmPriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmPriority.Merge(m, src)
}
func (m *TbVmPriority) XXX_Size() int {
	return m.Size()
}
func (m *TbVmPriority) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmPriority.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmPriority proto.InternalMessageInfo

func (m *TbVmPriority) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *TbVmPriority) GetVmSpec() *TbSpecInfo {
	if m != nil {
		return m.VmSpec
	}
	return nil
}

type McisRecommendCreateRequest struct {
	NsId                 string            `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *McisRecommendReq `protobuf:"bytes,2,opt,name=item,json=recommend,proto3" json:"recommend" yaml:"recommend"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *McisRecommendCreateRequest) Reset()         { *m = McisRecommendCreateRequest{} }
func (m *McisRecommendCreateRequest) String() string { return proto.CompactTextString(m) }
func (*McisRecommendCreateRequest) ProtoMessage()    {}
func (*McisRecommendCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{93}
}
func (m *McisRecommendCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendCreateRequest.Merge(m, src)
}
func (m *McisRecommendCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendCreateRequest proto.InternalMessageInfo

func (m *McisRecommendCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisRecommendCreateRequest) GetItem() *McisRecommendReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisRecommendReq struct {
	VmReq                []*TbVmRecommendReq `protobuf:"bytes,1,rep,name=vm_req,json=vmReq,proto3" json:"vmReq" yaml:"vmReq"`
	PlacementAlgo        string              `protobuf:"bytes,2,opt,name=placement_algo,json=placementAlgo,proto3" json:"placementAlgo" yaml:"placementAlgo"`
	PlacementParam       []*KeyValue         `protobuf:"bytes,3,rep,name=placement_param,json=placementParam,proto3" json:"placementParam" yaml:"placementParam"`
	MaxResultNum         string              `protobuf:"bytes,4,opt,name=max_result_num,json=maxResultNum,proto3" json:"maxResultNum" yaml:"maxResultNum"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *McisRecommendReq) Reset()         { *m = McisRecommendReq{} }
func (m *McisRecommendReq) String() string { return proto.CompactTextString(m) }
func (*McisRecommendReq) ProtoMessage()    {}
func (*McisRecommendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{94}
}
func (m *McisRecommendReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendReq.Merge(m, src)
}
func (m *McisRecommendReq) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendReq.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendReq proto.InternalMessageInfo

func (m *McisRecommendReq) GetVmReq() []*TbVmRecommendReq {
	if m != nil {
		return m.VmReq
	}
	return nil
}

func (m *McisRecommendReq) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *McisRecommendReq) GetPlacementParam() []*KeyValue {
	if m != nil {
		return m.PlacementParam
	}
	return nil
}

func (m *McisRecommendReq) GetMaxResultNum() string {
	if m != nil {
		return m.MaxResultNum
	}
	return ""
}

type TbVmRecommendReq struct {
	RequestName          string      `protobuf:"bytes,1,opt,name=request_name,json=requestName,proto3" json:"requestName" yaml:"requestName"`
	MaxResultNum         string      `protobuf:"bytes,2,opt,name=max_result_num,json=maxResultNum,proto3" json:"maxResultNum" yaml:"maxResultNum"`
	VcpuSize             string      `protobuf:"bytes,3,opt,name=vcpu_size,json=vcpuSize,proto3" json:"vcpuSize" yaml:"vcpuSize"`
	MemorySize           string      `protobuf:"bytes,4,opt,name=memory_size,json=memorySize,proto3" json:"memorySize" yaml:"memorySize"`
	DiskSize             string      `protobuf:"bytes,5,opt,name=disk_size,json=diskSize,proto3" json:"diskSize" yaml:"diskSize"`
	PlacementAlgo        string      `protobuf:"bytes,6,opt,name=placement_algo,json=placementAlgo,proto3" json:"placementAlgo" yaml:"placementAlgo"`
	PlacementParam       []*KeyValue `protobuf:"bytes,7,rep,name=placement_param,json=placementParam,proto3" json:"placementParam" yaml:"placementParam"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbVmRecommendReq) Reset()         { *m = TbVmRecommendReq{} }
func (m *TbVmRecommendReq) String() string { return proto.CompactTextString(m) }
func (*TbVmRecommendReq) ProtoMessage()    {}
func (*TbVmRecommendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{95}
}
func (m *TbVmRecommendReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmRecommendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmRecommendReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmRecommendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmRecommendReq.Merge(m, src)
}
func (m *TbVmRecommendReq) XXX_Size() int {
	return m.Size()
}
func (m *TbVmRecommendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmRecommendReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmRecommendReq proto.InternalMessageInfo

func (m *TbVmRecommendReq) GetRequestName() string {
	if m != nil {
		return m.RequestName
	}
	return ""
}

func (m *TbVmRecommendReq) GetMaxResultNum() string {
	if m != nil {
		return m.MaxResultNum
	}
	return ""
}

func (m *TbVmRecommendReq) GetVcpuSize() string {
	if m != nil {
		return m.VcpuSize
	}
	return ""
}

func (m *TbVmRecommendReq) GetMemorySize() string {
	if m != nil {
		return m.MemorySize
	}
	return ""
}

func (m *TbVmRecommendReq) GetDiskSize() string {
	if m != nil {
		return m.DiskSize
	}
	return ""
}

func (m *TbVmRecommendReq) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *TbVmRecommendReq) GetPlacementParam() []*KeyValue {
	if m != nil {
		return m.PlacementParam
	}
	return nil
}

type McisRecommendVmCreateRequest struct {
	NsId                 string          `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *DeploymentPlan `protobuf:"bytes,2,opt,name=item,json=plan,proto3" json:"plan" yaml:"plan"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *McisRecommendVmCreateRequest) Reset()         { *m = McisRecommendVmCreateRequest{} }
func (m *McisRecommendVmCreateRequest) String() string { return proto.CompactTextString(m) }
func (*McisRecommendVmCreateRequest) ProtoMessage()    {}
func (*McisRecommendVmCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{96}
}
func (m *McisRecommendVmCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendVmCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendVmCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendVmCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendVmCreateRequest.Merge(m, src)
}
func (m *McisRecommendVmCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendVmCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendVmCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendVmCreateRequest proto.InternalMessageInfo

func (m *McisRecommendVmCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisRecommendVmCreateRequest) GetItem() *DeploymentPlan {
	if m != nil {
		return m.Item
	}
	return nil
}

type DeploymentPlan struct {
	Filter               *FilterInfo   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter" yaml:"filter"`
	Priority             *PriorityInfo `protobuf:"bytes,2,opt,name=priority,proto3" json:"priority" yaml:"priority"`
	Limit                string        `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit" yaml:"limit"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeploymentPlan) Reset()         { *m = DeploymentPlan{} }
func (m *DeploymentPlan) String() string { return proto.CompactTextString(m) }
func (*DeploymentPlan) ProtoMessage()    {}
func (*DeploymentPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{97}
}
func (m *DeploymentPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentPlan.Merge(m, src)
}
func (m *DeploymentPlan) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentPlan.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentPlan proto.InternalMessageInfo

func (m *DeploymentPlan) GetFilter() *FilterInfo {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *DeploymentPlan) GetPriority() *PriorityInfo {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *DeploymentPlan) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

type FilterInfo struct {
	Policy               []*FilterCondition `protobuf:"bytes,1,rep,name=policy,proto3" json:"policy" yaml:"policy"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FilterInfo) Reset()         { *m = FilterInfo{} }
func (m *FilterInfo) String() string { return proto.CompactTextString(m) }
func (*FilterInfo) ProtoMessage()    {}
func (*FilterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{98}
}
func (m *FilterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterInfo.Merge(m, src)
}
func (m *FilterInfo) XXX_Size() int {
	return m.Size()
}
func (m *FilterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FilterInfo proto.InternalMessageInfo

func (m *FilterInfo) GetPolicy() []*FilterCondition {
	if m != nil {
		return m.Policy
	}
	return nil
}

type FilterCondition struct {
	Metric               string       `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric" yaml:"metric"`
	Condition            []*Operation `protobuf:"bytes,2,rep,name=condition,proto3" json:"condition" yaml:"condition"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FilterCondition) Reset()         { *m = FilterCondition{} }
func (m *FilterCondition) String() string { return proto.CompactTextString(m) }
func (*FilterCondition) ProtoMessage()    {}
func (*FilterCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{99}
}
func (m *FilterCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterCondition.Merge(m, src)
}
func (m *FilterCondition) XXX_Size() int {
	return m.Size()
}
func (m *FilterCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FilterCondition proto.InternalMessageInfo

func (m *FilterCondition) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *FilterCondition) GetCondition() []*Operation {
	if m != nil {
		return m.Condition
	}
	return nil
}

type Operation struct {
	Operator             string   `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator" yaml:"operator"`
	Condition            string   `protobuf:"bytes,2,opt,name=condition,json=operand,proto3" json:"operand" yaml:"operand"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{100}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Operation) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

type PriorityInfo struct {
	Policy               []*PriorityCondition `protobuf:"bytes,1,rep,name=policy,proto3" json:"policy" yaml:"policy"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PriorityInfo) Reset()         { *m = PriorityInfo{} }
func (m *PriorityInfo) String() string { return proto.CompactTextString(m) }
func (*PriorityInfo) ProtoMessage()    {}
func (*PriorityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{101}
}
func (m *PriorityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriorityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriorityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriorityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriorityInfo.Merge(m, src)
}
func (m *PriorityInfo) XXX_Size() int {
	return m.Size()
}
func (m *PriorityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PriorityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PriorityInfo proto.InternalMessageInfo

func (m *PriorityInfo) GetPolicy() []*PriorityCondition {
	if m != nil {
		return m.Policy
	}
	return nil
}

type PriorityCondition struct {
	Metric               string             `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric" yaml:"metric"`
	Weight               string             `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight" yaml:"weight"`
	Parameter            []*ParameterKeyVal `protobuf:"bytes,3,rep,name=parameter,proto3" json:"parameter" yaml:"parameter"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PriorityCondition) Reset()         { *m = PriorityCondition{} }
func (m *PriorityCondition) String() string { return proto.CompactTextString(m) }
func (*PriorityCondition) ProtoMessage()    {}
func (*PriorityCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{102}
}
func (m *PriorityCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriorityCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriorityCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriorityCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriorityCondition.Merge(m, src)
}
func (m *PriorityCondition) XXX_Size() int {
	return m.Size()
}
func (m *PriorityCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_PriorityCondition.DiscardUnknown(m)
}

var xxx_messageInfo_PriorityCondition proto.InternalMessageInfo

func (m *PriorityCondition) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *PriorityCondition) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *PriorityCondition) GetParameter() []*ParameterKeyVal {
	if m != nil {
		return m.Parameter
	}
	return nil
}

type ParameterKeyVal struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key" yaml:"key"`
	Val                  []string `protobuf:"bytes,2,rep,name=val,proto3" json:"val" yaml:"val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParameterKeyVal) Reset()         { *m = ParameterKeyVal{} }
func (m *ParameterKeyVal) String() string { return proto.CompactTextString(m) }
func (*ParameterKeyVal) ProtoMessage()    {}
func (*ParameterKeyVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{103}
}
func (m *ParameterKeyVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParameterKeyVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParameterKeyVal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParameterKeyVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParameterKeyVal.Merge(m, src)
}
func (m *ParameterKeyVal) XXX_Size() int {
	return m.Size()
}
func (m *ParameterKeyVal) XXX_DiscardUnknown() {
	xxx_messageInfo_ParameterKeyVal.DiscardUnknown(m)
}

var xxx_messageInfo_ParameterKeyVal proto.InternalMessageInfo

func (m *ParameterKeyVal) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ParameterKeyVal) GetVal() []string {
	if m != nil {
		return m.Val
	}
	return nil
}

type ListCmdMcisResponse struct {
	Items                []*CmdMcisResult `protobuf:"bytes,1,rep,name=items,json=result_array,proto3" json:"result_array" yaml:"result_array"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListCmdMcisResponse) Reset()         { *m = ListCmdMcisResponse{} }
func (m *ListCmdMcisResponse) String() string { return proto.CompactTextString(m) }
func (*ListCmdMcisResponse) ProtoMessage()    {}
func (*ListCmdMcisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{104}
}
func (m *ListCmdMcisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCmdMcisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCmdMcisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCmdMcisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCmdMcisResponse.Merge(m, src)
}
func (m *ListCmdMcisResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCmdMcisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCmdMcisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCmdMcisResponse proto.InternalMessageInfo

func (m *ListCmdMcisResponse) GetItems() []*CmdMcisResult {
	if m != nil {
		return m.Items
	}
	return nil
}

type CmdMcisResult struct {
	McisId               string   `protobuf:"bytes,1,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	VmId                 string   `protobuf:"bytes,2,opt,name=vm_id,json=vmId,proto3" json:"vmId" yaml:"vmId"`
	VmIp                 string   `protobuf:"bytes,3,opt,name=vm_ip,json=vmIp,proto3" json:"vmIp" yaml:"vmIp"`
	Result               string   `protobuf:"bytes,4,opt,name=result,proto3" json:"result" yaml:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdMcisResult) Reset()         { *m = CmdMcisResult{} }
func (m *CmdMcisResult) String() string { return proto.CompactTextString(m) }
func (*CmdMcisResult) ProtoMessage()    {}
func (*CmdMcisResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{105}
}
func (m *CmdMcisResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdMcisResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdMcisResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdMcisResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdMcisResult.Merge(m, src)
}
func (m *CmdMcisResult) XXX_Size() int {
	return m.Size()
}
func (m *CmdMcisResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdMcisResult.DiscardUnknown(m)
}

var xxx_messageInfo_CmdMcisResult proto.InternalMessageInfo

func (m *CmdMcisResult) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *CmdMcisResult) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *CmdMcisResult) GetVmIp() string {
	if m != nil {
		return m.VmIp
	}
	return ""
}

func (m *CmdMcisResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type McisCmdCreateRequest struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string      `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Item                 *McisCmdReq `protobuf:"bytes,3,opt,name=item,json=cmd,proto3" json:"cmd" yaml:"cmd"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *McisCmdCreateRequest) Reset()         { *m = McisCmdCreateRequest{} }
func (m *McisCmdCreateRequest) String() string { return proto.CompactTextString(m) }
func (*McisCmdCreateRequest) ProtoMessage()    {}
func (*McisCmdCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{106}
}
func (m *McisCmdCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisCmdCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisCmdCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisCmdCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisCmdCreateRequest.Merge(m, src)
}
func (m *McisCmdCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisCmdCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisCmdCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisCmdCreateRequest proto.InternalMessageInfo

func (m *McisCmdCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisCmdCreateRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *McisCmdCreateRequest) GetItem() *McisCmdReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisCmdVmCreateRequest struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string      `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	VmId                 string      `protobuf:"bytes,3,opt,name=vm_id,json=vmId,proto3" json:"vmId" yaml:"vmId"`
	Item                 *McisCmdReq `protobuf:"bytes,4,opt,name=item,json=cmd,proto3" json:"cmd" yaml:"cmd"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *McisCmdVmCreateRequest) Reset()         { *m = McisCmdVmCreateRequest{} }
func (m *McisCmdVmCreateRequest) String() string { return proto.CompactTextString(m) }
func (*McisCmdVmCreateRequest) ProtoMessage()    {}
func (*McisCmdVmCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{107}
}
func (m *McisCmdVmCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisCmdVmCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisCmdVmCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisCmdVmCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisCmdVmCreateRequest.Merge(m, src)
}
func (m *McisCmdVmCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisCmdVmCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisCmdVmCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisCmdVmCreateRequest proto.InternalMessageInfo

func (m *McisCmdVmCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisCmdVmCreateRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *McisCmdVmCreateRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *McisCmdVmCreateRequest) GetItem() *McisCmdReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisCmdReq struct {
	UserName             string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"userName" yaml:"userName"`
	Command              string   `protobuf:"bytes,2,opt,name=command,proto3" json:"command" yaml:"command"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *McisCmdReq) Reset()         { *m = McisCmdReq{} }
func (m *McisCmdReq) String() string { return proto.CompactTextString(m) }
func (*McisCmdReq) ProtoMessage()    {}
func (*McisCmdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{108}
}
func (m *McisCmdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisCmdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisCmdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisCmdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisCmdReq.Merge(m, src)
}
func (m *McisCmdReq) XXX_Size() int {
	return m.Size()
}
func (m *McisCmdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_McisCmdReq.DiscardUnknown(m)
}

var xxx_messageInfo_McisCmdReq proto.InternalMessageInfo

func (m *McisCmdReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *McisCmdReq) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type ListAgentInstallResponse struct {
	Items                []*CmdMcisResult `protobuf:"bytes,1,rep,name=items,json=result_array,proto3" json:"result_array" yaml:"result_array"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListAgentInstallResponse) Reset()         { *m = ListAgentInstallResponse{} }
func (m *ListAgentInstallResponse) String() string { return proto.CompactTextString(m) }
func (*ListAgentInstallResponse) ProtoMessage()    {}
func (*ListAgentInstallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{109}
}
func (m *ListAgentInstallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAgentInstallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAgentInstallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAgentInstallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAgentInstallResponse.Merge(m, src)
}
func (m *ListAgentInstallResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAgentInstallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAgentInstallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAgentInstallResponse proto.InternalMessageInfo

func (m *ListAgentInstallResponse) GetItems() []*CmdMcisResult {
	if m != nil {
		return m.Items
	}
	return nil
}

type MonitorResultSimpleResponse struct {
	Item                 *MonResultSimpleInfo `protobuf:"bytes,1,opt,name=item,json=monitor,proto3" json:"monitor" yaml:"monitor"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MonitorResultSimpleResponse) Reset()         { *m = MonitorResultSimpleResponse{} }
func (m *MonitorResultSimpleResponse) String() string { return proto.CompactTextString(m) }
func (*MonitorResultSimpleResponse) ProtoMessage()    {}
func (*MonitorResultSimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{110}
}
func (m *MonitorResultSimpleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonitorResultSimpleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonitorResultSimpleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonitorResultSimpleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorResultSimpleResponse.Merge(m, src)
}
func (m *MonitorResultSimpleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MonitorResultSimpleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorResultSimpleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorResultSimpleResponse proto.InternalMessageInfo

func (m *MonitorResultSimpleResponse) GetItem() *MonResultSimpleInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type MonResultSimpleInfo struct {
	NsId                 string             `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string             `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	McisMonitoring       []*MonResultSimple `protobuf:"bytes,3,rep,name=mcis_monitoring,json=mcisMonitoring,proto3" json:"mcisMonitoring" yaml:"mcisMonitoring"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MonResultSimpleInfo) Reset()         { *m = MonResultSimpleInfo{} }
func (m *MonResultSimpleInfo) String() string { return proto.CompactTextString(m) }
func (*MonResultSimpleInfo) ProtoMessage()    {}
func (*MonResultSimpleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{111}
}
func (m *MonResultSimpleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonResultSimpleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonResultSimpleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonResultSimpleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonResultSimpleInfo.Merge(m, src)
}
func (m *MonResultSimpleInfo) XXX_Size() int {
	return m.Size()
}
func (m *MonResultSimpleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MonResultSimpleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MonResultSimpleInfo proto.InternalMessageInfo

func (m *MonResultSimpleInfo) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *MonResultSimpleInfo) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *MonResultSimpleInfo) GetMcisMonitoring() []*MonResultSimple {
	if m != nil {
		return m.McisMonitoring
	}
	return nil
}

type MonResultSimple struct {
	Metric               string   `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric" yaml:"metric"`
	VmId                 string   `protobuf:"bytes,2,opt,name=vm_id,json=vmId,proto3" json:"vmId" yaml:"vmId"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value" yaml:"value"`
	Err                  string   `protobuf:"bytes,4,opt,name=err,proto3" json:"err" yaml:"err"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonResultSimple) Reset()         { *m = MonResultSimple{} }
func (m *MonResultSimple) String() string { return proto.CompactTextString(m) }
func (*MonResultSimple) ProtoMessage()    {}
func (*MonResultSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{112}
}
func (m *MonResultSimple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonResultSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonResultSimple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonResultSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonResultSimple.Merge(m, src)
}
func (m *MonResultSimple) XXX_Size() int {
	return m.Size()
}
func (m *MonResultSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_MonResultSimple.DiscardUnknown(m)
}

var xxx_messageInfo_MonResultSimple proto.InternalMessageInfo

func (m *MonResultSimple) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *MonResultSimple) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *MonResultSimple) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MonResultSimple) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type MonitorQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Metric               string   `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric" yaml:"metric"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorQryRequest) Reset()         { *m = MonitorQryRequest{} }
func (m *MonitorQryRequest) String() string { return proto.CompactTextString(m) }
func (*MonitorQryRequest) ProtoMessage()    {}
func (*MonitorQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{113}
}
func (m *MonitorQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonitorQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonitorQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonitorQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorQryRequest.Merge(m, src)
}
func (m *MonitorQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *MonitorQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorQryRequest proto.InternalMessageInfo

func (m *MonitorQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *MonitorQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *MonitorQryRequest) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

type ListBenchmarkInfoResponse struct {
	Items                []*BenchmarkInfo `protobuf:"bytes,1,rep,name=items,json=resultarray,proto3" json:"resultarray" yaml:"resultarray"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListBenchmarkInfoResponse) Reset()         { *m = ListBenchmarkInfoResponse{} }
func (m *ListBenchmarkInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListBenchmarkInfoResponse) ProtoMessage()    {}
func (*ListBenchmarkInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{114}
}
func (m *ListBenchmarkInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBenchmarkInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBenchmarkInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBenchmarkInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBenchmarkInfoResponse.Merge(m, src)
}
func (m *ListBenchmarkInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBenchmarkInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBenchmarkInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBenchmarkInfoResponse proto.InternalMessageInfo

func (m *ListBenchmarkInfoResponse) GetItems() []*BenchmarkInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type BenchmarkInfo struct {
	Result               string           `protobuf:"bytes,1,opt,name=result,proto3" json:"result" yaml:"result"`
	Unit                 string           `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit" yaml:"unit"`
	Desc                 string           `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc" yaml:"desc"`
	Elapsed              string           `protobuf:"bytes,4,opt,name=elapsed,proto3" json:"elapsed" yaml:"elapsed"`
	SpecId               string           `protobuf:"bytes,5,opt,name=spec_id,json=specid,proto3" json:"specid" yaml:"specid"`
	ResultArray          []*BenchmarkInfo `protobuf:"bytes,6,rep,name=result_array,json=resultarray,proto3" json:"resultarray" yaml:"resultarray"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BenchmarkInfo) Reset()         { *m = BenchmarkInfo{} }
func (m *BenchmarkInfo) String() string { return proto.CompactTextString(m) }
func (*BenchmarkInfo) ProtoMessage()    {}
func (*BenchmarkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{115}
}
func (m *BenchmarkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BenchmarkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BenchmarkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BenchmarkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkInfo.Merge(m, src)
}
func (m *BenchmarkInfo) XXX_Size() int {
	return m.Size()
}
func (m *BenchmarkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkInfo proto.InternalMessageInfo

func (m *BenchmarkInfo) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *BenchmarkInfo) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *BenchmarkInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BenchmarkInfo) GetElapsed() string {
	if m != nil {
		return m.Elapsed
	}
	return ""
}

func (m *BenchmarkInfo) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

func (m *BenchmarkInfo) GetResultArray() []*BenchmarkInfo {
	if m != nil {
		return m.ResultArray
	}
	return nil
}

type BmQryAllRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Item                 *BmReq   `protobuf:"bytes,3,opt,name=item,json=bm,proto3" json:"bm" yaml:"bm"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmQryAllRequest) Reset()         { *m = BmQryAllRequest{} }
func (m *BmQryAllRequest) String() string { return proto.CompactTextString(m) }
func (*BmQryAllRequest) ProtoMessage()    {}
func (*BmQryAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{116}
}
func (m *BmQryAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BmQryAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BmQryAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BmQryAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmQryAllRequest.Merge(m, src)
}
func (m *BmQryAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *BmQryAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BmQryAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BmQryAllRequest proto.InternalMessageInfo

func (m *BmQryAllRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *BmQryAllRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *BmQryAllRequest) GetItem() *BmReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type BmQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action" yaml:"action"`
	Item                 *BmReq   `protobuf:"bytes,4,opt,name=item,json=bm,proto3" json:"bm" yaml:"bm"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmQryRequest) Reset()         { *m = BmQryRequest{} }
func (m *BmQryRequest) String() string { return proto.CompactTextString(m) }
func (*BmQryRequest) ProtoMessage()    {}
func (*BmQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{117}
}
func (m *BmQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BmQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BmQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BmQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmQryRequest.Merge(m, src)
}
func (m *BmQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *BmQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BmQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BmQryRequest proto.InternalMessageInfo

func (m *BmQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *BmQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *BmQryRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *BmQryRequest) GetItem() *BmReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type BmReq struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host" yaml:"host"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmReq) Reset()         { *m = BmReq{} }
func (m *BmReq) String() string { return proto.CompactTextString(m) }
func (*BmReq) ProtoMessage()    {}
func (*BmReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{118}
}
func (m *BmReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BmReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BmReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BmReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmReq.Merge(m, src)
}
func (m *BmReq) XXX_Size() int {
	return m.Size()
}
func (m *BmReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BmReq.DiscardUnknown(m)
}

var xxx_messageInfo_BmReq proto.InternalMessageInfo

func (m *BmReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type McisPolicyInfoResponse struct {
	Item                 *McisPolicyInfo `protobuf:"bytes,1,opt,name=item,json=mcisPolicy,proto3" json:"mcisPolicy" yaml:"mcisPolicy"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *McisPolicyInfoResponse) Reset()         { *m = McisPolicyInfoResponse{} }
func (m *McisPolicyInfoResponse) String() string { return proto.CompactTextString(m) }
func (*McisPolicyInfoResponse) ProtoMessage()    {}
func (*McisPolicyInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{119}
}
func (m *McisPolicyInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisPolicyInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisPolicyInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisPolicyInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisPolicyInfoResponse.Merge(m, src)
}
func (m *McisPolicyInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *McisPolicyInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_McisPolicyInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_McisPolicyInfoResponse proto.InternalMessageInfo

func (m *McisPolicyInfoResponse) GetItem() *McisPolicyInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListMcisPolicyInfoResponse struct {
	Items                []*McisPolicyInfo `protobuf:"bytes,1,rep,name=items,json=mcisPolicy,proto3" json:"mcisPolicy" yaml:"mcisPolicy"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListMcisPolicyInfoResponse) Reset()         { *m = ListMcisPolicyInfoResponse{} }
func (m *ListMcisPolicyInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListMcisPolicyInfoResponse) ProtoMessage()    {}
func (*ListMcisPolicyInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{120}
}
func (m *ListMcisPolicyInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMcisPolicyInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMcisPolicyInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMcisPolicyInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMcisPolicyInfoResponse.Merge(m, src)
}
func (m *ListMcisPolicyInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListMcisPolicyInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMcisPolicyInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMcisPolicyInfoResponse proto.InternalMessageInfo

func (m *ListMcisPolicyInfoResponse) GetItems() []*McisPolicyInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type McisPolicyInfo struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Id                   string    `protobuf:"bytes,2,opt,name=id,json=Id,proto3" json:"Id" yaml:"Id"`
	Policy               []*Policy `protobuf:"bytes,3,rep,name=policy,proto3" json:"policy" yaml:"policy"`
	ActionLog            string    `protobuf:"bytes,4,opt,name=action_log,json=actionLog,proto3" json:"actionLog" yaml:"actionLog"`
	Description          string    `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *McisPolicyInfo) Reset()         { *m = McisPolicyInfo{} }
func (m *McisPolicyInfo) String() string { return proto.CompactTextString(m) }
func (*McisPolicyInfo) ProtoMessage()    {}
func (*McisPolicyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{121}
}
func (m *McisPolicyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisPolicyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisPolicyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisPolicyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisPolicyInfo.Merge(m, src)
}
func (m *McisPolicyInfo) XXX_Size() int {
	return m.Size()
}
func (m *McisPolicyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_McisPolicyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_McisPolicyInfo proto.InternalMessageInfo

func (m *McisPolicyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *McisPolicyInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *McisPolicyInfo) GetPolicy() []*Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *McisPolicyInfo) GetActionLog() string {
	if m != nil {
		return m.ActionLog
	}
	return ""
}

func (m *McisPolicyInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Policy struct {
	AutoCondition        *AutoCondition `protobuf:"bytes,1,opt,name=auto_condition,json=autoCondition,proto3" json:"autoCondition" yaml:"autoCondition"`
	AutoAction           *AutoAction    `protobuf:"bytes,2,opt,name=auto_action,json=autoAction,proto3" json:"autoAction" yaml:"autoAction"`
	Status               string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status" yaml:"status"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{122}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetAutoCondition() *AutoCondition {
	if m != nil {
		return m.AutoCondition
	}
	return nil
}

func (m *Policy) GetAutoAction() *AutoAction {
	if m != nil {
		return m.AutoAction
	}
	return nil
}

func (m *Policy) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type AutoCondition struct {
	Metric               string   `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric" yaml:"metric"`
	Operator             string   `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator" yaml:"operator"`
	Operand              string   `protobuf:"bytes,3,opt,name=operand,proto3" json:"operand" yaml:"operand"`
	EvaluationPeriod     string   `protobuf:"bytes,4,opt,name=evaluation_period,json=evaluationPeriod,proto3" json:"evaluationPeriod" yaml:"evaluationPeriod"`
	EvaluationValue      []string `protobuf:"bytes,5,rep,name=evaluation_value,json=evaluationValue,proto3" json:"evaluationValue" yaml:"evaluationValue"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutoCondition) Reset()         { *m = AutoCondition{} }
func (m *AutoCondition) String() string { return proto.CompactTextString(m) }
func (*AutoCondition) ProtoMessage()    {}
func (*AutoCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{123}
}
func (m *AutoCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoCondition.Merge(m, src)
}
func (m *AutoCondition) XXX_Size() int {
	return m.Size()
}
func (m *AutoCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoCondition.DiscardUnknown(m)
}

var xxx_messageInfo_AutoCondition proto.InternalMessageInfo

func (m *AutoCondition) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *AutoCondition) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *AutoCondition) GetOperand() string {
	if m != nil {
		return m.Operand
	}
	return ""
}

func (m *AutoCondition) GetEvaluationPeriod() string {
	if m != nil {
		return m.EvaluationPeriod
	}
	return ""
}

func (m *AutoCondition) GetEvaluationValue() []string {
	if m != nil {
		return m.EvaluationValue
	}
	return nil
}

type AutoAction struct {
	ActionType           string      `protobuf:"bytes,1,opt,name=action_type,json=actionType,proto3" json:"actionType" yaml:"actionType"`
	Vm                   *TbVmInfo   `protobuf:"bytes,2,opt,name=vm,proto3" json:"vm" yaml:"vm"`
	PostCommand          *McisCmdReq `protobuf:"bytes,3,opt,name=post_command,json=postCommand,proto3" json:"postCommand" yaml:"postCommand"`
	PlacementAlgo        string      `protobuf:"bytes,4,opt,name=placement_algo,json=placementAlgo,proto3" json:"placementAlgo" yaml:"placementAlgo"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AutoAction) Reset()         { *m = AutoAction{} }
func (m *AutoAction) String() string { return proto.CompactTextString(m) }
func (*AutoAction) ProtoMessage()    {}
func (*AutoAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{124}
}
func (m *AutoAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoAction.Merge(m, src)
}
func (m *AutoAction) XXX_Size() int {
	return m.Size()
}
func (m *AutoAction) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoAction.DiscardUnknown(m)
}

var xxx_messageInfo_AutoAction proto.InternalMessageInfo

func (m *AutoAction) GetActionType() string {
	if m != nil {
		return m.ActionType
	}
	return ""
}

func (m *AutoAction) GetVm() *TbVmInfo {
	if m != nil {
		return m.Vm
	}
	return nil
}

func (m *AutoAction) GetPostCommand() *McisCmdReq {
	if m != nil {
		return m.PostCommand
	}
	return nil
}

func (m *AutoAction) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

type McisPolicyCreateRequest struct {
	NsId                 string          `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string          `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Item                 *McisPolicyInfo `protobuf:"bytes,3,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *McisPolicyCreateRequest) Reset()         { *m = McisPolicyCreateRequest{} }
func (m *McisPolicyCreateRequest) String() string { return proto.CompactTextString(m) }
func (*McisPolicyCreateRequest) ProtoMessage()    {}
func (*McisPolicyCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{125}
}
func (m *McisPolicyCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisPolicyCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisPolicyCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisPolicyCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisPolicyCreateRequest.Merge(m, src)
}
func (m *McisPolicyCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisPolicyCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisPolicyCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisPolicyCreateRequest proto.InternalMessageInfo

func (m *McisPolicyCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisPolicyCreateRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *McisPolicyCreateRequest) GetItem() *McisPolicyInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisPolicyAllQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *McisPolicyAllQryRequest) Reset()         { *m = McisPolicyAllQryRequest{} }
func (m *McisPolicyAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*McisPolicyAllQryRequest) ProtoMessage()    {}
func (*McisPolicyAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{126}
}
func (m *McisPolicyAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisPolicyAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisPolicyAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisPolicyAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisPolicyAllQryRequest.Merge(m, src)
}
func (m *McisPolicyAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisPolicyAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisPolicyAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisPolicyAllQryRequest proto.InternalMessageInfo

func (m *McisPolicyAllQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

type McisPolicyQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *McisPolicyQryRequest) Reset()         { *m = McisPolicyQryRequest{} }
func (m *McisPolicyQryRequest) String() string { return proto.CompactTextString(m) }
func (*McisPolicyQryRequest) ProtoMessage()    {}
func (*McisPolicyQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{127}
}
func (m *McisPolicyQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisPolicyQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisPolicyQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisPolicyQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisPolicyQryRequest.Merge(m, src)
}
func (m *McisPolicyQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisPolicyQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisPolicyQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisPolicyQryRequest proto.InternalMessageInfo

func (m *McisPolicyQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisPolicyQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

type ConnConfigResponse struct {
	Item                 *ConnConfig `protobuf:"bytes,1,opt,name=item,json=connectionconfig,proto3" json:"connectionconfig" yaml:"connectionconfig"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConnConfigResponse) Reset()         { *m = ConnConfigResponse{} }
func (m *ConnConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ConnConfigResponse) ProtoMessage()    {}
func (*ConnConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{128}
}
func (m *ConnConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnConfigResponse.Merge(m, src)
}
func (m *ConnConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnConfigResponse proto.InternalMessageInfo

func (m *ConnConfigResponse) GetItem() *ConnConfig {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListConnConfigResponse struct {
	Items                []*ConnConfig `protobuf:"bytes,1,rep,name=items,json=connectionconfig,proto3" json:"connectionconfig" yaml:"connectionconfig"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListConnConfigResponse) Reset()         { *m = ListConnConfigResponse{} }
func (m *ListConnConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ListConnConfigResponse) ProtoMessage()    {}
func (*ListConnConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{129}
}
func (m *ListConnConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListConnConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListConnConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListConnConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConnConfigResponse.Merge(m, src)
}
func (m *ListConnConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListConnConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConnConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListConnConfigResponse proto.InternalMessageInfo

func (m *ListConnConfigResponse) GetItems() []*ConnConfig {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConnConfig struct {
	ConfigName           string   `protobuf:"bytes,1,opt,name=config_name,json=ConfigName,proto3" json:"ConfigName" yaml:"ConfigName"`
	ProviderName         string   `protobuf:"bytes,2,opt,name=provider_name,json=ProviderName,proto3" json:"ProviderName" yaml:"ProviderName"`
	DriverName           string   `protobuf:"bytes,3,opt,name=driver_name,json=DriverName,proto3" json:"DriverName" yaml:"DriverName"`
	CredentialName       string   `protobuf:"bytes,4,opt,name=credential_name,json=CredentialName,proto3" json:"CredentialName" yaml:"CredentialName"`
	RegionName           string   `protobuf:"bytes,5,opt,name=region_name,json=RegionName,proto3" json:"RegionName" yaml:"RegionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnConfig) Reset()         { *m = ConnConfig{} }
func (m *ConnConfig) String() string { return proto.CompactTextString(m) }
func (*ConnConfig) ProtoMessage()    {}
func (*ConnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{130}
}
func (m *ConnConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnConfig.Merge(m, src)
}
func (m *ConnConfig) XXX_Size() int {
	return m.Size()
}
func (m *ConnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConnConfig proto.InternalMessageInfo

func (m *ConnConfig) GetConfigName() string {
	if m != nil {
		return m.ConfigName
	}
	return ""
}

func (m *ConnConfig) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ConnConfig) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *ConnConfig) GetCredentialName() string {
	if m != nil {
		return m.CredentialName
	}
	return ""
}

func (m *ConnConfig) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

type ConnConfigQryRequest struct {
	ConnConfigName       string   `protobuf:"bytes,1,opt,name=conn_config_name,json=connConfigName,proto3" json:"connConfigName" yaml:"connConfigName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnConfigQryRequest) Reset()         { *m = ConnConfigQryRequest{} }
func (m *ConnConfigQryRequest) String() string { return proto.CompactTextString(m) }
func (*ConnConfigQryRequest) ProtoMessage()    {}
func (*ConnConfigQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{131}
}
func (m *ConnConfigQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnConfigQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnConfigQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnConfigQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnConfigQryRequest.Merge(m, src)
}
func (m *ConnConfigQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnConfigQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnConfigQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnConfigQryRequest proto.InternalMessageInfo

func (m *ConnConfigQryRequest) GetConnConfigName() string {
	if m != nil {
		return m.ConnConfigName
	}
	return ""
}

type RegionResponse struct {
	Item                 *Region  `protobuf:"bytes,1,opt,name=item,json=region,proto3" json:"region" yaml:"region"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionResponse) Reset()         { *m = RegionResponse{} }
func (m *RegionResponse) String() string { return proto.CompactTextString(m) }
func (*RegionResponse) ProtoMessage()    {}
func (*RegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{132}
}
func (m *RegionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionResponse.Merge(m, src)
}
func (m *RegionResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegionResponse proto.InternalMessageInfo

func (m *RegionResponse) GetItem() *Region {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListRegionResponse struct {
	Items                []*Region `protobuf:"bytes,1,rep,name=items,json=region,proto3" json:"region" yaml:"region"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListRegionResponse) Reset()         { *m = ListRegionResponse{} }
func (m *ListRegionResponse) String() string { return proto.CompactTextString(m) }
func (*ListRegionResponse) ProtoMessage()    {}
func (*ListRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{133}
}
func (m *ListRegionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRegionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRegionResponse.Merge(m, src)
}
func (m *ListRegionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRegionResponse proto.InternalMessageInfo

func (m *ListRegionResponse) GetItems() []*Region {
	if m != nil {
		return m.Items
	}
	return nil
}

type Region struct {
	RegionName           string      `protobuf:"bytes,1,opt,name=region_name,json=RegionName,proto3" json:"RegionName" yaml:"RegionName"`
	ProviderName         string      `protobuf:"bytes,2,opt,name=provider_name,json=ProviderName,proto3" json:"ProviderName" yaml:"ProviderName"`
	KeyValueInfoList     []*KeyValue `protobuf:"bytes,3,rep,name=key_value_info_list,json=KeyValueInfoList,proto3" json:"KeyValueInfoList" yaml:"KeyValueInfoList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{134}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func (m *Region) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *Region) GetKeyValueInfoList() []*KeyValue {
	if m != nil {
		return m.KeyValueInfoList
	}
	return nil
}

type RegionQryRequest struct {
	RegionName           string   `protobuf:"bytes,1,opt,name=region_name,json=regionName,proto3" json:"regionName" yaml:"regionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionQryRequest) Reset()         { *m = RegionQryRequest{} }
func (m *RegionQryRequest) String() string { return proto.CompactTextString(m) }
func (*RegionQryRequest) ProtoMessage()    {}
func (*RegionQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{135}
}
func (m *RegionQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionQryRequest.Merge(m, src)
}
func (m *RegionQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegionQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegionQryRequest proto.InternalMessageInfo

func (m *RegionQryRequest) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

type ConfigInfoResponse struct {
	Item                 *ConfigInfo `protobuf:"bytes,1,opt,name=item,json=config,proto3" json:"config" yaml:"config"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConfigInfoResponse) Reset()         { *m = ConfigInfoResponse{} }
func (m *ConfigInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigInfoResponse) ProtoMessage()    {}
func (*ConfigInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{136}
}
func (m *ConfigInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigInfoResponse.Merge(m, src)
}
func (m *ConfigInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfigInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigInfoResponse proto.InternalMessageInfo

func (m *ConfigInfoResponse) GetItem() *ConfigInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListConfigInfoResponse struct {
	Items                []*ConfigInfo `protobuf:"bytes,1,rep,name=items,json=config,proto3" json:"config" yaml:"config"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListConfigInfoResponse) Reset()         { *m = ListConfigInfoResponse{} }
func (m *ListConfigInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListConfigInfoResponse) ProtoMessage()    {}
func (*ListConfigInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{137}
}
func (m *ListConfigInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListConfigInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListConfigInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListConfigInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConfigInfoResponse.Merge(m, src)
}
func (m *ListConfigInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListConfigInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConfigInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListConfigInfoResponse proto.InternalMessageInfo

func (m *ListConfigInfoResponse) GetItems() []*ConfigInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConfigInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value" yaml:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigInfo) Reset()         { *m = ConfigInfo{} }
func (m *ConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ConfigInfo) ProtoMessage()    {}
func (*ConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{138}
}
func (m *ConfigInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigInfo.Merge(m, src)
}
func (m *ConfigInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigInfo proto.InternalMessageInfo

func (m *ConfigInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConfigInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ConfigCreateRequest struct {
	Item                 *ConfigReq `protobuf:"bytes,1,opt,name=item,json=ReqInfo,proto3" json:"ReqInfo" yaml:"ReqInfo"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConfigCreateRequest) Reset()         { *m = ConfigCreateRequest{} }
func (m *ConfigCreateRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigCreateRequest) ProtoMessage()    {}
func (*ConfigCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{139}
}
func (m *ConfigCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigCreateRequest.Merge(m, src)
}
func (m *ConfigCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigCreateRequest proto.InternalMessageInfo

func (m *ConfigCreateRequest) GetItem() *ConfigReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type ConfigReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value" yaml:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigReq) Reset()         { *m = ConfigReq{} }
func (m *ConfigReq) String() string { return proto.CompactTextString(m) }
func (*ConfigReq) ProtoMessage()    {}
func (*ConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{140}
}
func (m *ConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigReq.Merge(m, src)
}
func (m *ConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *ConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigReq proto.InternalMessageInfo

func (m *ConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ConfigQryRequest struct {
	ConfigId             string   `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"configId" yaml:"configId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigQryRequest) Reset()         { *m = ConfigQryRequest{} }
func (m *ConfigQryRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigQryRequest) ProtoMessage()    {}
func (*ConfigQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{141}
}
func (m *ConfigQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigQryRequest.Merge(m, src)
}
func (m *ConfigQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigQryRequest proto.InternalMessageInfo

func (m *ConfigQryRequest) GetConfigId() string {
	if m != nil {
		return m.ConfigId
	}
	return ""
}

type InspectMcirInfoResponse struct {
	Item                 *InspectMcirInfo `protobuf:"bytes,1,opt,name=item,json=resource,proto3" json:"resource" yaml:"resource"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InspectMcirInfoResponse) Reset()         { *m = InspectMcirInfoResponse{} }
func (m *InspectMcirInfoResponse) String() string { return proto.CompactTextString(m) }
func (*InspectMcirInfoResponse) ProtoMessage()    {}
func (*InspectMcirInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{142}
}
func (m *InspectMcirInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InspectMcirInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InspectMcirInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InspectMcirInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectMcirInfoResponse.Merge(m, src)
}
func (m *InspectMcirInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *InspectMcirInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectMcirInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InspectMcirInfoResponse proto.InternalMessageInfo

func (m *InspectMcirInfoResponse) GetItem() *InspectMcirInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListInspectMcirInfoResponse struct {
	Items                []*InspectMcirInfo `protobuf:"bytes,1,rep,name=items,json=resource,proto3" json:"resource" yaml:"resource"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListInspectMcirInfoResponse) Reset()         { *m = ListInspectMcirInfoResponse{} }
func (m *ListInspectMcirInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListInspectMcirInfoResponse) ProtoMessage()    {}
func (*ListInspectMcirInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{143}
}
func (m *ListInspectMcirInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInspectMcirInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInspectMcirInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInspectMcirInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInspectMcirInfoResponse.Merge(m, src)
}
func (m *ListInspectMcirInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListInspectMcirInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInspectMcirInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListInspectMcirInfoResponse proto.InternalMessageInfo

func (m *ListInspectMcirInfoResponse) GetItems() []*InspectMcirInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type InspectMcirInfo struct {
	ResourcesOnCsp       []*McirResourceOnCspOrSpider `protobuf:"bytes,1,rep,name=resources_on_csp,json=resourcesOnCsp,proto3" json:"resourcesOnCsp" yaml:"resourcesOnCsp"`
	ResourcesOnSpider    []*McirResourceOnCspOrSpider `protobuf:"bytes,2,rep,name=resources_on_spider,json=resourcesOnSpider,proto3" json:"resourcesOnSpider" yaml:"resourcesOnSpider"`
	ResourcesOnTumblebug []*McirResourceOnTumblebug   `protobuf:"bytes,3,rep,name=resources_on_tumblebug,json=resourcesOnTumblebug,proto3" json:"resourcesOnTumblebug" yaml:"resourcesOnTumblebug"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *InspectMcirInfo) Reset()         { *m = InspectMcirInfo{} }
func (m *InspectMcirInfo) String() string { return proto.CompactTextString(m) }
func (*InspectMcirInfo) ProtoMessage()    {}
func (*InspectMcirInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{144}
}
func (m *InspectMcirInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InspectMcirInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InspectMcirInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InspectMcirInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectMcirInfo.Merge(m, src)
}
func (m *InspectMcirInfo) XXX_Size() int {
	return m.Size()
}
func (m *InspectMcirInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectMcirInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InspectMcirInfo proto.InternalMessageInfo

func (m *InspectMcirInfo) GetResourcesOnCsp() []*McirResourceOnCspOrSpider {
	if m != nil {
		return m.ResourcesOnCsp
	}
	return nil
}

func (m *InspectMcirInfo) GetResourcesOnSpider() []*McirResourceOnCspOrSpider {
	if m != nil {
		return m.ResourcesOnSpider
	}
	return nil
}

func (m *InspectMcirInfo) GetResourcesOnTumblebug() []*McirResourceOnTumblebug {
	if m != nil {
		return m.ResourcesOnTumblebug
	}
	return nil
}

type McirResourceOnCspOrSpider struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	CspNativeId          string   `protobuf:"bytes,2,opt,name=csp_native_id,json=cspNativeId,proto3" json:"cspNativeId" yaml:"cspNativeId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *McirResourceOnCspOrSpider) Reset()         { *m = McirResourceOnCspOrSpider{} }
func (m *McirResourceOnCspOrSpider) String() string { return proto.CompactTextString(m) }
func (*McirResourceOnCspOrSpider) ProtoMessage()    {}
func (*McirResourceOnCspOrSpider) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{145}
}
func (m *McirResourceOnCspOrSpider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McirResourceOnCspOrSpider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McirResourceOnCspOrSpider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McirResourceOnCspOrSpider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McirResourceOnCspOrSpider.Merge(m, src)
}
func (m *McirResourceOnCspOrSpider) XXX_Size() int {
	return m.Size()
}
func (m *McirResourceOnCspOrSpider) XXX_DiscardUnknown() {
	xxx_messageInfo_McirResourceOnCspOrSpider.DiscardUnknown(m)
}

var xxx_messageInfo_McirResourceOnCspOrSpider proto.InternalMessageInfo

func (m *McirResourceOnCspOrSpider) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *McirResourceOnCspOrSpider) GetCspNativeId() string {
	if m != nil {
		return m.CspNativeId
	}
	return ""
}

type McirResourceOnTumblebug struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	CspNativeId          string   `protobuf:"bytes,2,opt,name=csp_native_id,json=cspNativeId,proto3" json:"cspNativeId" yaml:"cspNativeId"`
	NsId                 string   `protobuf:"bytes,3,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type" yaml:"type"`
	ObjectKey            string   `protobuf:"bytes,5,opt,name=object_key,json=objectKey,proto3" json:"objectKey" yaml:"objectKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *McirResourceOnTumblebug) Reset()         { *m = McirResourceOnTumblebug{} }
func (m *McirResourceOnTumblebug) String() string { return proto.CompactTextString(m) }
func (*McirResourceOnTumblebug) ProtoMessage()    {}
func (*McirResourceOnTumblebug) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{146}
}
func (m *McirResourceOnTumblebug) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McirResourceOnTumblebug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McirResourceOnTumblebug.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McirResourceOnTumblebug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McirResourceOnTumblebug.Merge(m, src)
}
func (m *McirResourceOnTumblebug) XXX_Size() int {
	return m.Size()
}
func (m *McirResourceOnTumblebug) XXX_DiscardUnknown() {
	xxx_messageInfo_McirResourceOnTumblebug.DiscardUnknown(m)
}

var xxx_messageInfo_McirResourceOnTumblebug proto.InternalMessageInfo

func (m *McirResourceOnTumblebug) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *McirResourceOnTumblebug) GetCspNativeId() string {
	if m != nil {
		return m.CspNativeId
	}
	return ""
}

func (m *McirResourceOnTumblebug) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McirResourceOnTumblebug) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *McirResourceOnTumblebug) GetObjectKey() string {
	if m != nil {
		return m.ObjectKey
	}
	return ""
}

type InspectVmInfoResponse struct {
	Item                 *InspectVmInfo `protobuf:"bytes,1,opt,name=item,json=resource,proto3" json:"resource" yaml:"resource"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InspectVmInfoResponse) Reset()         { *m = InspectVmInfoResponse{} }
func (m *InspectVmInfoResponse) String() string { return proto.CompactTextString(m) }
func (*InspectVmInfoResponse) ProtoMessage()    {}
func (*InspectVmInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{147}
}
func (m *InspectVmInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InspectVmInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InspectVmInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InspectVmInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectVmInfoResponse.Merge(m, src)
}
func (m *InspectVmInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *InspectVmInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectVmInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InspectVmInfoResponse proto.InternalMessageInfo

func (m *InspectVmInfoResponse) GetItem() *InspectVmInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListInspectVmInfoResponse struct {
	Items                []*InspectVmInfo `protobuf:"bytes,1,rep,name=items,json=resource,proto3" json:"resource" yaml:"resource"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListInspectVmInfoResponse) Reset()         { *m = ListInspectVmInfoResponse{} }
func (m *ListInspectVmInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListInspectVmInfoResponse) ProtoMessage()    {}
func (*ListInspectVmInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{148}
}
func (m *ListInspectVmInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInspectVmInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInspectVmInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInspectVmInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInspectVmInfoResponse.Merge(m, src)
}
func (m *ListInspectVmInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListInspectVmInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInspectVmInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListInspectVmInfoResponse proto.InternalMessageInfo

func (m *ListInspectVmInfoResponse) GetItems() []*InspectVmInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type InspectVmInfo struct {
	ResourcesOnCsp       []*VmResourceOnCspOrSpider `protobuf:"bytes,1,rep,name=resources_on_csp,json=resourcesOnCsp,proto3" json:"resourcesOnCsp" yaml:"resourcesOnCsp"`
	ResourcesOnSpider    []*VmResourceOnCspOrSpider `protobuf:"bytes,2,rep,name=resources_on_spider,json=resourcesOnSpider,proto3" json:"resourcesOnSpider" yaml:"resourcesOnSpider"`
	ResourcesOnTumblebug []*VmResourceOnTumblebug   `protobuf:"bytes,3,rep,name=resources_on_tumblebug,json=resourcesOnTumblebug,proto3" json:"resourcesOnTumblebug" yaml:"resourcesOnTumblebug"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *InspectVmInfo) Reset()         { *m = InspectVmInfo{} }
func (m *InspectVmInfo) String() string { return proto.CompactTextString(m) }
func (*InspectVmInfo) ProtoMessage()    {}
func (*InspectVmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{149}
}
func (m *InspectVmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InspectVmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InspectVmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InspectVmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectVmInfo.Merge(m, src)
}
func (m *InspectVmInfo) XXX_Size() int {
	return m.Size()
}
func (m *InspectVmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectVmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InspectVmInfo proto.InternalMessageInfo

func (m *InspectVmInfo) GetResourcesOnCsp() []*VmResourceOnCspOrSpider {
	if m != nil {
		return m.ResourcesOnCsp
	}
	return nil
}

func (m *InspectVmInfo) GetResourcesOnSpider() []*VmResourceOnCspOrSpider {
	if m != nil {
		return m.ResourcesOnSpider
	}
	return nil
}

func (m *InspectVmInfo) GetResourcesOnTumblebug() []*VmResourceOnTumblebug {
	if m != nil {
		return m.ResourcesOnTumblebug
	}
	return nil
}

type VmResourceOnCspOrSpider struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	CspNativeId          string   `protobuf:"bytes,2,opt,name=csp_native_id,json=cspNativeId,proto3" json:"cspNativeId" yaml:"cspNativeId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmResourceOnCspOrSpider) Reset()         { *m = VmResourceOnCspOrSpider{} }
func (m *VmResourceOnCspOrSpider) String() string { return proto.CompactTextString(m) }
func (*VmResourceOnCspOrSpider) ProtoMessage()    {}
func (*VmResourceOnCspOrSpider) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{150}
}
func (m *VmResourceOnCspOrSpider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmResourceOnCspOrSpider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmResourceOnCspOrSpider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmResourceOnCspOrSpider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmResourceOnCspOrSpider.Merge(m, src)
}
func (m *VmResourceOnCspOrSpider) XXX_Size() int {
	return m.Size()
}
func (m *VmResourceOnCspOrSpider) XXX_DiscardUnknown() {
	xxx_messageInfo_VmResourceOnCspOrSpider.DiscardUnknown(m)
}

var xxx_messageInfo_VmResourceOnCspOrSpider proto.InternalMessageInfo

func (m *VmResourceOnCspOrSpider) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VmResourceOnCspOrSpider) GetCspNativeId() string {
	if m != nil {
		return m.CspNativeId
	}
	return ""
}

type VmResourceOnTumblebug struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	CspNativeId          string   `protobuf:"bytes,2,opt,name=csp_native_id,json=cspNativeId,proto3" json:"cspNativeId" yaml:"cspNativeId"`
	NsId                 string   `protobuf:"bytes,3,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,4,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type" yaml:"type"`
	ObjectKey            string   `protobuf:"bytes,6,opt,name=object_key,json=objectKey,proto3" json:"objectKey" yaml:"objectKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmResourceOnTumblebug) Reset()         { *m = VmResourceOnTumblebug{} }
func (m *VmResourceOnTumblebug) String() string { return proto.CompactTextString(m) }
func (*VmResourceOnTumblebug) ProtoMessage()    {}
func (*VmResourceOnTumblebug) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{151}
}
func (m *VmResourceOnTumblebug) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmResourceOnTumblebug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmResourceOnTumblebug.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmResourceOnTumblebug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmResourceOnTumblebug.Merge(m, src)
}
func (m *VmResourceOnTumblebug) XXX_Size() int {
	return m.Size()
}
func (m *VmResourceOnTumblebug) XXX_DiscardUnknown() {
	xxx_messageInfo_VmResourceOnTumblebug.DiscardUnknown(m)
}

var xxx_messageInfo_VmResourceOnTumblebug proto.InternalMessageInfo

func (m *VmResourceOnTumblebug) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VmResourceOnTumblebug) GetCspNativeId() string {
	if m != nil {
		return m.CspNativeId
	}
	return ""
}

func (m *VmResourceOnTumblebug) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *VmResourceOnTumblebug) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *VmResourceOnTumblebug) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VmResourceOnTumblebug) GetObjectKey() string {
	if m != nil {
		return m.ObjectKey
	}
	return ""
}

type InspectQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type" yaml:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InspectQryRequest) Reset()         { *m = InspectQryRequest{} }
func (m *InspectQryRequest) String() string { return proto.CompactTextString(m) }
func (*InspectQryRequest) ProtoMessage()    {}
func (*InspectQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{152}
}
func (m *InspectQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InspectQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InspectQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InspectQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectQryRequest.Merge(m, src)
}
func (m *InspectQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *InspectQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InspectQryRequest proto.InternalMessageInfo

func (m *InspectQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *InspectQryRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ObjectInfoResponse struct {
	Item                 string   `protobuf:"bytes,1,opt,name=item,json=object,proto3" json:"object" yaml:"object"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectInfoResponse) Reset()         { *m = ObjectInfoResponse{} }
func (m *ObjectInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ObjectInfoResponse) ProtoMessage()    {}
func (*ObjectInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{153}
}
func (m *ObjectInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectInfoResponse.Merge(m, src)
}
func (m *ObjectInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ObjectInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectInfoResponse proto.InternalMessageInfo

func (m *ObjectInfoResponse) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

type ListObjectInfoResponse struct {
	Items                []string `protobuf:"bytes,1,rep,name=items,json=object,proto3" json:"object" yaml:"object"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListObjectInfoResponse) Reset()         { *m = ListObjectInfoResponse{} }
func (m *ListObjectInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListObjectInfoResponse) ProtoMessage()    {}
func (*ListObjectInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{154}
}
func (m *ListObjectInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListObjectInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListObjectInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListObjectInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListObjectInfoResponse.Merge(m, src)
}
func (m *ListObjectInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListObjectInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListObjectInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListObjectInfoResponse proto.InternalMessageInfo

func (m *ListObjectInfoResponse) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

type ObjectQryRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key" yaml:"key"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectQryRequest) Reset()         { *m = ObjectQryRequest{} }
func (m *ObjectQryRequest) String() string { return proto.CompactTextString(m) }
func (*ObjectQryRequest) ProtoMessage()    {}
func (*ObjectQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{155}
}
func (m *ObjectQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectQryRequest.Merge(m, src)
}
func (m *ObjectQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ObjectQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectQryRequest proto.InternalMessageInfo

func (m *ObjectQryRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "cbtumblebug.Empty")
	proto.RegisterType((*KeyValue)(nil), "cbtumblebug.KeyValue")
	proto.RegisterType((*IID)(nil), "cbtumblebug.IID")
	proto.RegisterType((*BooleanResponse)(nil), "cbtumblebug.BooleanResponse")
	proto.RegisterType((*ExistsResponse)(nil), "cbtumblebug.ExistsResponse")
	proto.RegisterType((*StringResponse)(nil), "cbtumblebug.StringResponse")
	proto.RegisterType((*MessageResponse)(nil), "cbtumblebug.MessageResponse")
	proto.RegisterType((*StatusResponse)(nil), "cbtumblebug.StatusResponse")
	proto.RegisterType((*NSInfoResponse)(nil), "cbtumblebug.NSInfoResponse")
	proto.RegisterType((*ListNSInfoResponse)(nil), "cbtumblebug.ListNSInfoResponse")
	proto.RegisterType((*NSInfo)(nil), "cbtumblebug.NSInfo")
	proto.RegisterType((*NSCreateRequest)(nil), "cbtumblebug.NSCreateRequest")
	proto.RegisterType((*NsReq)(nil), "cbtumblebug.NsReq")
	proto.RegisterType((*NSQryRequest)(nil), "cbtumblebug.NSQryRequest")
	proto.RegisterType((*ListIdResponse)(nil), "cbtumblebug.ListIdResponse")
	proto.RegisterType((*ResourceQryRequest)(nil), "cbtumblebug.ResourceQryRequest")
	proto.RegisterType((*ResourceAllQryRequest)(nil), "cbtumblebug.ResourceAllQryRequest")
	proto.RegisterType((*TbImageInfoRequest)(nil), "cbtumblebug.TbImageInfoRequest")
	proto.RegisterType((*TbImageInfoResponse)(nil), "cbtumblebug.TbImageInfoResponse")
	proto.RegisterType((*ListTbImageInfoResponse)(nil), "cbtumblebug.ListTbImageInfoResponse")
	proto.RegisterType((*TbImageInfo)(nil), "cbtumblebug.TbImageInfo")
	proto.RegisterType((*TbImageCreateRequest)(nil), "cbtumblebug.TbImageCreateRequest")
	proto.RegisterType((*TbImageReq)(nil), "cbtumblebug.TbImageReq")
	proto.RegisterType((*FetchImageQryRequest)(nil), "cbtumblebug.FetchImageQryRequest")
	proto.RegisterType((*SearchImageQryRequest)(nil), "cbtumblebug.SearchImageQryRequest")
	proto.RegisterType((*SpiderImageInfoResponse)(nil), "cbtumblebug.SpiderImageInfoResponse")
	proto.RegisterType((*ListSpiderImageInfoResponse)(nil), "cbtumblebug.ListSpiderImageInfoResponse")
	proto.RegisterType((*SpiderImageInfo)(nil), "cbtumblebug.SpiderImageInfo")
	proto.RegisterType((*LookupImageListQryRequest)(nil), "cbtumblebug.LookupImageListQryRequest")
	proto.RegisterType((*LookupImageQryRequest)(nil), "cbtumblebug.LookupImageQryRequest")
	proto.RegisterType((*TbSshKeyInfoResponse)(nil), "cbtumblebug.TbSshKeyInfoResponse")
	proto.RegisterType((*ListTbSshKeyInfoResponse)(nil), "cbtumblebug.ListTbSshKeyInfoResponse")
	proto.RegisterType((*TbSshKeyInfo)(nil), "cbtumblebug.TbSshKeyInfo")
	proto.RegisterType((*TbSshKeyCreateRequest)(nil), "cbtumblebug.TbSshKeyCreateRequest")
	proto.RegisterType((*TbSshKeyReq)(nil), "cbtumblebug.TbSshKeyReq")
	proto.RegisterType((*TbSpecInfoRequest)(nil), "cbtumblebug.TbSpecInfoRequest")
	proto.RegisterType((*TbSpecInfoResponse)(nil), "cbtumblebug.TbSpecInfoResponse")
	proto.RegisterType((*ListTbSpecInfoResponse)(nil), "cbtumblebug.ListTbSpecInfoResponse")
	proto.RegisterType((*TbSpecInfo)(nil), "cbtumblebug.TbSpecInfo")
	proto.RegisterType((*TbSpecCreateRequest)(nil), "cbtumblebug.TbSpecCreateRequest")
	proto.RegisterType((*TbSpecReq)(nil), "cbtumblebug.TbSpecReq")
	proto.RegisterType((*FetchSpecQryRequest)(nil), "cbtumblebug.FetchSpecQryRequest")
	proto.RegisterType((*SpiderSpecInfoResponse)(nil), "cbtumblebug.SpiderSpecInfoResponse")
	proto.RegisterType((*ListSpiderSpecInfoResponse)(nil), "cbtumblebug.ListSpiderSpecInfoResponse")
	proto.RegisterType((*SpiderSpecInfo)(nil), "cbtumblebug.SpiderSpecInfo")
	proto.RegisterType((*SpiderVCpuInfo)(nil), "cbtumblebug.SpiderVCpuInfo")
	proto.RegisterType((*SpiderGpuInfo)(nil), "cbtumblebug.SpiderGpuInfo")
	proto.RegisterType((*LookupSpecListQryRequest)(nil), "cbtumblebug.LookupSpecListQryRequest")
	proto.RegisterType((*LookupSpecQryRequest)(nil), "cbtumblebug.LookupSpecQryRequest")
	proto.RegisterType((*FilterSpecsByRangeRequest)(nil), "cbtumblebug.FilterSpecsByRangeRequest")
	proto.RegisterType((*SpecRangeFilter)(nil), "cbtumblebug.SpecRangeFilter")
	proto.RegisterType((*Range)(nil), "cbtumblebug.Range")
	proto.RegisterType((*SortSpecsRequest)(nil), "cbtumblebug.SortSpecsRequest")
	proto.RegisterType((*TbSecurityGroupInfoResponse)(nil), "cbtumblebug.TbSecurityGroupInfoResponse")
	proto.RegisterType((*ListTbSecurityGroupInfoResponse)(nil), "cbtumblebug.ListTbSecurityGroupInfoResponse")
	proto.RegisterType((*TbSecurityGroupInfo)(nil), "cbtumblebug.TbSecurityGroupInfo")
	proto.RegisterType((*SpiderSecurityRuleInfo)(nil), "cbtumblebug.SpiderSecurityRuleInfo")
	proto.RegisterType((*TbSecurityGroupCreateRequest)(nil), "cbtumblebug.TbSecurityGroupCreateRequest")
	proto.RegisterType((*TbSecurityGroupReq)(nil), "cbtumblebug.TbSecurityGroupReq")
	proto.RegisterType((*TbVNetInfoResponse)(nil), "cbtumblebug.TbVNetInfoResponse")
	proto.RegisterType((*ListTbVNetInfoResponse)(nil), "cbtumblebug.ListTbVNetInfoResponse")
	proto.RegisterType((*TbVNetInfo)(nil), "cbtumblebug.TbVNetInfo")
	proto.RegisterType((*SpiderSubnetInfo)(nil), "cbtumblebug.SpiderSubnetInfo")
	proto.RegisterType((*TbVNetCreateRequest)(nil), "cbtumblebug.TbVNetCreateRequest")
	proto.RegisterType((*TbVNetReq)(nil), "cbtumblebug.TbVNetReq")
	proto.RegisterType((*SpiderSubnetReqInfo)(nil), "cbtumblebug.SpiderSubnetReqInfo")
	proto.RegisterType((*TbMcisInfoResponse)(nil), "cbtumblebug.TbMcisInfoResponse")
	proto.RegisterType((*ListTbMcisInfoResponse)(nil), "cbtumblebug.ListTbMcisInfoResponse")
	proto.RegisterType((*TbMcisInfo)(nil), "cbtumblebug.TbMcisInfo")
	proto.RegisterType((*TbVmInfo)(nil), "cbtumblebug.TbVmInfo")
	proto.RegisterType((*GeoLocation)(nil), "cbtumblebug.GeoLocation")
	proto.RegisterType((*RegionInfo)(nil), "cbtumblebug.RegionInfo")
	proto.RegisterType((*SpiderVMInfo)(nil), "cbtumblebug.SpiderVMInfo")
	proto.RegisterType((*TbMcisCreateRequest)(nil), "cbtumblebug.TbMcisCreateRequest")
	proto.RegisterType((*TbMcisReq)(nil), "cbtumblebug.TbMcisReq")
	proto.RegisterType((*TbVmReq)(nil), "cbtumblebug.TbVmReq")
	proto.RegisterType((*ListTbMcisStatusInfoResponse)(nil), "cbtumblebug.ListTbMcisStatusInfoResponse")
	proto.RegisterType((*TbMcisStatusInfoResponse)(nil), "cbtumblebug.TbMcisStatusInfoResponse")
	proto.RegisterType((*McisStatusInfo)(nil), "cbtumblebug.McisStatusInfo")
	proto.RegisterType((*TbVmStatusInfo)(nil), "cbtumblebug.TbVmStatusInfo")
	proto.RegisterType((*TbMcisAllQryRequest)(nil), "cbtumblebug.TbMcisAllQryRequest")
	proto.RegisterType((*TbMcisActionRequest)(nil), "cbtumblebug.TbMcisActionRequest")
	proto.RegisterType((*TbMcisQryRequest)(nil), "cbtumblebug.TbMcisQryRequest")
	proto.RegisterType((*TbVmInfoResponse)(nil), "cbtumblebug.TbVmInfoResponse")
	proto.RegisterType((*TbVmCreateRequest)(nil), "cbtumblebug.TbVmCreateRequest")
	proto.RegisterType((*TbVmGroupCreateRequest)(nil), "cbtumblebug.TbVmGroupCreateRequest")
	proto.RegisterType((*TbVmStatusInfoesponse)(nil), "cbtumblebug.TbVmStatusInfoesponse")
	proto.RegisterType((*TbVmQryRequest)(nil), "cbtumblebug.TbVmQryRequest")
	proto.RegisterType((*TbVmActionRequest)(nil), "cbtumblebug.TbVmActionRequest")
	proto.RegisterType((*McisRecommendInfoResponse)(nil), "cbtumblebug.McisRecommendInfoResponse")
	proto.RegisterType((*McisRecommendInfo)(nil), "cbtumblebug.McisRecommendInfo")
	proto.RegisterType((*TbVmRecommendInfo)(nil), "cbtumblebug.TbVmRecommendInfo")
	proto.RegisterType((*TbVmPriority)(nil), "cbtumblebug.TbVmPriority")
	proto.RegisterType((*McisRecommendCreateRequest)(nil), "cbtumblebug.McisRecommendCreateRequest")
	proto.RegisterType((*McisRecommendReq)(nil), "cbtumblebug.McisRecommendReq")
	proto.RegisterType((*TbVmRecommendReq)(nil), "cbtumblebug.TbVmRecommendReq")
	proto.RegisterType((*McisRecommendVmCreateRequest)(nil), "cbtumblebug.McisRecommendVmCreateRequest")
	proto.RegisterType((*DeploymentPlan)(nil), "cbtumblebug.DeploymentPlan")
	proto.RegisterType((*FilterInfo)(nil), "cbtumblebug.FilterInfo")
	proto.RegisterType((*FilterCondition)(nil), "cbtumblebug.FilterCondition")
	proto.RegisterType((*Operation)(nil), "cbtumblebug.Operation")
	proto.RegisterType((*PriorityInfo)(nil), "cbtumblebug.PriorityInfo")
	proto.RegisterType((*PriorityCondition)(nil), "cbtumblebug.PriorityCondition")
	proto.RegisterType((*ParameterKeyVal)(nil), "cbtumblebug.ParameterKeyVal")
	proto.RegisterType((*ListCmdMcisResponse)(nil), "cbtumblebug.ListCmdMcisResponse")
	proto.RegisterType((*CmdMcisResult)(nil), "cbtumblebug.CmdMcisResult")
	proto.RegisterType((*McisCmdCreateRequest)(nil), "cbtumblebug.McisCmdCreateRequest")
	proto.RegisterType((*McisCmdVmCreateRequest)(nil), "cbtumblebug.McisCmdVmCreateRequest")
	proto.RegisterType((*McisCmdReq)(nil), "cbtumblebug.McisCmdReq")
	proto.RegisterType((*ListAgentInstallResponse)(nil), "cbtumblebug.ListAgentInstallResponse")
	proto.RegisterType((*MonitorResultSimpleResponse)(nil), "cbtumblebug.MonitorResultSimpleResponse")
	proto.RegisterType((*MonResultSimpleInfo)(nil), "cbtumblebug.MonResultSimpleInfo")
	proto.RegisterType((*MonResultSimple)(nil), "cbtumblebug.MonResultSimple")
	proto.RegisterType((*MonitorQryRequest)(nil), "cbtumblebug.MonitorQryRequest")
	proto.RegisterType((*ListBenchmarkInfoResponse)(nil), "cbtumblebug.ListBenchmarkInfoResponse")
	proto.RegisterType((*BenchmarkInfo)(nil), "cbtumblebug.BenchmarkInfo")
	proto.RegisterType((*BmQryAllRequest)(nil), "cbtumblebug.BmQryAllRequest")
	proto.RegisterType((*BmQryRequest)(nil), "cbtumblebug.BmQryRequest")
	proto.RegisterType((*BmReq)(nil), "cbtumblebug.BmReq")
	proto.RegisterType((*McisPolicyInfoResponse)(nil), "cbtumblebug.McisPolicyInfoResponse")
	proto.RegisterType((*ListMcisPolicyInfoResponse)(nil), "cbtumblebug.ListMcisPolicyInfoResponse")
	proto.RegisterType((*McisPolicyInfo)(nil), "cbtumblebug.McisPolicyInfo")
	proto.RegisterType((*Policy)(nil), "cbtumblebug.Policy")
	proto.RegisterType((*AutoCondition)(nil), "cbtumblebug.AutoCondition")
	proto.RegisterType((*AutoAction)(nil), "cbtumblebug.AutoAction")
	proto.RegisterType((*McisPolicyCreateRequest)(nil), "cbtumblebug.McisPolicyCreateRequest")
	proto.RegisterType((*McisPolicyAllQryRequest)(nil), "cbtumblebug.McisPolicyAllQryRequest")
	proto.RegisterType((*McisPolicyQryRequest)(nil), "cbtumblebug.McisPolicyQryRequest")
	proto.RegisterType((*ConnConfigResponse)(nil), "cbtumblebug.ConnConfigResponse")
	proto.RegisterType((*ListConnConfigResponse)(nil), "cbtumblebug.ListConnConfigResponse")
	proto.RegisterType((*ConnConfig)(nil), "cbtumblebug.ConnConfig")
	proto.RegisterType((*ConnConfigQryRequest)(nil), "cbtumblebug.ConnConfigQryRequest")
	proto.RegisterType((*RegionResponse)(nil), "cbtumblebug.RegionResponse")
	proto.RegisterType((*ListRegionResponse)(nil), "cbtumblebug.ListRegionResponse")
	proto.RegisterType((*Region)(nil), "cbtumblebug.Region")
	proto.RegisterType((*RegionQryRequest)(nil), "cbtumblebug.RegionQryRequest")
	proto.RegisterType((*ConfigInfoResponse)(nil), "cbtumblebug.ConfigInfoResponse")
	proto.RegisterType((*ListConfigInfoResponse)(nil), "cbtumblebug.ListConfigInfoResponse")
	proto.RegisterType((*ConfigInfo)(nil), "cbtumblebug.ConfigInfo")
	proto.RegisterType((*ConfigCreateRequest)(nil), "cbtumblebug.ConfigCreateRequest")
	proto.RegisterType((*ConfigReq)(nil), "cbtumblebug.ConfigReq")
	proto.RegisterType((*ConfigQryRequest)(nil), "cbtumblebug.ConfigQryRequest")
	proto.RegisterType((*InspectMcirInfoResponse)(nil), "cbtumblebug.InspectMcirInfoResponse")
	proto.RegisterType((*ListInspectMcirInfoResponse)(nil), "cbtumblebug.ListInspectMcirInfoResponse")
	proto.RegisterType((*InspectMcirInfo)(nil), "cbtumblebug.InspectMcirInfo")
	proto.RegisterType((*McirResourceOnCspOrSpider)(nil), "cbtumblebug.McirResourceOnCspOrSpider")
	proto.RegisterType((*McirResourceOnTumblebug)(nil), "cbtumblebug.McirResourceOnTumblebug")
	proto.RegisterType((*InspectVmInfoResponse)(nil), "cbtumblebug.InspectVmInfoResponse")
	proto.RegisterType((*ListInspectVmInfoResponse)(nil), "cbtumblebug.ListInspectVmInfoResponse")
	proto.RegisterType((*InspectVmInfo)(nil), "cbtumblebug.InspectVmInfo")
	proto.RegisterType((*VmResourceOnCspOrSpider)(nil), "cbtumblebug.VmResourceOnCspOrSpider")
	proto.RegisterType((*VmResourceOnTumblebug)(nil), "cbtumblebug.VmResourceOnTumblebug")
	proto.RegisterType((*InspectQryRequest)(nil), "cbtumblebug.InspectQryRequest")
	proto.RegisterType((*ObjectInfoResponse)(nil), "cbtumblebug.ObjectInfoResponse")
	proto.RegisterType((*ListObjectInfoResponse)(nil), "cbtumblebug.ListObjectInfoResponse")
	proto.RegisterType((*ObjectQryRequest)(nil), "cbtumblebug.ObjectQryRequest")
}

func init() { proto.RegisterFile("cbtumblebug/cbtumblebug.proto", fileDescriptor_d7122b45d641d698) }

var fileDescriptor_d7122b45d641d698 = []byte{
	// 9696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x7d, 0x5b, 0x8c, 0x1c, 0x57,
	0x76, 0x98, 0xba, 0x7b, 0x9e, 0x67, 0xde, 0x35, 0x1c, 0xb2, 0x49, 0x8a, 0x6c, 0xe9, 0x6a, 0x57,
	0xd2, 0x66, 0x37, 0x96, 0x44, 0x71, 0x57, 0xe2, 0x4a, 0x8b, 0xd5, 0x70, 0x86, 0x1a, 0xcd, 0x92,
	0xf3, 0xe0, 0x6d, 0x72, 0xb4, 0x5a, 0xad, 0xd2, 0x5b, 0xd3, 0x5d, 0x6c, 0x96, 0xa7, 0xab, 0xab,
	0x54, 0x55, 0x3d, 0xe4, 0x28, 0x71, 0x3e, 0xbc, 0x01, 0x36, 0x4e, 0x6c, 0x04, 0x5e, 0x03, 0x46,
	0xbc, 0x08, 0x60, 0xc4, 0x41, 0x02, 0x23, 0x30, 0x82, 0x20, 0x48, 0xe0, 0x8f, 0xbc, 0x1c, 0xd8,
	0x1f, 0xfe, 0x4a, 0xfc, 0x11, 0x04, 0x88, 0x91, 0x4c, 0x02, 0xe5, 0x23, 0xc8, 0x00, 0x01, 0x12,
	0xc6, 0x3f, 0xf9, 0x08, 0x10, 0xdc, 0x57, 0xdd, 0x7b, 0xab, 0x6e, 0x77, 0x57, 0xf7, 0xf4, 0x8c,
	0x25, 0xec, 0x57, 0xf7, 0x3d, 0xe7, 0xdc, 0x73, 0x5f, 0xe7, 0x9e, 0x7b, 0xce, 0xb9, 0x8f, 0x82,
	0x6b, 0xf5, 0xfd, 0xb8, 0xe3, 0xed, 0xb7, 0x9c, 0xfd, 0x4e, 0xf3, 0x35, 0xe5, 0xff, 0x2f, 0x04,
	0xa1, 0x1f, 0xfb, 0xd6, 0x8c, 0x02, 0xba, 0x72, 0xa1, 0xe9, 0x37, 0x7d, 0x0a, 0x7f, 0x8d, 0xfc,
	0x63, 0x24, 0x68, 0x12, 0xc6, 0xef, 0x78, 0x41, 0x7c, 0x84, 0x1a, 0x30, 0x75, 0xd7, 0x39, 0xda,
	0xb3, 0x5b, 0x1d, 0xc7, 0x7a, 0x05, 0x4a, 0x07, 0xce, 0x51, 0xb9, 0xf0, 0x42, 0xe1, 0xd5, 0xe9,
	0xdb, 0x2b, 0x27, 0xc7, 0x95, 0xd2, 0x5d, 0xe7, 0xe8, 0xd9, 0x71, 0x05, 0x8e, 0x6c, 0xaf, 0xf5,
	0x6d, 0x74, 0xd7, 0x39, 0x42, 0x98, 0x80, 0xac, 0xd7, 0x60, 0xfc, 0x90, 0xe4, 0x28, 0x17, 0x29,
	0xe9, 0xe5, 0x93, 0xe3, 0xca, 0x38, 0x65, 0xf1, 0xec, 0xb8, 0x32, 0xcb, 0x88, 0x69, 0x12, 0x61,
	0x06, 0x46, 0x47, 0x50, 0xda, 0xdc, 0x5c, 0xb7, 0x6e, 0xc2, 0x64, 0xdb, 0xf6, 0x9c, 0x9a, 0xdb,
	0xe0, 0x85, 0x5c, 0x3d, 0x39, 0xae, 0x4c, 0x6c, 0xdb, 0x9e, 0xb3, 0xd9, 0x78, 0x76, 0x5c, 0x99,
	0x63, 0x59, 0x59, 0x1a, 0x61, 0x8e, 0xb0, 0xde, 0x85, 0xe9, 0xe8, 0x28, 0x8a, 0x1d, 0x8f, 0xe4,
	0x63, 0x25, 0x56, 0x4e, 0x8e, 0x2b, 0x53, 0x55, 0x0a, 0xa4, 0x39, 0x17, 0x58, 0x4e, 0x01, 0x41,
	0x38, 0x41, 0xa2, 0xf7, 0x61, 0xe1, 0xb6, 0xef, 0xb7, 0x1c, 0xbb, 0x8d, 0x9d, 0x28, 0xf0, 0xdb,
	0x91, 0x63, 0xbd, 0x09, 0x13, 0xa1, 0x13, 0x75, 0x5a, 0x31, 0xad, 0xc5, 0x14, 0xab, 0x05, 0xa6,
	0x10, 0x59, 0x0b, 0x96, 0x46, 0x98, 0x23, 0xd0, 0x1d, 0x98, 0xbf, 0xf3, 0xd4, 0x8d, 0xe2, 0x48,
	0x65, 0xe3, 0x50, 0x88, 0xca, 0x86, 0x41, 0x24, 0x1b, 0x96, 0x46, 0x98, 0x23, 0x08, 0x9b, 0x6a,
	0x1c, 0xba, 0xed, 0x66, 0x97, 0xda, 0x4c, 0xe7, 0xab, 0xcd, 0xf7, 0x60, 0x61, 0xcb, 0x89, 0x22,
	0xbb, 0xe9, 0x24, 0x7c, 0xde, 0x82, 0x49, 0x8f, 0x81, 0x38, 0xa3, 0x6b, 0x27, 0xc7, 0x15, 0x01,
	0x7a, 0x76, 0x5c, 0x99, 0x67, 0x9c, 0x38, 0x00, 0x61, 0x81, 0x62, 0x55, 0xb2, 0xe3, 0x8e, 0xd6,
	0xb2, 0x88, 0x42, 0xd4, 0x2a, 0x31, 0x1a, 0x59, 0x25, 0x96, 0x46, 0x98, 0x23, 0xd0, 0x3d, 0x98,
	0xdf, 0xae, 0x6e, 0xb6, 0x1f, 0xf9, 0x09, 0x9b, 0x6f, 0xc3, 0x98, 0x1b, 0x3b, 0x1e, 0x65, 0x32,
	0x73, 0x63, 0xf9, 0x17, 0x54, 0x49, 0x65, 0xa4, 0xb7, 0x97, 0x4f, 0x8e, 0x2b, 0xc5, 0x36, 0xe1,
	0x3a, 0xcd, 0xb8, 0xb6, 0x23, 0x84, 0x8b, 0xed, 0x08, 0xdd, 0x07, 0xeb, 0x9e, 0x1b, 0xc5, 0x29,
	0x8e, 0xef, 0xc0, 0x38, 0xe1, 0x48, 0xea, 0x55, 0x1a, 0x98, 0xe5, 0xdf, 0x2b, 0xc0, 0x04, 0xa3,
	0xb1, 0x5e, 0x82, 0x62, 0x22, 0x83, 0x94, 0xde, 0x6d, 0x48, 0x7a, 0xb7, 0x81, 0x70, 0xd1, 0x6d,
	0x58, 0x5f, 0x87, 0x31, 0x22, 0xad, 0x5c, 0xe4, 0x2e, 0x9d, 0x1c, 0x57, 0x68, 0xfa, 0xd9, 0x71,
	0x65, 0x86, 0x33, 0xb6, 0x3d, 0x07, 0x61, 0x0a, 0xb4, 0x36, 0x60, 0xa6, 0xe1, 0x44, 0xf5, 0xd0,
	0x0d, 0x62, 0xd7, 0x6f, 0x97, 0x4b, 0x34, 0xcf, 0x57, 0x4f, 0x8e, 0x2b, 0x2a, 0xf8, 0xd9, 0x71,
	0xc5, 0x62, 0x59, 0x15, 0x20, 0xc2, 0x2a, 0x09, 0xba, 0x07, 0x0b, 0xdb, 0xd5, 0xb5, 0xd0, 0xb1,
	0x63, 0x07, 0x3b, 0x9f, 0x76, 0x9c, 0x28, 0xb6, 0x6e, 0x69, 0xfd, 0x68, 0xe9, 0x8d, 0x8e, 0xb0,
	0xf3, 0x69, 0xf7, 0x36, 0xff, 0x12, 0x8c, 0x53, 0x8a, 0xa4, 0x31, 0x85, 0x21, 0x1a, 0x53, 0x1c,
	0xba, 0x31, 0xef, 0xc2, 0xec, 0x76, 0xf5, 0x7e, 0x78, 0x24, 0x5a, 0xf2, 0x0d, 0x18, 0x6f, 0x47,
	0x72, 0xfa, 0xb3, 0x6a, 0x44, 0x74, 0x0a, 0x8b, 0x6a, 0x44, 0x64, 0xfa, 0x52, 0x20, 0x7a, 0x1f,
	0xe6, 0x89, 0x0c, 0x6c, 0x36, 0x92, 0xf1, 0xbf, 0x09, 0x93, 0x6e, 0xa3, 0xd6, 0x72, 0xa3, 0x98,
	0x4a, 0x00, 0x97, 0x4c, 0xb7, 0x41, 0xc8, 0xa4, 0x64, 0xb2, 0x34, 0xc2, 0x1c, 0x81, 0x7e, 0x52,
	0x04, 0x0b, 0x3b, 0x91, 0xdf, 0x09, 0xeb, 0xce, 0xb0, 0x95, 0xb1, 0xee, 0xc1, 0x5c, 0xc8, 0x79,
	0xd4, 0xe2, 0xa3, 0x40, 0x88, 0xc5, 0x2b, 0x27, 0xc7, 0x95, 0x59, 0x81, 0x78, 0x70, 0x14, 0x90,
	0x1e, 0x5d, 0x66, 0xb9, 0x55, 0x28, 0xc2, 0x1a, 0x91, 0xb5, 0x0e, 0x33, 0x09, 0x37, 0xb7, 0xc1,
	0xc5, 0xe5, 0xa5, 0x93, 0xe3, 0x0a, 0x08, 0x30, 0xad, 0xc7, 0x92, 0xce, 0x89, 0xd4, 0x46, 0x21,
	0x20, 0x7a, 0xf8, 0x91, 0x1f, 0xd6, 0x9d, 0xf2, 0x98, 0xd4, 0xc3, 0x14, 0x20, 0xf5, 0x30, 0x4d,
	0x22, 0xcc, 0xc0, 0xe8, 0x8f, 0x0a, 0xb0, 0x22, 0x7a, 0x62, 0xb5, 0xd5, 0xfa, 0x82, 0x74, 0x46,
	0xd2, 0x8c, 0x52, 0xce, 0x66, 0xfc, 0x6a, 0x01, 0xac, 0x07, 0xfb, 0x9b, 0x9e, 0xdd, 0x74, 0x98,
	0x7a, 0x18, 0xa6, 0x0d, 0x1f, 0xf0, 0x59, 0x55, 0xa4, 0xb3, 0xaa, 0xac, 0xcd, 0x2a, 0x85, 0x39,
	0xab, 0x8e, 0xeb, 0x31, 0x25, 0xca, 0xab, 0x43, 0x93, 0x08, 0x33, 0x30, 0xaa, 0xc1, 0xb2, 0x56,
	0x1b, 0x2e, 0xac, 0x1f, 0x68, 0xd3, 0xf6, 0x34, 0x05, 0x34, 0xe0, 0x12, 0x11, 0x64, 0x53, 0x21,
	0x9b, 0xba, 0x46, 0x3c, 0x4d, 0x29, 0x7f, 0x36, 0x09, 0x33, 0x4a, 0x0e, 0xeb, 0xbb, 0x30, 0x4d,
	0xb4, 0x41, 0x14, 0xd8, 0x75, 0xa1, 0x37, 0x5e, 0x3c, 0x39, 0xae, 0x48, 0xe0, 0xb3, 0xe3, 0xca,
	0xa2, 0x54, 0x1e, 0x14, 0x84, 0xb0, 0x44, 0x73, 0x2d, 0x5b, 0xcc, 0xa7, 0x65, 0x4b, 0x79, 0x14,
	0xd3, 0x03, 0x58, 0xa8, 0xfb, 0xed, 0xb6, 0x53, 0x27, 0xda, 0xa5, 0x46, 0xf3, 0x31, 0xd1, 0xff,
	0xfa, 0xc9, 0x71, 0x65, 0x5e, 0xa2, 0xb6, 0x19, 0x87, 0x15, 0xc6, 0x41, 0x87, 0x23, 0x9c, 0x22,
	0xb4, 0xee, 0xc0, 0x6c, 0x3d, 0x0a, 0x6a, 0xb4, 0x17, 0x88, 0xf8, 0x8c, 0xcb, 0xd9, 0x58, 0x8f,
	0x02, 0xd6, 0x21, 0xca, 0x6c, 0x94, 0x30, 0x84, 0x15, 0x02, 0x6b, 0x0b, 0xe6, 0x25, 0x1b, 0x5a,
	0xb7, 0x09, 0x39, 0x2b, 0x04, 0x1d, 0xaf, 0xd9, 0xb2, 0xce, 0x8a, 0xd5, 0x4b, 0x23, 0xb2, 0xee,
	0xeb, 0x4a, 0x78, 0x92, 0xf2, 0x7a, 0xed, 0xe4, 0xb8, 0xb2, 0xa2, 0x80, 0xbf, 0xe1, 0x7b, 0x64,
	0xf8, 0x83, 0xf8, 0x28, 0x87, 0x3a, 0xb6, 0xf6, 0x60, 0xae, 0x4e, 0x56, 0x16, 0xd2, 0x79, 0x0d,
	0x3b, 0x76, 0xca, 0x53, 0x94, 0xe9, 0x1b, 0x27, 0xc7, 0x95, 0x8b, 0x02, 0xb1, 0x6e, 0xc7, 0x8e,
	0xc6, 0x55, 0x54, 0x55, 0xc1, 0x93, 0xaa, 0x2a, 0x49, 0xeb, 0x36, 0x4c, 0x35, 0xc9, 0x0c, 0xac,
	0xf9, 0x51, 0x79, 0x3a, 0x69, 0xf3, 0x12, 0x85, 0xed, 0x54, 0x35, 0x6e, 0xdc, 0x0a, 0xe1, 0x28,
	0x84, 0x27, 0xf9, 0x3f, 0xeb, 0x3b, 0x89, 0xcd, 0x01, 0xc9, 0x72, 0xb3, 0xc8, 0x20, 0x1a, 0x03,
	0xae, 0xe3, 0x23, 0x61, 0x7d, 0xb0, 0x3f, 0x56, 0x1b, 0xe6, 0x0f, 0x9c, 0xa3, 0x1a, 0x35, 0x4b,
	0xd9, 0x02, 0x31, 0x43, 0x27, 0xc4, 0x8a, 0x36, 0x21, 0x84, 0xa9, 0xcb, 0x9a, 0x7c, 0xc0, 0x53,
	0x64, 0x6e, 0x99, 0x9a, 0xac, 0xe2, 0x11, 0x9e, 0x55, 0x93, 0x96, 0x07, 0x17, 0xed, 0x28, 0xf2,
	0xeb, 0xae, 0x1d, 0x3b, 0x8d, 0x9a, 0xbf, 0xff, 0x8b, 0x4e, 0x3d, 0x66, 0xe5, 0xce, 0xd2, 0x85,
	0xe9, 0xad, 0x93, 0xe3, 0xca, 0x05, 0x49, 0xb1, 0x43, 0x09, 0xf8, 0x32, 0x75, 0x95, 0xb1, 0x37,
	0x61, 0x11, 0x36, 0x66, 0xb2, 0x3e, 0x82, 0x25, 0x37, 0xaa, 0xd9, 0x9d, 0xd8, 0xaf, 0x35, 0x9d,
	0xb6, 0x13, 0x12, 0x74, 0x79, 0x8e, 0x9a, 0x9d, 0x7f, 0xf1, 0xe4, 0xb8, 0xb2, 0xe0, 0x46, 0xab,
	0x9d, 0xd8, 0xdf, 0x10, 0xa8, 0x67, 0xc7, 0x95, 0x8b, 0x7c, 0x9a, 0xe9, 0x08, 0x84, 0xd3, 0xa4,
	0xe8, 0xd7, 0x0a, 0x70, 0x81, 0x4f, 0x7b, 0xdd, 0xec, 0x18, 0x4c, 0x9d, 0x6e, 0x68, 0xea, 0xf4,
	0x92, 0x49, 0x0f, 0x11, 0x4b, 0xa5, 0xbf, 0x1a, 0xfa, 0xed, 0x22, 0x80, 0xcc, 0x30, 0x98, 0xe1,
	0x62, 0xd0, 0x0f, 0xc5, 0xd1, 0xeb, 0x87, 0xd2, 0x70, 0xfa, 0x21, 0x65, 0x55, 0x8d, 0x0d, 0x6d,
	0x55, 0xfd, 0xac, 0x00, 0x17, 0xde, 0x77, 0xe2, 0xfa, 0x63, 0xca, 0x59, 0x59, 0xc4, 0x0d, 0xcd,
	0x2f, 0x9c, 0xbe, 0xf9, 0x89, 0x1c, 0x14, 0xf3, 0x18, 0x6d, 0xbf, 0x5c, 0x80, 0x95, 0xaa, 0x63,
	0x87, 0xd9, 0xda, 0x0d, 0x26, 0x4f, 0xef, 0xc0, 0xd4, 0x81, 0x73, 0xf4, 0xc4, 0x0f, 0x1b, 0x51,
	0xb9, 0x48, 0xa7, 0x14, 0x75, 0xfa, 0x04, 0x4c, 0x3a, 0x7d, 0x02, 0x82, 0x70, 0x82, 0x44, 0x4d,
	0xb8, 0x54, 0x0d, 0xdc, 0x86, 0x13, 0x66, 0x17, 0xcc, 0x7b, 0xda, 0xaa, 0xfc, 0xbc, 0x26, 0xa7,
	0xa9, 0x3c, 0x39, 0x84, 0xb5, 0x05, 0x57, 0xc9, 0xfc, 0xec, 0x56, 0xd8, 0x96, 0xbe, 0x3a, 0x9f,
	0xb6, 0xb4, 0xbf, 0x5b, 0x84, 0x85, 0x54, 0x2e, 0xeb, 0x16, 0x94, 0x5c, 0xde, 0xa7, 0x33, 0x37,
	0x16, 0xb5, 0x02, 0x36, 0x37, 0xd7, 0x99, 0x1b, 0xbf, 0x49, 0x3b, 0x99, 0xbb, 0xf1, 0x9b, 0xa4,
	0x8f, 0x09, 0xc8, 0x7a, 0x5b, 0x51, 0xdb, 0x45, 0xe9, 0x32, 0x6e, 0x30, 0x8d, 0x2c, 0x95, 0xf5,
	0x46, 0xa2, 0xac, 0xf9, 0x3f, 0xc5, 0x41, 0x2c, 0xe5, 0x76, 0x10, 0xad, 0x46, 0x46, 0x45, 0x8f,
	0xf5, 0x52, 0xd1, 0x74, 0xd9, 0xbc, 0xab, 0xe8, 0x5c, 0xa9, 0x98, 0xef, 0xea, 0x8a, 0x59, 0x4b,
	0x7e, 0x0a, 0x97, 0xef, 0xf9, 0xfe, 0x41, 0x87, 0x4d, 0x3b, 0x02, 0x3a, 0xeb, 0x09, 0x82, 0xfe,
	0x69, 0x01, 0x56, 0x94, 0x32, 0xcf, 0x7c, 0x42, 0xa6, 0xf5, 0x51, 0x71, 0x28, 0x7d, 0x84, 0x1a,
	0x44, 0xef, 0x57, 0xa3, 0xc7, 0x77, 0x9d, 0xa3, 0x1e, 0x33, 0xe4, 0x72, 0x4a, 0x93, 0xcb, 0x0c,
	0x6c, 0xd4, 0x23, 0x9a, 0x56, 0x16, 0x66, 0x9a, 0x26, 0x0b, 0x33, 0xfb, 0xe3, 0x42, 0x99, 0xd9,
	0xae, 0x86, 0x92, 0x52, 0xd3, 0xe3, 0xb4, 0x45, 0xfd, 0xaf, 0x49, 0x98, 0x55, 0x73, 0x9d, 0x81,
	0x9b, 0x6f, 0x18, 0xd0, 0xd2, 0xe9, 0x07, 0x74, 0x54, 0x2b, 0x83, 0x85, 0x61, 0x91, 0x48, 0x46,
	0x14, 0x3d, 0xae, 0x91, 0xa9, 0x46, 0xeb, 0xc7, 0xac, 0xd9, 0xaf, 0x9d, 0x1c, 0x57, 0xe6, 0xea,
	0x51, 0xc0, 0x7a, 0x87, 0x57, 0xef, 0x42, 0x22, 0x20, 0x12, 0x8c, 0xb0, 0x4e, 0x46, 0x2a, 0xf7,
	0xc8, 0x6d, 0x37, 0x9d, 0x30, 0x08, 0xdd, 0x76, 0xcc, 0x6d, 0x5a, 0x5a, 0x39, 0x05, 0x2c, 0x2b,
	0xa7, 0x00, 0x11, 0x56, 0x49, 0x88, 0x46, 0xef, 0x44, 0x4e, 0x48, 0x2b, 0x35, 0x29, 0xc3, 0x78,
	0x02, 0x26, 0x35, 0xba, 0x80, 0x20, 0x9c, 0x20, 0xad, 0x4f, 0xc0, 0x3a, 0x74, 0x42, 0xf7, 0x91,
	0xeb, 0x34, 0x6a, 0x04, 0xc8, 0xda, 0x36, 0x95, 0x18, 0xc5, 0x8b, 0x02, 0xfb, 0x50, 0xb2, 0xbb,
	0xc4, 0xd8, 0xa5, 0x31, 0x08, 0x67, 0x88, 0xad, 0xf7, 0x00, 0x82, 0xce, 0x7e, 0xcb, 0xad, 0x93,
	0x7e, 0xe3, 0x36, 0x2c, 0x75, 0x76, 0x18, 0x94, 0x89, 0x1d, 0x77, 0x76, 0x12, 0x10, 0xc2, 0x12,
	0x4d, 0x3c, 0xfa, 0x20, 0x74, 0x0f, 0xed, 0xd8, 0xa1, 0x2c, 0x40, 0xce, 0x49, 0x0e, 0x66, 0x3c,
	0xf8, 0x9c, 0x94, 0x30, 0x84, 0x15, 0x02, 0x83, 0x8e, 0x9c, 0xe9, 0xab, 0x23, 0x0f, 0x8c, 0x3a,
	0xf2, 0xe7, 0xc3, 0x78, 0xfd, 0x69, 0x01, 0x56, 0xc4, 0x94, 0x3f, 0x8d, 0xf5, 0x7a, 0xb7, 0x67,
	0x30, 0x80, 0xf1, 0x27, 0xe6, 0x6b, 0x2e, 0x3d, 0xf4, 0x1f, 0x0b, 0xc4, 0x91, 0x4e, 0x32, 0x7d,
	0x11, 0x4c, 0xd8, 0x91, 0x85, 0x27, 0x7f, 0x52, 0x80, 0xa5, 0x07, 0xfb, 0xd5, 0xc0, 0xa9, 0x0f,
	0x1f, 0x79, 0x59, 0xef, 0xe9, 0x2a, 0x08, 0xde, 0x8c, 0x4b, 0x14, 0x38, 0x75, 0xc9, 0x85, 0xa4,
	0x10, 0xa6, 0x40, 0xf4, 0x03, 0xb0, 0xd4, 0x8a, 0xf0, 0x25, 0x65, 0x5d, 0x5b, 0xbc, 0x86, 0xe5,
	0x5d, 0x83, 0x8b, 0x7c, 0xd1, 0x4a, 0xf3, 0xbf, 0xa3, 0x2f, 0x59, 0xc3, 0x16, 0xf0, 0x47, 0x17,
	0x89, 0x93, 0x23, 0xa8, 0x7f, 0x7e, 0x42, 0x2d, 0x9b, 0x30, 0x47, 0x17, 0xa8, 0xc0, 0xa9, 0xab,
	0xab, 0x13, 0x95, 0x44, 0xb2, 0xec, 0x04, 0x4e, 0x9d, 0x33, 0xb4, 0xe4, 0xda, 0xc4, 0x81, 0x08,
	0xab, 0x24, 0xd6, 0x5b, 0x30, 0xe9, 0x47, 0x2c, 0xfa, 0x38, 0x21, 0x8d, 0x57, 0x0e, 0x92, 0xc6,
	0x2b, 0x07, 0x20, 0x2c, 0x50, 0x64, 0x1d, 0x6a, 0x77, 0xbc, 0xda, 0x61, 0x3d, 0xe8, 0xd0, 0x75,
	0x68, 0x8e, 0xad, 0x43, 0x14, 0xb6, 0xb6, 0xfb, 0x50, 0xae, 0x43, 0x02, 0x82, 0x70, 0x82, 0x14,
	0x99, 0xeb, 0x7e, 0xc8, 0x56, 0x1f, 0x25, 0x33, 0x81, 0xe9, 0x99, 0x09, 0x84, 0x67, 0x26, 0x7f,
	0xd9, 0x16, 0x8d, 0x57, 0x6b, 0xba, 0xfb, 0x74, 0x89, 0x99, 0x13, 0x5b, 0x34, 0x5e, 0x6d, 0xc3,
	0xbd, 0xad, 0x6e, 0xd1, 0x50, 0x00, 0xdd, 0xa2, 0xa1, 0xff, 0xc8, 0xf4, 0x8d, 0x62, 0x3f, 0x24,
	0xf6, 0x1e, 0xc9, 0x0c, 0x34, 0x33, 0xed, 0x34, 0x01, 0x66, 0x0c, 0x2c, 0x11, 0x1c, 0x49, 0x80,
	0x08, 0xab, 0x24, 0x69, 0x3d, 0x30, 0x33, 0xb4, 0xa5, 0xb1, 0x03, 0x73, 0x75, 0x3f, 0x8a, 0x6b,
	0x81, 0x13, 0xd6, 0x1e, 0xfb, 0x9d, 0xb0, 0x3c, 0xfb, 0x42, 0xe1, 0xd5, 0x22, 0x37, 0x33, 0x54,
	0x84, 0x62, 0x66, 0xa8, 0x60, 0x62, 0x66, 0xa8, 0x69, 0x52, 0x33, 0xd2, 0x4f, 0xbc, 0xb2, 0x74,
	0x79, 0xe0, 0x4d, 0x54, 0xc0, 0xb2, 0x66, 0x0a, 0x10, 0x61, 0x95, 0xc4, 0xfa, 0x10, 0x16, 0x3c,
	0xfb, 0x69, 0x4d, 0x65, 0x36, 0x4f, 0x99, 0xd1, 0xb5, 0x26, 0x85, 0x92, 0x6b, 0x4d, 0x0a, 0x81,
	0x70, 0x9a, 0xd4, 0xf2, 0x61, 0x85, 0x80, 0x62, 0x3f, 0xb6, 0x5b, 0x02, 0x58, 0x8b, 0xdd, 0xfd,
	0xf2, 0x02, 0x65, 0x7f, 0xeb, 0xe4, 0xb8, 0x62, 0x20, 0x78, 0x40, 0x07, 0xe6, 0x79, 0x59, 0x48,
	0x06, 0x8d, 0xb0, 0x39, 0x1b, 0xed, 0x12, 0x27, 0xae, 0xed, 0x3f, 0xa9, 0x35, 0xf7, 0x83, 0xa8,
	0xbc, 0xa8, 0x74, 0x09, 0x03, 0x6f, 0xec, 0x07, 0x91, 0xd2, 0x25, 0x12, 0x48, 0xba, 0x44, 0xa6,
	0x08, 0x23, 0x67, 0x3f, 0x22, 0x49, 0x8f, 0x30, 0x5a, 0x92, 0x8c, 0x38, 0x78, 0x4b, 0x63, 0xa4,
	0x00, 0x11, 0x56, 0x49, 0x88, 0x9e, 0x6a, 0x06, 0x9d, 0x9a, 0xe7, 0x37, 0x9c, 0x56, 0xd9, 0x92,
	0x7a, 0x2a, 0x01, 0x4a, 0x3d, 0x95, 0x80, 0x10, 0x96, 0x68, 0x32, 0x03, 0x48, 0x97, 0x36, 0x83,
	0x4e, 0x79, 0x59, 0xce, 0x00, 0x0e, 0x92, 0x33, 0x80, 0x03, 0x10, 0x16, 0x28, 0x6b, 0x0d, 0xa0,
	0x19, 0x74, 0xc4, 0xec, 0xb9, 0x40, 0xf3, 0x52, 0xeb, 0x8a, 0x43, 0x99, 0xfc, 0x2f, 0x25, 0x65,
	0x27, 0x73, 0x48, 0x21, 0x20, 0xa5, 0x93, 0xaa, 0x04, 0x37, 0x82, 0xf2, 0x8a, 0x54, 0x19, 0x1c,
	0xa4, 0x04, 0x27, 0x19, 0x00, 0x61, 0x81, 0xb2, 0x42, 0x28, 0xfb, 0x61, 0xc3, 0x09, 0x6b, 0x6e,
	0xbb, 0xf6, 0xc8, 0x6d, 0xc5, 0x4e, 0xe8, 0x34, 0x6a, 0x7c, 0xd7, 0xf6, 0xa2, 0x1c, 0x7d, 0x4a,
	0xb3, 0xd9, 0x7e, 0x9f, 0x53, 0x24, 0x9b, 0xb8, 0x7c, 0xf4, 0x8d, 0x68, 0x84, 0xcd, 0xd9, 0xac,
	0x1f, 0xc2, 0x92, 0x43, 0xec, 0x40, 0x16, 0xae, 0xe5, 0xee, 0xf6, 0x25, 0x69, 0xf0, 0x4a, 0x64,
	0xe2, 0x78, 0x73, 0x83, 0x37, 0x8d, 0x41, 0x38, 0x43, 0x6c, 0x35, 0x60, 0x59, 0xe5, 0x4e, 0xd4,
	0x53, 0xed, 0xf5, 0x37, 0xca, 0x15, 0x3a, 0x8b, 0xdf, 0x3c, 0x39, 0xae, 0x58, 0x4a, 0x16, 0x8e,
	0x7d, 0x76, 0x5c, 0xb9, 0x9c, 0x29, 0x81, 0xe3, 0x10, 0x36, 0x64, 0x30, 0x97, 0x72, 0xa3, 0xfc,
	0x42, 0x8f, 0x52, 0x6e, 0xf4, 0x28, 0xe5, 0x86, 0xa9, 0x94, 0x1b, 0xe6, 0x52, 0xde, 0x2c, 0xbf,
	0xd8, 0xa3, 0x94, 0x37, 0x7b, 0x94, 0xf2, 0xa6, 0xa9, 0x94, 0x37, 0xcd, 0xa5, 0xdc, 0x2c, 0xa3,
	0x1e, 0xa5, 0xdc, 0xec, 0x51, 0xca, 0x4d, 0x53, 0x29, 0x37, 0xcd, 0xa5, 0x7c, 0xb3, 0xfc, 0x52,
	0x8f, 0x52, 0xbe, 0xd9, 0xa3, 0x94, 0x6f, 0x9a, 0x4a, 0xf9, 0xa6, 0xb9, 0x94, 0x6f, 0x95, 0xbf,
	0xd2, 0xa3, 0x94, 0x6f, 0xf5, 0x28, 0xe5, 0x5b, 0xa6, 0x52, 0xbe, 0x65, 0x2e, 0xe5, 0xad, 0xf2,
	0x57, 0x7b, 0x94, 0xf2, 0x56, 0x8f, 0x52, 0xde, 0x32, 0x95, 0xf2, 0x96, 0xb9, 0x94, 0xb7, 0xcb,
	0x2f, 0xf7, 0x28, 0xe5, 0xed, 0x1e, 0xa5, 0xbc, 0x6d, 0x2a, 0xe5, 0x6d, 0x73, 0x29, 0xb7, 0xca,
	0xaf, 0xf4, 0x28, 0xe5, 0x56, 0x8f, 0x52, 0x6e, 0x99, 0x4a, 0xb9, 0x65, 0x2c, 0xe5, 0x8d, 0xd7,
	0xcb, 0xaf, 0x76, 0x2f, 0xe5, 0x8d, 0xd7, 0xbb, 0x97, 0xf2, 0xc6, 0xeb, 0x86, 0x52, 0xde, 0x78,
	0xbd, 0x87, 0xfb, 0xf7, 0xb5, 0x73, 0x73, 0xff, 0xfe, 0xc2, 0x48, 0xdc, 0xbf, 0xbf, 0x5e, 0x80,
	0x65, 0x66, 0x46, 0x9f, 0xc6, 0xf9, 0x5b, 0xd3, 0xfc, 0x91, 0x8b, 0x06, 0x93, 0x9e, 0xb8, 0x7e,
	0x7d, 0x2c, 0xfa, 0xdf, 0x29, 0xc2, 0x74, 0x42, 0xfc, 0x45, 0x70, 0xf9, 0x32, 0xa6, 0x76, 0x69,
	0x68, 0x53, 0x7b, 0x64, 0x3b, 0x17, 0xbf, 0x55, 0x80, 0x65, 0xba, 0x73, 0x41, 0x58, 0x7f, 0xc1,
	0x36, 0x2e, 0x1e, 0xc3, 0x45, 0x16, 0x5b, 0xcf, 0xf8, 0x7c, 0xdb, 0x9a, 0x4f, 0x79, 0xd5, 0x10,
	0xc4, 0x4f, 0xdc, 0x3e, 0x1a, 0x1f, 0x38, 0xf4, 0xb8, 0x98, 0xf0, 0xf8, 0x00, 0x4b, 0x23, 0xcc,
	0x11, 0xc8, 0x83, 0x2b, 0x72, 0xd3, 0x20, 0x53, 0xda, 0x8e, 0xee, 0x61, 0x9e, 0xbe, 0xb8, 0x5f,
	0x2f, 0xc1, 0xbc, 0x9e, 0x8f, 0x9d, 0x39, 0x6b, 0x92, 0xb1, 0xd4, 0xce, 0x9c, 0x35, 0xd9, 0x30,
	0x26, 0x67, 0xce, 0x9a, 0x74, 0x04, 0x39, 0xc2, 0x14, 0x28, 0xdd, 0xd6, 0x64, 0x9a, 0x8d, 0xc2,
	0x18, 0x97, 0xbe, 0xf1, 0xc3, 0x1a, 0xf1, 0xb0, 0x4a, 0x5d, 0x3b, 0x6d, 0x6f, 0x2d, 0xe8, 0x48,
	0x5f, 0x99, 0xa4, 0x24, 0x2b, 0x92, 0x42, 0x98, 0x02, 0xad, 0x57, 0xa0, 0xe4, 0x39, 0x1e, 0x97,
	0x3a, 0xba, 0x9f, 0xb1, 0xe5, 0x78, 0x72, 0x3f, 0x63, 0xcb, 0xf1, 0x10, 0x26, 0x20, 0x6b, 0x0d,
	0x4a, 0xc4, 0xb0, 0x1c, 0xa7, 0xfd, 0x76, 0xc5, 0x50, 0xe2, 0x06, 0x2f, 0x90, 0x32, 0xd9, 0xa0,
	0xe5, 0x71, 0x26, 0x1b, 0xa4, 0x38, 0x02, 0x32, 0x44, 0xe0, 0x26, 0xce, 0x60, 0x97, 0x22, 0x14,
	0x43, 0x22, 0x3a, 0xc1, 0x7a, 0x0d, 0xc6, 0xeb, 0x7e, 0xa7, 0x2d, 0x4e, 0x01, 0xd2, 0xcd, 0xa0,
	0x35, 0x02, 0x90, 0x9b, 0x41, 0x34, 0x89, 0x30, 0x03, 0xd3, 0x0c, 0x2d, 0xbf, 0x7e, 0xa0, 0x1e,
	0xc2, 0x5c, 0x23, 0x00, 0x25, 0x03, 0x49, 0x92, 0x0c, 0xf4, 0xf7, 0x0f, 0x0b, 0x30, 0xa7, 0xf5,
	0xc3, 0xe0, 0x65, 0x92, 0xa1, 0x78, 0x14, 0xf2, 0x12, 0xd9, 0x50, 0x3c, 0x0a, 0x95, 0xa1, 0x78,
	0x14, 0x92, 0xa1, 0x78, 0x14, 0x12, 0xce, 0xcc, 0x49, 0x50, 0x8e, 0xf4, 0x6c, 0x71, 0x07, 0x81,
	0x73, 0xde, 0x62, 0xce, 0x01, 0x03, 0xe7, 0x1e, 0x64, 0x14, 0x40, 0x99, 0xed, 0xb5, 0x10, 0x61,
	0x3e, 0x97, 0xed, 0x9d, 0xdf, 0x2f, 0xc0, 0x05, 0x59, 0xe4, 0x99, 0x6b, 0xad, 0x8c, 0xde, 0x2e,
	0x0e, 0xab, 0xb7, 0xd1, 0xdf, 0x29, 0xc0, 0x65, 0xe6, 0x55, 0x10, 0x50, 0x74, 0xfb, 0x08, 0xdb,
	0xed, 0xe6, 0x90, 0x8b, 0xe4, 0x7d, 0x98, 0x60, 0x9e, 0x0f, 0x5f, 0x26, 0xd3, 0x7b, 0x99, 0x4e,
	0x9d, 0x32, 0x67, 0xc5, 0x31, 0x85, 0xc2, 0xe8, 0xa5, 0x42, 0x61, 0x69, 0x84, 0x39, 0x02, 0xfd,
	0xdf, 0x8b, 0xb0, 0x90, 0xca, 0xf8, 0xa5, 0xd9, 0xb2, 0xc9, 0x8c, 0xd2, 0xd8, 0x28, 0x02, 0x59,
	0xe3, 0x03, 0x05, 0xb2, 0x76, 0x20, 0x89, 0x4b, 0xd1, 0x10, 0x58, 0xfa, 0x6c, 0x28, 0xed, 0xd7,
	0x41, 0x82, 0x5b, 0x3b, 0x4a, 0x70, 0x6b, 0xb2, 0x3f, 0xc3, 0xfe, 0x01, 0xaf, 0xbb, 0x20, 0x42,
	0x58, 0x34, 0x58, 0x66, 0xe6, 0x97, 0x37, 0x08, 0xf6, 0x31, 0xa8, 0xa1, 0x2c, 0x1a, 0x41, 0x33,
	0x33, 0x1c, 0x41, 0x60, 0x0c, 0x86, 0x0e, 0x8c, 0xd5, 0xd3, 0x81, 0xb1, 0x99, 0xae, 0xf5, 0x1c,
	0x3e, 0x58, 0xf6, 0xb1, 0x1e, 0x2c, 0x9b, 0xed, 0xdd, 0x15, 0x03, 0x06, 0xd0, 0x0e, 0xb2, 0x01,
	0xb4, 0xb9, 0xae, 0x05, 0x9c, 0x36, 0xa8, 0xf6, 0xe3, 0x02, 0x98, 0xa3, 0x5f, 0x34, 0x68, 0x67,
	0x2e, 0x73, 0xf4, 0x91, 0xb6, 0x8f, 0x41, 0x8d, 0x97, 0xd1, 0x80, 0x5e, 0xaf, 0xfe, 0x1c, 0x2c,
	0xfa, 0xf6, 0x31, 0xa8, 0x31, 0x34, 0x1a, 0xc6, 0xeb, 0xc1, 0xfc, 0x34, 0x11, 0xb9, 0xa5, 0x21,
	0x22, 0x72, 0x77, 0x65, 0x44, 0xce, 0xea, 0x3d, 0x45, 0x73, 0x44, 0xe9, 0x3e, 0x04, 0x25, 0xdc,
	0x46, 0x23, 0x7c, 0x66, 0x7e, 0xa7, 0x89, 0xdc, 0x5d, 0x18, 0x28, 0x72, 0x67, 0x8c, 0xa2, 0xad,
	0x8c, 0x2a, 0x8a, 0xf6, 0x04, 0x0c, 0x51, 0x2f, 0x1a, 0x44, 0x33, 0xb7, 0x7b, 0x64, 0x81, 0x35,
	0x53, 0xc1, 0x2c, 0xae, 0x36, 0x48, 0xc1, 0x43, 0xc4, 0xda, 0x4c, 0x05, 0xb3, 0x50, 0xdb, 0x20,
	0x05, 0x0f, 0x11, 0x7e, 0x33, 0x15, 0xcc, 0xa2, 0x6f, 0x83, 0x14, 0x3c, 0x44, 0x44, 0xce, 0x54,
	0x30, 0x0b, 0xc8, 0x0d, 0x52, 0xf0, 0x10, 0x41, 0x3a, 0x53, 0xc1, 0x2c, 0x46, 0x37, 0x48, 0xc1,
	0x43, 0xc4, 0xed, 0x4c, 0x05, 0xb3, 0xb0, 0xdd, 0x20, 0x05, 0x0f, 0x11, 0xca, 0x33, 0x15, 0xcc,
	0x22, 0x79, 0x83, 0x14, 0x3c, 0x44, 0x74, 0xcf, 0x54, 0x30, 0x0b, 0xee, 0x0d, 0x52, 0xf0, 0x10,
	0x01, 0x3f, 0x43, 0xc1, 0x3c, 0xde, 0x37, 0x40, 0xc1, 0x43, 0xc4, 0x00, 0xd1, 0x47, 0x30, 0x4e,
	0x39, 0x52, 0xc7, 0xcb, 0x65, 0x71, 0x80, 0x22, 0x73, 0xbc, 0x3c, 0xb7, 0x2d, 0x1d, 0x2f, 0xcf,
	0x6d, 0x23, 0x4c, 0x40, 0x94, 0xd0, 0x7e, 0x4a, 0x6d, 0x6e, 0x41, 0x68, 0x3f, 0x55, 0x08, 0xed,
	0xa7, 0x84, 0xd0, 0x7e, 0x8a, 0xfe, 0x7d, 0x01, 0x16, 0xab, 0x7e, 0x18, 0x53, 0x9f, 0x43, 0x38,
	0x1b, 0xa3, 0xd9, 0x37, 0xb7, 0xde, 0x86, 0x29, 0xb6, 0x11, 0xb3, 0x7f, 0xa4, 0x1e, 0x59, 0xa4,
	0xb0, 0xdb, 0xca, 0xf9, 0x72, 0x0e, 0x20, 0xc6, 0x32, 0xfb, 0x47, 0x16, 0xca, 0x86, 0x1b, 0x32,
	0x0b, 0x9e, 0x3b, 0x00, 0x74, 0xa1, 0x4c, 0x80, 0x72, 0xa1, 0x4c, 0x40, 0x08, 0x4b, 0x34, 0xfa,
	0x49, 0x01, 0xae, 0x3e, 0xd8, 0xaf, 0x3a, 0xf5, 0x4e, 0xe8, 0xc6, 0x47, 0x1b, 0xa1, 0xdf, 0x09,
	0xb4, 0xb8, 0xcd, 0x63, 0x2d, 0x4a, 0xf4, 0x42, 0xba, 0x81, 0xe9, 0x7c, 0xcc, 0xfa, 0x8b, 0x54,
	0xb0, 0xb4, 0xfe, 0x34, 0x30, 0xc2, 0x3a, 0x19, 0xfa, 0xd5, 0x02, 0x54, 0xf8, 0xf1, 0x84, 0xae,
	0xb5, 0x71, 0xf5, 0xfe, 0x3e, 0xcb, 0xea, 0xfc, 0xf3, 0x49, 0x1a, 0x84, 0x4d, 0x73, 0xfc, 0xd2,
	0xb8, 0x72, 0x37, 0x61, 0xf2, 0x90, 0xd8, 0x6b, 0x6e, 0x83, 0x3b, 0x71, 0x2c, 0xaa, 0xb6, 0xed,
	0xc4, 0xea, 0xad, 0x54, 0x96, 0x46, 0x98, 0x23, 0xd2, 0x0e, 0xc3, 0xf8, 0xd0, 0x0e, 0x43, 0x07,
	0xe6, 0x1f, 0xb9, 0xa1, 0xf3, 0xc4, 0x6e, 0xb5, 0x6a, 0x61, 0xa7, 0xe5, 0x44, 0x3c, 0xe0, 0xf4,
	0x92, 0x29, 0xf0, 0xc7, 0x3b, 0x19, 0x77, 0x5a, 0x8e, 0x1c, 0x35, 0x91, 0x9d, 0x40, 0x23, 0x39,
	0x6a, 0x1a, 0x18, 0x61, 0x9d, 0xcc, 0x7a, 0x04, 0x2b, 0xd4, 0x81, 0xe5, 0x1c, 0x6b, 0x4d, 0x32,
	0x6e, 0xa4, 0x0f, 0xd8, 0xd1, 0x3c, 0xaa, 0x68, 0x88, 0x97, 0xaa, 0x0d, 0x6b, 0x43, 0x2a, 0x9a,
	0x2c, 0x0e, 0x61, 0x43, 0x06, 0xab, 0x0d, 0x97, 0x0c, 0xe5, 0x28, 0xa7, 0xf7, 0xe8, 0x6e, 0x43,
	0x3a, 0x23, 0x1f, 0xc1, 0xab, 0xe6, 0xb2, 0xd8, 0x38, 0x1a, 0x33, 0x19, 0xe2, 0x77, 0xd3, 0xe7,
	0x7a, 0x82, 0x0e, 0xce, 0x6d, 0x0b, 0x65, 0x66, 0x24, 0x5b, 0x28, 0x7f, 0x50, 0x4c, 0xe2, 0xde,
	0x29, 0xe1, 0xb2, 0xde, 0x85, 0xe9, 0x47, 0xa1, 0xef, 0xd5, 0x02, 0x3f, 0x14, 0x21, 0x42, 0xea,
	0xfb, 0xbf, 0x1f, 0xfa, 0xde, 0xae, 0x1f, 0xc6, 0xd2, 0xf7, 0x17, 0x10, 0x84, 0x13, 0x24, 0x99,
	0x56, 0xb1, 0xcf, 0xf2, 0x16, 0xe5, 0xb4, 0x7a, 0xe0, 0xf3, 0x9c, 0x7c, 0x5a, 0xb1, 0x34, 0xc2,
	0x1c, 0x61, 0xad, 0xc3, 0x8c, 0x1b, 0xd4, 0xe8, 0x25, 0xf5, 0xba, 0xdf, 0x52, 0xaf, 0x5a, 0x6c,
	0xee, 0xee, 0x72, 0xa8, 0x74, 0x17, 0x24, 0x0c, 0x61, 0x85, 0x40, 0x57, 0xf6, 0x63, 0x52, 0xd9,
	0xaf, 0x67, 0x95, 0xfd, 0xba, 0xa2, 0xec, 0x93, 0xff, 0x44, 0x2d, 0xd5, 0xdd, 0x46, 0xc8, 0xa7,
	0x35, 0x55, 0x4b, 0x6b, 0x9b, 0xeb, 0x58, 0xaa, 0x25, 0x92, 0x42, 0x98, 0x02, 0xd1, 0x3f, 0x2b,
	0xc0, 0xf3, 0x29, 0x05, 0x78, 0x9a, 0xed, 0xa8, 0xa6, 0xb6, 0x1d, 0x55, 0xe9, 0xa5, 0xb9, 0xb1,
	0xf3, 0xe9, 0x29, 0x14, 0xf7, 0xaf, 0x95, 0xe8, 0x11, 0xba, 0x14, 0xc3, 0x2f, 0xc2, 0xde, 0x95,
	0xa2, 0x92, 0x4b, 0x43, 0xab, 0xe4, 0xb1, 0x11, 0xaa, 0xe4, 0xf1, 0x73, 0x50, 0xc9, 0xec, 0x44,
	0xe3, 0x1e, 0x69, 0x4b, 0xfe, 0x13, 0x8d, 0x82, 0x9c, 0x8d, 0x13, 0xe9, 0x08, 0x39, 0x4e, 0x24,
	0x85, 0x30, 0x05, 0xca, 0x13, 0x8d, 0x19, 0xfe, 0x7d, 0x2c, 0xb3, 0xbc, 0x05, 0xfc, 0xee, 0x24,
	0x80, 0xa4, 0xfe, 0xd2, 0x2c, 0xfe, 0xef, 0x01, 0x90, 0x89, 0x5e, 0xdb, 0xa7, 0x5b, 0x29, 0x8a,
	0xaa, 0x20, 0xd0, 0xdb, 0x7c, 0x3b, 0x85, 0xab, 0x8a, 0x04, 0x84, 0xb0, 0x44, 0x5b, 0x31, 0x2c,
	0x46, 0x9d, 0x7d, 0x2a, 0xad, 0xed, 0x47, 0x3e, 0x5b, 0x04, 0x98, 0xb8, 0x5c, 0x33, 0x89, 0x0b,
	0x25, 0xa5, 0x1d, 0x4a, 0xeb, 0x1d, 0x25, 0x69, 0xbe, 0x3a, 0xf0, 0x7a, 0xeb, 0x70, 0x84, 0x53,
	0x84, 0x69, 0x59, 0x9f, 0x18, 0x5a, 0xd6, 0x57, 0x61, 0x86, 0xac, 0xcf, 0x62, 0xba, 0x4d, 0x2a,
	0x3d, 0x10, 0x05, 0x7b, 0x62, 0xc6, 0x2d, 0x26, 0x0b, 0xf1, 0x1e, 0x9f, 0x74, 0x12, 0x2d, 0x62,
	0xe1, 0x94, 0x85, 0xb2, 0xb0, 0x8b, 0x58, 0x38, 0xa1, 0xca, 0xc4, 0xc2, 0x05, 0x90, 0xc5, 0xc2,
	0x45, 0x4a, 0xb9, 0x58, 0x34, 0x2d, 0xe7, 0x7d, 0x94, 0xba, 0x58, 0x94, 0xbe, 0xfb, 0x99, 0x5d,
	0xf2, 0xe1, 0x5c, 0x97, 0xfc, 0x99, 0x73, 0x5b, 0xf2, 0x67, 0x47, 0xb2, 0xe4, 0xff, 0x19, 0x71,
	0xd0, 0x52, 0xd2, 0x78, 0x9a, 0x7b, 0x64, 0xdf, 0x85, 0x69, 0x37, 0x38, 0xbc, 0x59, 0xa3, 0x2b,
	0x66, 0x51, 0x0a, 0xd0, 0xe6, 0xee, 0xe1, 0xcd, 0x1a, 0x5f, 0x36, 0x17, 0xc5, 0x82, 0xcd, 0x41,
	0x08, 0x4b, 0xb4, 0x61, 0x00, 0x4b, 0x67, 0xb0, 0xe7, 0xca, 0x0e, 0x8b, 0x10, 0x51, 0x3b, 0xbb,
	0xc3, 0x22, 0x84, 0x7b, 0x72, 0x58, 0xa4, 0xbb, 0xb2, 0xfc, 0x69, 0x09, 0xa6, 0x13, 0xe2, 0x2f,
	0xc2, 0x82, 0xab, 0xab, 0xc1, 0xd2, 0x10, 0x6a, 0xf0, 0x89, 0x41, 0x0d, 0x8e, 0x19, 0x7c, 0x4f,
	0x55, 0xf0, 0xb0, 0xf3, 0xe9, 0xc8, 0x35, 0xe1, 0xd0, 0x8e, 0x18, 0xfa, 0x1f, 0x05, 0x58, 0x36,
	0xd4, 0xce, 0x34, 0x3c, 0xdd, 0xcf, 0x3d, 0x7c, 0x49, 0xe6, 0x02, 0x35, 0x35, 0xb6, 0xea, 0x6e,
	0x34, 0x80, 0xa9, 0x21, 0xc8, 0x59, 0x17, 0x78, 0x75, 0x37, 0x92, 0x5d, 0x40, 0x52, 0x08, 0x53,
	0xa0, 0x34, 0x35, 0x32, 0xfc, 0xfb, 0x98, 0x1a, 0x79, 0x0b, 0xf8, 0xe9, 0x38, 0x31, 0x35, 0x04,
	0xf5, 0x19, 0x98, 0x1a, 0x72, 0x15, 0x9a, 0xcc, 0xbf, 0x0a, 0xdd, 0x83, 0xb9, 0xd8, 0x0e, 0x9b,
	0x4e, 0x2c, 0x76, 0x19, 0xa6, 0xe4, 0xeb, 0x0f, 0x0c, 0x91, 0xec, 0x30, 0xf0, 0x01, 0x52, 0xa1,
	0x08, 0x6b, 0x44, 0x0a, 0x37, 0x9b, 0x79, 0x31, 0xd3, 0x69, 0x6e, 0xab, 0xc2, 0x91, 0xd1, 0xb8,
	0xad, 0x72, 0x5f, 0x46, 0x23, 0xa2, 0x8b, 0x49, 0x3b, 0x8a, 0x89, 0x3d, 0xeb, 0xf9, 0xed, 0x9a,
	0xdd, 0x74, 0xda, 0x31, 0xdf, 0xe3, 0x64, 0x8b, 0x09, 0x43, 0x6e, 0xf9, 0xed, 0x55, 0x82, 0x52,
	0x16, 0x13, 0x1d, 0x41, 0x16, 0x13, 0x1d, 0x62, 0xbd, 0x06, 0xe3, 0x2d, 0x7b, 0xdf, 0x69, 0x71,
	0x13, 0x84, 0x9e, 0xf4, 0xa0, 0x00, 0x79, 0xd2, 0x83, 0x26, 0x11, 0x66, 0x60, 0x6b, 0x17, 0xe6,
	0x83, 0x96, 0x5d, 0x77, 0x3c, 0xa7, 0x1d, 0xd7, 0xec, 0x56, 0xd3, 0xe7, 0x56, 0x17, 0xb5, 0x9b,
	0x13, 0xcc, 0x6a, 0xab, 0xe9, 0x4b, 0xbb, 0x59, 0x03, 0x23, 0xac, 0x93, 0x8d, 0x2e, 0x14, 0xf3,
	0x6d, 0x28, 0x1e, 0x7a, 0xc6, 0xf9, 0xf6, 0x60, 0x7f, 0xcf, 0x93, 0xaf, 0x4b, 0x1d, 0x7a, 0x52,
	0xc0, 0x0e, 0x3d, 0x84, 0x8b, 0x87, 0x1e, 0xfa, 0x77, 0x8b, 0x30, 0x25, 0xa8, 0xce, 0x40, 0x24,
	0x57, 0x61, 0xe6, 0xd0, 0x93, 0x41, 0x1a, 0x45, 0x43, 0x1f, 0x7a, 0x32, 0x36, 0xb3, 0x28, 0xea,
	0x94, 0x84, 0x64, 0x24, 0xda, 0x7a, 0x08, 0x53, 0x2d, 0xbf, 0x6e, 0x27, 0xbe, 0x51, 0xfa, 0x9e,
	0xdb, 0x86, 0xe3, 0xdf, 0xe3, 0x78, 0xe6, 0xe7, 0x0b, 0x6a, 0xe9, 0xe7, 0x0b, 0x08, 0xc2, 0x09,
	0x52, 0x99, 0x2c, 0xe3, 0xa7, 0x98, 0x2c, 0x13, 0x23, 0x9d, 0x2c, 0x93, 0xa7, 0x99, 0x2c, 0x0f,
	0x61, 0x31, 0x99, 0x24, 0xfa, 0x5c, 0xa6, 0xeb, 0x94, 0xc7, 0x25, 0x3f, 0xa9, 0x20, 0x5f, 0xa7,
	0x74, 0x38, 0xc2, 0x29, 0x42, 0x22, 0xf7, 0xfc, 0x19, 0x3b, 0xf1, 0x4c, 0xdb, 0xb4, 0x94, 0x7b,
	0x86, 0xd9, 0x4a, 0x1e, 0x6b, 0x13, 0xfe, 0xbb, 0x0a, 0x26, 0xfe, 0xbb, 0x9a, 0xb6, 0x3e, 0x00,
	0xf6, 0x0c, 0x8b, 0xd3, 0xa8, 0xc5, 0xae, 0xe7, 0xa8, 0x87, 0x16, 0x38, 0xfc, 0x81, 0xab, 0x99,
	0xdd, 0x12, 0x48, 0xcc, 0x6e, 0x99, 0x92, 0x93, 0x78, 0x26, 0xe7, 0x24, 0x4e, 0x4d, 0xb9, 0xd9,
	0xa1, 0xa7, 0xdc, 0xbd, 0xe4, 0x24, 0xe2, 0x9c, 0x61, 0xd1, 0x61, 0x27, 0x0f, 0xe5, 0x51, 0xc7,
	0x30, 0x75, 0x44, 0x31, 0x14, 0x47, 0x14, 0xd9, 0x1f, 0xeb, 0x5d, 0xe0, 0x37, 0x72, 0x6b, 0x6e,
	0x40, 0x0f, 0x10, 0xf0, 0x88, 0x15, 0x03, 0x6e, 0xee, 0x4a, 0x49, 0x16, 0x10, 0x84, 0x13, 0xa4,
	0xf5, 0x36, 0x4c, 0x45, 0xd1, 0x63, 0x16, 0xb2, 0x5a, 0x90, 0x9b, 0x0b, 0x51, 0xf4, 0x98, 0xc7,
	0xac, 0xe6, 0x93, 0xfb, 0x9e, 0x2c, 0x68, 0x25, 0x50, 0xca, 0xf5, 0xe1, 0x46, 0x9b, 0xed, 0xf0,
	0x6b, 0xd7, 0x87, 0xd7, 0xb7, 0xab, 0xe9, 0xeb, 0xc3, 0xeb, 0xdb, 0xd5, 0xe4, 0xfa, 0xf0, 0xfa,
	0x76, 0x95, 0x72, 0xe0, 0xd7, 0x87, 0xdd, 0x40, 0xdd, 0xc8, 0xe7, 0x50, 0x5a, 0xf7, 0x45, 0xed,
	0xf2, 0x30, 0xa9, 0xbc, 0x44, 0xab, 0x17, 0x90, 0x49, 0x25, 0xac, 0xcc, 0x05, 0x64, 0x56, 0x0b,
	0xfd, 0x02, 0x32, 0xad, 0x86, 0x42, 0x60, 0xdd, 0x81, 0xd9, 0x43, 0xaf, 0xb6, 0xef, 0xfb, 0x71,
	0xad, 0xe1, 0x46, 0x07, 0x74, 0x0f, 0x9f, 0xb3, 0x39, 0xf4, 0x6e, 0xfb, 0x7e, 0xbc, 0xee, 0x46,
	0x07, 0x92, 0x8d, 0x84, 0x21, 0xac, 0x10, 0x10, 0x97, 0x90, 0xb0, 0x21, 0x96, 0x21, 0xe3, 0x73,
	0x41, 0x4a, 0xc8, 0xa1, 0x47, 0x2d, 0x46, 0xce, 0xc8, 0x4a, 0x18, 0x09, 0x20, 0xc2, 0x2a, 0x89,
	0xc9, 0xe0, 0x5d, 0x19, 0x49, 0x84, 0x89, 0x9e, 0xdd, 0x72, 0x1b, 0xf4, 0x02, 0x8f, 0x50, 0x5b,
	0x81, 0x53, 0x57, 0x23, 0x4c, 0x2c, 0x4d, 0xd4, 0x16, 0xfd, 0x43, 0x24, 0x24, 0x79, 0x75, 0xe1,
	0x92, 0x94, 0x10, 0x37, 0x79, 0x72, 0x61, 0x5e, 0x79, 0xb6, 0x83, 0x64, 0x14, 0x28, 0x35, 0xa2,
	0x55, 0xce, 0x1f, 0xd1, 0x7a, 0x17, 0xa6, 0x85, 0x51, 0xdd, 0x28, 0x5f, 0x96, 0xf2, 0xcc, 0x4d,
	0x60, 0xe5, 0xe9, 0x4b, 0x01, 0x41, 0x38, 0x41, 0x5a, 0x9f, 0x80, 0x95, 0x09, 0xef, 0x47, 0xe5,
	0x2b, 0xd4, 0x5b, 0xa5, 0x87, 0x1f, 0x22, 0x3d, 0x56, 0xaf, 0x1c, 0x7e, 0x48, 0x63, 0x10, 0xce,
	0x10, 0x5b, 0xdf, 0x01, 0x10, 0x0f, 0x0d, 0xb8, 0x8d, 0xf2, 0x55, 0xa5, 0x76, 0xec, 0x05, 0x06,
	0xb5, 0x76, 0x1c, 0x42, 0x6a, 0xc7, 0xff, 0x5a, 0xf7, 0x61, 0xe1, 0xd0, 0x63, 0x77, 0xf9, 0xed,
	0x3a, 0x3b, 0x86, 0xfa, 0xbc, 0x54, 0x88, 0x87, 0xde, 0xc3, 0xc8, 0x09, 0x57, 0x19, 0x42, 0x2a,
	0x44, 0x0d, 0x8c, 0xb0, 0x4e, 0x46, 0x34, 0xb7, 0x60, 0x19, 0xd8, 0x51, 0xf4, 0xc4, 0x0f, 0x1b,
	0xe5, 0x6b, 0x52, 0x56, 0x18, 0xf1, 0x2e, 0xc7, 0x48, 0x59, 0xd1, 0xe1, 0x08, 0xa7, 0x08, 0xad,
	0x0e, 0x58, 0x34, 0xbe, 0xe1, 0x3a, 0x4f, 0x6a, 0x87, 0x5e, 0xad, 0xe1, 0xc4, 0xb6, 0xdb, 0x2a,
	0x5f, 0x37, 0x3c, 0x8f, 0xc1, 0xcf, 0xf4, 0x6e, 0x51, 0x8d, 0x45, 0x2d, 0xab, 0x7a, 0x14, 0xec,
	0xb9, 0xce, 0x93, 0x3d, 0x6f, 0x9d, 0xe6, 0x92, 0x96, 0x55, 0x0a, 0x81, 0x70, 0x9a, 0x14, 0xfd,
	0xe7, 0x22, 0xcc, 0x28, 0x6b, 0xb2, 0xf5, 0x0e, 0x4c, 0xb5, 0xec, 0xd8, 0x8d, 0x3b, 0x0d, 0x47,
	0x8d, 0xc6, 0x0b, 0x98, 0xb2, 0x4a, 0x73, 0x08, 0x59, 0xa5, 0xf9, 0x5f, 0xe2, 0x97, 0xb4, 0xfc,
	0x76, 0x93, 0xe5, 0x56, 0xfc, 0x92, 0x04, 0x28, 0xd5, 0x4b, 0x02, 0x42, 0x58, 0xa2, 0x89, 0x82,
	0xda, 0x0f, 0x5d, 0xe7, 0x51, 0xcd, 0x6e, 0x34, 0x42, 0xd5, 0xfe, 0xa0, 0xd0, 0xd5, 0x46, 0x23,
	0x94, 0x1c, 0x12, 0x10, 0xc2, 0x12, 0x4d, 0x7d, 0xcc, 0x96, 0xdf, 0x69, 0xb0, 0xa3, 0x8e, 0x6a,
	0xa8, 0x8d, 0x40, 0xf9, 0x73, 0x81, 0xc2, 0xc7, 0x14, 0x20, 0xe2, 0x63, 0x8a, 0xff, 0x64, 0x9d,
	0x6f, 0xdb, 0xb1, 0x7b, 0xe8, 0xd4, 0xf8, 0x9a, 0x31, 0x2e, 0xd7, 0x79, 0x86, 0x48, 0xce, 0xb0,
	0x2f, 0x0b, 0x13, 0x4a, 0x42, 0x11, 0xd6, 0x88, 0x50, 0x1b, 0x40, 0xae, 0x2f, 0x43, 0x1f, 0x89,
	0xff, 0xcc, 0x6f, 0x6b, 0x26, 0xdc, 0x0f, 0xfc, 0xb6, 0x62, 0xc2, 0x91, 0x14, 0xc2, 0x14, 0x88,
	0xfe, 0xd5, 0x02, 0xcc, 0xaa, 0x02, 0x32, 0x98, 0x63, 0xf9, 0x1e, 0x80, 0xf2, 0xb2, 0x9c, 0xea,
	0x59, 0x2a, 0xcf, 0xca, 0x09, 0xcf, 0x52, 0xbe, 0x29, 0x27, 0xd1, 0x44, 0x79, 0x1d, 0x06, 0xda,
	0x5d, 0x10, 0xaa, 0xbc, 0xf6, 0x76, 0xd7, 0x78, 0x6e, 0xae, 0xbc, 0x38, 0x00, 0x61, 0x81, 0x22,
	0x4b, 0x0b, 0x57, 0x43, 0xca, 0x51, 0x57, 0xba, 0x26, 0x30, 0x4f, 0x99, 0xe7, 0xe7, 0x6b, 0x82,
	0x84, 0x21, 0xac, 0x10, 0x58, 0x0e, 0x5c, 0x30, 0xec, 0x02, 0xb2, 0xd8, 0x3a, 0xdf, 0x70, 0xcc,
	0x6c, 0xe7, 0x45, 0x72, 0xc3, 0x31, 0x8b, 0x43, 0xd8, 0x90, 0x81, 0x2c, 0x3d, 0x44, 0x25, 0x05,
	0xb6, 0x1b, 0xaa, 0xaf, 0xf0, 0xd1, 0xa5, 0xe7, 0xae, 0x73, 0xb4, 0x6b, 0xbb, 0xa1, 0x1e, 0x8d,
	0x54, 0x80, 0x08, 0xab, 0x24, 0x7c, 0x31, 0x94, 0x67, 0x7c, 0x27, 0x65, 0xc3, 0xf7, 0xb6, 0x94,
	0x23, 0xbe, 0xbc, 0xe1, 0x12, 0x86, 0xb0, 0x42, 0x40, 0x14, 0xa5, 0x50, 0x4b, 0x6e, 0x83, 0x9b,
	0x92, 0x74, 0xea, 0xee, 0x6d, 0x11, 0x3d, 0xa3, 0x2a, 0x4a, 0x01, 0x41, 0x38, 0x41, 0x5a, 0x5b,
	0x30, 0xaf, 0x69, 0xb5, 0x86, 0xea, 0x0b, 0x32, 0x2a, 0xaa, 0xaa, 0x1a, 0x52, 0xec, 0x55, 0x28,
	0xc2, 0x1a, 0x91, 0x08, 0xf4, 0xc1, 0x10, 0x81, 0xbe, 0x6d, 0x98, 0xe6, 0xcb, 0x9f, 0xdb, 0xe0,
	0xe7, 0x5a, 0xb3, 0x0c, 0x68, 0xcb, 0xd8, 0x1b, 0x43, 0x6a, 0xcb, 0x04, 0x04, 0xe1, 0x04, 0x69,
	0xbd, 0x0f, 0x93, 0x44, 0x22, 0x09, 0xb7, 0xd9, 0x2e, 0xdc, 0xe8, 0x34, 0xdc, 0x0b, 0xea, 0x9b,
	0x9b, 0xeb, 0x72, 0x1a, 0xb2, 0x34, 0xc2, 0x1c, 0x61, 0x61, 0x00, 0xb1, 0x4c, 0xba, 0x0d, 0x6e,
	0x48, 0x66, 0x59, 0xd1, 0xd9, 0xc2, 0x23, 0x9e, 0x94, 0xdb, 0xa2, 0x2a, 0xaf, 0x94, 0xa1, 0x44,
	0x5b, 0x11, 0x2c, 0xa7, 0x17, 0x4f, 0xb2, 0x7a, 0xce, 0x53, 0xe7, 0x30, 0xcb, 0xfc, 0x8d, 0x93,
	0xe3, 0xca, 0x92, 0xbe, 0xf7, 0xcd, 0x16, 0xd4, 0xb2, 0x41, 0x7a, 0x37, 0xe9, 0x8a, 0x9a, 0x25,
	0xb7, 0x3e, 0x84, 0xd9, 0x44, 0x76, 0x49, 0x53, 0x16, 0xba, 0x34, 0x85, 0x8a, 0x20, 0x97, 0xd4,
	0x4d, 0xf5, 0xad, 0x27, 0x09, 0x43, 0x58, 0x21, 0x20, 0xda, 0x23, 0x8a, 0xed, 0x30, 0x66, 0x8e,
	0x82, 0x62, 0xa0, 0x56, 0x09, 0x94, 0xbb, 0x09, 0x8b, 0xc9, 0xbb, 0x5d, 0x0c, 0x44, 0xfa, 0x43,
	0xfc, 0x57, 0x0c, 0xf5, 0xa5, 0x1c, 0x86, 0x7a, 0x3f, 0xc5, 0xf9, 0x43, 0x58, 0x6a, 0x3b, 0xf1,
	0x13, 0x3f, 0x3c, 0xa8, 0xb9, 0xed, 0xd8, 0x09, 0x1f, 0xd9, 0x75, 0x87, 0x9b, 0xac, 0xd4, 0x32,
	0xd9, 0x66, 0xc8, 0x4d, 0x81, 0x93, 0x96, 0x49, 0x1a, 0x83, 0x70, 0x86, 0x58, 0x77, 0x03, 0x96,
	0xe5, 0x7c, 0xdb, 0xcd, 0xb8, 0x01, 0xbb, 0xd2, 0x0d, 0x10, 0x7f, 0x53, 0xc6, 0xfc, 0x05, 0xd9,
	0x57, 0xbb, 0x59, 0x63, 0x7e, 0x57, 0x31, 0xe6, 0x77, 0xbb, 0x18, 0xf3, 0x2b, 0x0a, 0x87, 0xac,
	0x31, 0xbf, 0xab, 0x18, 0xf3, 0xbb, 0xdd, 0x8c, 0xf9, 0x8b, 0x52, 0xf1, 0xec, 0x1a, 0x8c, 0xf9,
	0x5d, 0xd5, 0x98, 0xdf, 0xed, 0x6e, 0xcc, 0x5f, 0x52, 0xf5, 0x57, 0xd6, 0x98, 0x97, 0x30, 0xaa,
	0xbf, 0xba, 0x1b, 0xf3, 0x65, 0xa9, 0x51, 0xf7, 0xb6, 0x0c, 0xc6, 0xbc, 0x02, 0x44, 0x58, 0x25,
	0x21, 0x16, 0x1a, 0xb1, 0x19, 0xed, 0x7a, 0xdd, 0x89, 0xa2, 0x5a, 0xe0, 0xbb, 0xed, 0x98, 0xdb,
	0xb5, 0xd4, 0x42, 0xab, 0x56, 0x3f, 0x58, 0xa5, 0xa8, 0x5d, 0x9f, 0x3d, 0x2a, 0xc5, 0x2d, 0x34,
	0x1d, 0x8e, 0x70, 0x8a, 0xd0, 0x10, 0x34, 0xbd, 0x72, 0x66, 0x1b, 0x08, 0x5b, 0x75, 0x37, 0x3a,
	0xbb, 0x0d, 0x04, 0xc2, 0x3d, 0xd9, 0x40, 0xe8, 0x1e, 0x02, 0xfd, 0x19, 0xdd, 0x40, 0xe0, 0xc4,
	0x83, 0x6d, 0x20, 0x18, 0x63, 0x81, 0xc5, 0xd1, 0xc6, 0x02, 0x4b, 0x5f, 0xfe, 0x58, 0xe0, 0x2d,
	0x1a, 0x0b, 0x64, 0x47, 0xb1, 0x2e, 0x64, 0x62, 0x81, 0xc9, 0xa3, 0xeb, 0xa6, 0x50, 0xe0, 0xff,
	0x9b, 0x80, 0x49, 0x4e, 0x34, 0xd8, 0xd0, 0xb0, 0x89, 0xc6, 0x56, 0x9b, 0xc8, 0xfd, 0x4c, 0xbb,
	0xfa, 0xc5, 0xe3, 0x78, 0x55, 0xf7, 0x33, 0x47, 0xf5, 0x9a, 0x13, 0x20, 0xf5, 0x9a, 0x93, 0xd4,
	0xe0, 0x43, 0x31, 0xb2, 0xc3, 0x13, 0x06, 0x7f, 0x7d, 0x7c, 0xa4, 0xfe, 0xfa, 0xc4, 0x70, 0xfe,
	0xfa, 0xe4, 0xb0, 0xfe, 0xfa, 0xd4, 0x90, 0xfe, 0xfa, 0xf4, 0x68, 0xfc, 0x75, 0x38, 0x1b, 0x7f,
	0x7d, 0x66, 0x04, 0xfe, 0xfa, 0xec, 0x19, 0xf8, 0xeb, 0x73, 0xa7, 0xf6, 0xd7, 0x91, 0x0b, 0xcf,
	0xcb, 0x0d, 0x28, 0x16, 0x7d, 0xed, 0xf5, 0x66, 0xba, 0x7e, 0x37, 0x59, 0xcf, 0xd3, 0x4f, 0x0f,
	0xff, 0x22, 0x94, 0xbb, 0x16, 0xd3, 0xeb, 0xda, 0x78, 0xaa, 0x94, 0x3c, 0x31, 0x73, 0xf4, 0xbb,
	0xe3, 0x30, 0xaf, 0xe7, 0x3b, 0xd3, 0xad, 0xaf, 0xd2, 0x29, 0xa2, 0xf9, 0x63, 0x23, 0x8d, 0xe6,
	0x8f, 0x8f, 0x7c, 0xeb, 0x6b, 0x62, 0x24, 0xcb, 0xdd, 0x1d, 0x98, 0xf5, 0xec, 0x28, 0x76, 0xc2,
	0xda, 0xa1, 0x27, 0x35, 0x0c, 0x35, 0xaf, 0x18, 0x7c, 0xcf, 0x53, 0x6d, 0x73, 0x09, 0x43, 0x58,
	0x21, 0x20, 0x4a, 0x83, 0xb3, 0x71, 0x03, 0xd5, 0x3b, 0x64, 0xc0, 0xcd, 0x40, 0x4e, 0x4b, 0x01,
	0x41, 0x38, 0x41, 0x92, 0x69, 0xc9, 0x73, 0x27, 0xb1, 0x6b, 0x65, 0x5f, 0x81, 0xa1, 0xaa, 0xd5,
	0x0f, 0x78, 0x04, 0xfb, 0x82, 0xca, 0x88, 0x83, 0x11, 0xd6, 0xc9, 0xac, 0xf7, 0xe8, 0xd2, 0x07,
	0x86, 0xc9, 0x41, 0x56, 0x35, 0x45, 0x6c, 0xbb, 0xae, 0x80, 0x7f, 0x30, 0x09, 0xf3, 0x3a, 0xed,
	0x19, 0x88, 0xea, 0x2d, 0x98, 0xa6, 0x61, 0x39, 0x4f, 0x6e, 0x88, 0x51, 0xed, 0x5e, 0x8f, 0x02,
	0xde, 0xf1, 0xf3, 0x32, 0xd4, 0x46, 0x7b, 0x5d, 0xa0, 0x14, 0x29, 0x1f, 0x3b, 0x85, 0x94, 0x8f,
	0x8f, 0x54, 0xca, 0x27, 0x4e, 0x23, 0xe5, 0x32, 0x32, 0xa6, 0x6d, 0x5c, 0x2b, 0x91, 0xb1, 0x74,
	0xdd, 0x54, 0x68, 0x12, 0x19, 0xe3, 0x75, 0xfb, 0x39, 0xdc, 0x01, 0xd3, 0x5c, 0xc6, 0x99, 0xcc,
	0xce, 0x51, 0x90, 0xd9, 0x39, 0x0a, 0xe4, 0xce, 0x51, 0x90, 0x72, 0xf8, 0x66, 0xb3, 0xbb, 0x37,
	0x41, 0x76, 0xf7, 0x26, 0x50, 0x76, 0x6f, 0x02, 0x6d, 0xef, 0x69, 0x6e, 0xa0, 0xbd, 0x27, 0x75,
	0x5b, 0x77, 0x7e, 0x64, 0xdb, 0xba, 0x68, 0x4d, 0xf8, 0x3a, 0xa7, 0xf8, 0x4e, 0x0c, 0xfa, 0x47,
	0x89, 0xc7, 0xc4, 0xe4, 0x74, 0x38, 0x8f, 0xe9, 0x26, 0x4c, 0x92, 0xc5, 0x56, 0xbe, 0xe4, 0x42,
	0xa7, 0x2b, 0x01, 0xa9, 0xb6, 0x18, 0x4b, 0x23, 0xcc, 0x11, 0x64, 0x8e, 0xdb, 0xea, 0x6d, 0x1f,
	0x9a, 0xc9, 0x16, 0x73, 0x8a, 0x67, 0xb2, 0xf9, 0x6c, 0xe2, 0x08, 0x74, 0x08, 0x8b, 0xac, 0xbe,
	0x43, 0xbf, 0x5b, 0x3f, 0x54, 0x65, 0xd1, 0x0f, 0x49, 0xb9, 0xec, 0xf0, 0x40, 0x97, 0xef, 0xc7,
	0x74, 0x39, 0x8f, 0x90, 0x70, 0xa7, 0x6a, 0x58, 0xe1, 0x4e, 0x54, 0x31, 0x47, 0xa0, 0x7f, 0x43,
	0x1f, 0x6d, 0xdd, 0xf3, 0x4e, 0xe3, 0xb6, 0x0e, 0x37, 0x08, 0xa2, 0x0d, 0xa5, 0x53, 0xb7, 0xe1,
	0x8f, 0x0b, 0x70, 0x91, 0xe4, 0x38, 0xf5, 0xf1, 0xfa, 0xe1, 0x1a, 0xf2, 0x3d, 0xad, 0x21, 0x66,
	0x87, 0x90, 0xdd, 0x49, 0x26, 0xf5, 0xa3, 0x0d, 0x11, 0x77, 0x92, 0x19, 0x00, 0x61, 0x81, 0x42,
	0x1e, 0xac, 0xe8, 0x8b, 0xa3, 0x18, 0xf1, 0x07, 0x3d, 0x2c, 0xc6, 0xd4, 0xd2, 0xcb, 0x0c, 0x77,
	0x9a, 0xa6, 0x85, 0x2d, 0xa8, 0x6b, 0x16, 0x29, 0x2d, 0x41, 0xa2, 0xdf, 0x29, 0xb0, 0xc5, 0xf8,
	0x7c, 0x45, 0x9a, 0x94, 0xa1, 0x2e, 0xcd, 0xec, 0x44, 0xa4, 0xa7, 0x96, 0x71, 0x48, 0x17, 0x65,
	0x0a, 0x44, 0x7f, 0xca, 0x45, 0xf4, 0xfc, 0xf5, 0xc4, 0x40, 0xf5, 0x54, 0xb4, 0xca, 0x58, 0x7e,
	0xad, 0xf2, 0x04, 0x2e, 0xb3, 0x50, 0x4d, 0xdd, 0xf7, 0x3c, 0xa7, 0xdd, 0xd0, 0xa6, 0xf9, 0x0f,
	0xb4, 0x41, 0xbf, 0x9e, 0x71, 0x13, 0xb4, 0x5c, 0x6c, 0x55, 0x09, 0x05, 0x48, 0xae, 0x2a, 0x09,
	0x08, 0x61, 0x89, 0x46, 0xff, 0xba, 0x08, 0x4b, 0x19, 0x1e, 0xd6, 0x01, 0x0d, 0x0b, 0x26, 0x54,
	0xdc, 0x0d, 0xba, 0x6e, 0x90, 0x69, 0xb5, 0x64, 0x6a, 0x4b, 0xa8, 0xf9, 0xa4, 0x2d, 0xa1, 0x42,
	0x11, 0xd6, 0x88, 0x0c, 0x21, 0x9e, 0xe2, 0x29, 0x43, 0x3c, 0x07, 0xb0, 0x20, 0x39, 0x06, 0x76,
	0x68, 0x7b, 0xbd, 0x8f, 0x48, 0x52, 0x9b, 0x25, 0xc9, 0xb1, 0x4b, 0x32, 0x48, 0x9b, 0x45, 0x87,
	0x23, 0x9c, 0x22, 0x44, 0x7f, 0xad, 0xc4, 0xe4, 0x52, 0xef, 0xc1, 0x1d, 0x98, 0xa0, 0x8d, 0xfc,
	0x94, 0x8f, 0xda, 0xb5, 0xee, 0x7d, 0x97, 0x7c, 0xf4, 0xe6, 0x90, 0xe8, 0x08, 0x19, 0x7d, 0xa1,
	0x49, 0x84, 0x19, 0xd8, 0xaa, 0xd1, 0xe3, 0x5d, 0x41, 0xe8, 0xfa, 0xc4, 0x65, 0xa7, 0x1f, 0x3c,
	0xc9, 0x7e, 0x0f, 0x61, 0xcf, 0xdb, 0xe5, 0x04, 0xe2, 0x40, 0x86, 0x48, 0xab, 0x07, 0x32, 0x04,
	0x8c, 0x1e, 0xc8, 0x10, 0x09, 0xc3, 0x30, 0x94, 0x46, 0x3f, 0x0c, 0x63, 0x67, 0x36, 0x0c, 0x3f,
	0x2b, 0xc0, 0xac, 0xda, 0x01, 0xd6, 0x3b, 0x30, 0x95, 0xf4, 0x96, 0xb2, 0x19, 0x1e, 0xc8, 0x0e,
	0x59, 0x48, 0xcc, 0x2d, 0xde, 0x1d, 0x09, 0xd2, 0xda, 0x82, 0x49, 0xbe, 0xaf, 0xd7, 0xef, 0x0d,
	0x72, 0xfe, 0xc0, 0x5a, 0x35, 0xf5, 0xc0, 0x5a, 0x55, 0x3c, 0xb0, 0x46, 0xff, 0xfc, 0xfd, 0x02,
	0x5c, 0xd1, 0x66, 0xd9, 0x69, 0x96, 0xa7, 0x8f, 0xb4, 0xf0, 0xf0, 0xb5, 0xee, 0xea, 0x80, 0x08,
	0xd6, 0x60, 0xda, 0xe0, 0x7f, 0x17, 0x61, 0x31, 0xcd, 0x42, 0x13, 0xe5, 0xd2, 0x28, 0x44, 0xf9,
	0xcb, 0x3d, 0xe1, 0xad, 0x2d, 0x98, 0xf7, 0xec, 0xa7, 0xfc, 0x71, 0xdf, 0x5a, 0xbb, 0xe3, 0xa9,
	0xc1, 0x0c, 0xcf, 0x7e, 0xca, 0x5e, 0xe7, 0xdd, 0xee, 0x78, 0x52, 0xfd, 0xa9, 0x50, 0x84, 0x35,
	0x22, 0xf4, 0x7b, 0x63, 0xcc, 0xb2, 0xd3, 0xfa, 0xfc, 0x03, 0x98, 0x0d, 0x99, 0x70, 0xa8, 0xaf,
	0x86, 0x51, 0xb7, 0x85, 0xc3, 0xf5, 0x1d, 0x6a, 0x05, 0x88, 0xb0, 0x4a, 0x62, 0xa8, 0x6d, 0xf1,
	0x14, 0xb5, 0x25, 0x5e, 0xd0, 0x61, 0x3d, 0xe8, 0xb0, 0xe0, 0x73, 0x49, 0x4e, 0x2b, 0x02, 0xe4,
	0x91, 0x67, 0x3e, 0xad, 0x04, 0x04, 0xe1, 0x04, 0x69, 0xad, 0xc3, 0x8c, 0xe7, 0x78, 0x7e, 0x78,
	0xc4, 0xf2, 0x2b, 0xc7, 0x04, 0x18, 0x98, 0x73, 0x58, 0x4a, 0x1e, 0x78, 0xe2, 0x30, 0x84, 0x15,
	0x02, 0x52, 0x87, 0x86, 0x1b, 0x1d, 0x30, 0x1e, 0xe3, 0xb2, 0x0e, 0x04, 0xa8, 0xd7, 0x41, 0x40,
	0x10, 0x4e, 0x90, 0x06, 0xe9, 0x9b, 0x18, 0xbd, 0xf4, 0x4d, 0x9e, 0x99, 0x9e, 0xfb, 0xcd, 0x02,
	0x3c, 0xaf, 0x4d, 0xd1, 0xd3, 0x19, 0xed, 0xfa, 0x37, 0x2e, 0x75, 0x83, 0x72, 0xdd, 0x09, 0x5a,
	0xfe, 0x11, 0x2d, 0xba, 0x65, 0xb7, 0x19, 0xa7, 0xa0, 0x65, 0xb7, 0x25, 0x27, 0x92, 0x42, 0x98,
	0x02, 0xd1, 0x7f, 0x2f, 0xc0, 0xbc, 0x9e, 0xc3, 0xba, 0x97, 0xbc, 0x08, 0x67, 0xba, 0x2f, 0xc0,
	0xde, 0x73, 0x93, 0x4a, 0xb4, 0xcf, 0x63, 0x70, 0xd6, 0x9e, 0xa2, 0xd0, 0x8b, 0x86, 0xa3, 0x55,
	0x42, 0xf3, 0x4b, 0xeb, 0x37, 0x9f, 0xae, 0x7f, 0x0d, 0xc6, 0x5b, 0xae, 0xe7, 0xc6, 0xda, 0x46,
	0x08, 0x01, 0x28, 0x1b, 0x21, 0x24, 0x89, 0x30, 0x03, 0xa3, 0x1a, 0x80, 0xac, 0xbb, 0x75, 0x1f,
	0x26, 0x02, 0xbf, 0xe5, 0xd6, 0x8f, 0x8c, 0x9f, 0xf0, 0x62, 0x84, 0x6b, 0x7e, 0xbb, 0xe1, 0x52,
	0xff, 0x9a, 0xb6, 0x94, 0xd1, 0xcb, 0x96, 0xb2, 0x34, 0xc2, 0x1c, 0x81, 0x7e, 0xbb, 0x00, 0x0b,
	0xa9, 0x8c, 0xc4, 0xac, 0xf4, 0x9c, 0x38, 0x74, 0xeb, 0xea, 0xe9, 0x23, 0x06, 0x51, 0x2c, 0x57,
	0x9a, 0x26, 0x96, 0x2b, 0xfd, 0x63, 0x7d, 0x08, 0xd3, 0x75, 0xc1, 0x81, 0x9b, 0x0c, 0xfa, 0x76,
	0xe2, 0x4e, 0xe0, 0x84, 0xcc, 0xf1, 0x67, 0xe7, 0xac, 0x04, 0xb1, 0x72, 0xce, 0x4a, 0x80, 0x10,
	0x96, 0x68, 0xf4, 0xe3, 0x02, 0x4c, 0x27, 0x79, 0xc9, 0x52, 0xeb, 0xd3, 0x84, 0x1f, 0xaa, 0x4b,
	0xad, 0x80, 0xc9, 0xee, 0x17, 0x10, 0x84, 0x13, 0x24, 0x0d, 0xd2, 0x29, 0x75, 0x94, 0x2f, 0x76,
	0x10, 0x82, 0xb6, 0x12, 0xa4, 0xe3, 0x00, 0x84, 0x05, 0x0a, 0xd5, 0x61, 0x56, 0x1d, 0x74, 0xab,
	0x9a, 0x1a, 0x8a, 0xeb, 0x46, 0xf9, 0x18, 0x70, 0x30, 0xfe, 0x53, 0x01, 0x96, 0x32, 0x59, 0x87,
	0x1b, 0x8e, 0x37, 0x61, 0xe2, 0x89, 0xe3, 0x36, 0x1f, 0x6b, 0xf7, 0xdd, 0x19, 0x44, 0x66, 0x62,
	0x69, 0x84, 0x39, 0xc2, 0xfa, 0x04, 0xa6, 0xa9, 0x4e, 0x71, 0xc8, 0x3c, 0x2a, 0x19, 0x44, 0x6c,
	0x57, 0x60, 0x99, 0x82, 0xe1, 0x61, 0x25, 0x01, 0x54, 0xc2, 0x4a, 0x02, 0x84, 0xb0, 0x44, 0xa3,
	0x3a, 0x2c, 0xa4, 0x18, 0x18, 0xbe, 0xf2, 0x7e, 0xa0, 0x7e, 0xe5, 0xfd, 0x80, 0x7e, 0xe5, 0xfd,
	0xc0, 0x39, 0x22, 0x84, 0x87, 0x76, 0x8b, 0x7f, 0x7c, 0x8f, 0x12, 0x1e, 0xda, 0x2d, 0x49, 0x78,
	0x68, 0xb7, 0x10, 0x26, 0x20, 0xf4, 0x04, 0x96, 0xef, 0xb9, 0x51, 0xbc, 0xe6, 0x35, 0x98, 0xea,
	0xe2, 0x8e, 0xcd, 0x8f, 0xf4, 0x6d, 0x16, 0xfd, 0x41, 0x56, 0x49, 0xdc, 0x69, 0xc5, 0xc9, 0x87,
	0x83, 0xc9, 0x22, 0x66, 0x87, 0xa1, 0x7d, 0xa4, 0x7d, 0x38, 0x38, 0x81, 0xb2, 0x0f, 0x07, 0xcb,
	0xe4, 0x7f, 0x28, 0xc0, 0x9c, 0xc6, 0x48, 0x75, 0x01, 0x0b, 0x43, 0xb8, 0x80, 0xc5, 0x3c, 0x2e,
	0x20, 0xa7, 0x0e, 0x52, 0x0e, 0x63, 0xa0, 0x51, 0x07, 0x8c, 0x3a, 0x50, 0x3e, 0xef, 0xae, 0x38,
	0x8c, 0x61, 0xea, 0xf3, 0xee, 0xa1, 0xf8, 0xbc, 0x3b, 0xff, 0xf3, 0x2f, 0x0b, 0x70, 0x81, 0x9e,
	0x33, 0xf0, 0x1a, 0xe7, 0x1f, 0xea, 0x58, 0xd5, 0x42, 0x1d, 0x97, 0x32, 0x16, 0xe8, 0x9a, 0x47,
	0x2d, 0x41, 0x2a, 0x11, 0x75, 0x4f, 0x39, 0x28, 0x56, 0xf7, 0x1a, 0x08, 0x13, 0x10, 0xfa, 0x9f,
	0x05, 0xb8, 0xc8, 0x49, 0xff, 0x3c, 0xa2, 0x4e, 0x83, 0xb9, 0xf4, 0xa2, 0xbd, 0x63, 0xc3, 0xb7,
	0xf7, 0xc7, 0x05, 0x00, 0x49, 0x4a, 0x4c, 0x18, 0xf9, 0x8d, 0xb2, 0x82, 0xfe, 0xa9, 0xb3, 0xed,
	0xcc, 0xa7, 0xce, 0xb6, 0xe5, 0xa7, 0xce, 0xc4, 0x7b, 0xa0, 0x64, 0xf1, 0xb7, 0xdb, 0x0d, 0x55,
	0x61, 0x72, 0x90, 0xb2, 0xab, 0xc1, 0x00, 0x08, 0x0b, 0x14, 0xfa, 0x2b, 0xec, 0x53, 0x7b, 0x34,
	0xe4, 0xbe, 0xc9, 0xf6, 0xaa, 0xce, 0x71, 0x32, 0x76, 0xe0, 0xea, 0x96, 0xdf, 0x76, 0x63, 0x3f,
	0x64, 0x7c, 0xaa, 0xae, 0x17, 0xb4, 0x9c, 0xa4, 0x02, 0x7b, 0x3d, 0x9e, 0x47, 0xda, 0xf2, 0xdb,
	0x6a, 0x1e, 0xba, 0xc4, 0xb3, 0x57, 0x41, 0x19, 0x43, 0xe5, 0x55, 0x50, 0x06, 0x40, 0x58, 0xa0,
	0x88, 0xa8, 0x2d, 0x1b, 0xf2, 0x9f, 0x8b, 0x9c, 0x85, 0xb0, 0x40, 0x73, 0xf1, 0xba, 0xb8, 0xed,
	0xa6, 0x51, 0x85, 0xa7, 0xaa, 0xc7, 0x37, 0x51, 0xea, 0x6e, 0xb4, 0x95, 0xe4, 0x53, 0x36, 0x51,
	0x34, 0x38, 0xc2, 0x29, 0x42, 0xf4, 0x6f, 0x0b, 0xb0, 0x90, 0x62, 0x38, 0xdc, 0x72, 0x35, 0x98,
	0xd2, 0x7b, 0x0d, 0xc6, 0xe9, 0xe9, 0x2a, 0xd5, 0x8c, 0xa2, 0x00, 0xc5, 0x0d, 0x24, 0x49, 0xe2,
	0x06, 0x92, 0x5f, 0xb2, 0x7a, 0x38, 0x61, 0xa8, 0x3e, 0xe8, 0xec, 0x84, 0xca, 0x53, 0xd1, 0x4e,
	0x18, 0x22, 0x4c, 0x40, 0xe8, 0xf7, 0x0a, 0xb0, 0xc4, 0xdb, 0x77, 0xce, 0x11, 0x4a, 0xd9, 0x6d,
	0xa5, 0xdc, 0xdd, 0x86, 0x3e, 0x83, 0xcb, 0x64, 0x92, 0xdd, 0x76, 0xda, 0xf5, 0xc7, 0x9e, 0x1d,
	0x1e, 0x68, 0xb1, 0xbc, 0x4f, 0x7a, 0xcd, 0x32, 0x2d, 0x8b, 0xf0, 0xf6, 0xc8, 0x28, 0x8a, 0x49,
	0x66, 0xa9, 0x93, 0x8c, 0xcf, 0x31, 0x95, 0x04, 0xfd, 0x9f, 0x22, 0xcc, 0x69, 0x5c, 0x94, 0xd5,
	0xa5, 0x90, 0x7b, 0x75, 0xb1, 0xbe, 0x0e, 0x63, 0x9d, 0xb6, 0x1b, 0xab, 0x03, 0x4f, 0xd2, 0xb2,
	0x6b, 0x49, 0x0a, 0x61, 0x0a, 0x24, 0xc4, 0x0d, 0x27, 0xaa, 0xab, 0xaa, 0x94, 0xa4, 0x25, 0x31,
	0x49, 0x21, 0x4c, 0x81, 0x44, 0x75, 0x39, 0x2d, 0x3b, 0x88, 0x1c, 0xf1, 0x94, 0x16, 0x9d, 0xc5,
	0x1c, 0x24, 0x67, 0x31, 0x07, 0x20, 0x2c, 0x50, 0xea, 0xf1, 0x9e, 0x71, 0xfd, 0x78, 0x8f, 0x9b,
	0x3a, 0xde, 0xe3, 0x8a, 0xe3, 0x3d, 0x6e, 0xc3, 0x6a, 0x80, 0xa6, 0x82, 0xf8, 0x69, 0xad, 0x51,
	0xf7, 0xfa, 0x3f, 0x2e, 0xc0, 0xc2, 0x6d, 0xef, 0x7e, 0x78, 0xb4, 0x4a, 0xf4, 0xe9, 0xf9, 0x89,
	0xe7, 0x2d, 0x6d, 0x1d, 0xd6, 0x5f, 0x03, 0xbc, 0x2d, 0x4f, 0xa0, 0xed, 0x2b, 0xfb, 0xef, 0xfb,
	0x1e, 0xc2, 0xc5, 0x7d, 0x0f, 0x7d, 0x5e, 0x80, 0xd9, 0xdb, 0xde, 0xf9, 0x4f, 0xa7, 0x81, 0x37,
	0xdc, 0x92, 0x46, 0x8e, 0x0d, 0xde, 0xc8, 0x9b, 0x30, 0x7e, 0x5b, 0x9c, 0xb1, 0x7b, 0xec, 0x47,
	0xb1, 0xda, 0x36, 0x92, 0x96, 0x6d, 0x23, 0x29, 0x84, 0x29, 0x10, 0xc5, 0xcc, 0x32, 0xd9, 0xa5,
	0xe6, 0x7f, 0x8f, 0x40, 0x7c, 0xf6, 0xbc, 0x8e, 0xcc, 0xc2, 0x83, 0x1a, 0x09, 0x4c, 0x09, 0x6a,
	0x24, 0x30, 0x84, 0x15, 0x02, 0x74, 0xc4, 0x3e, 0xf9, 0xd0, 0xa5, 0xe4, 0x8f, 0xfb, 0x1d, 0x48,
	0x3a, 0x4d, 0xd1, 0xbf, 0x5f, 0x64, 0xc7, 0x86, 0x24, 0x8f, 0xc1, 0x2e, 0x9e, 0x64, 0x3e, 0x2d,
	0xb8, 0xa9, 0x1c, 0xdc, 0x20, 0xe3, 0x5f, 0xa4, 0x81, 0x06, 0xe1, 0x9b, 0xb1, 0x05, 0x70, 0x59,
	0xf7, 0x61, 0x28, 0x2a, 0x97, 0x43, 0x66, 0xbd, 0x07, 0xc0, 0x44, 0xa3, 0xd6, 0xf2, 0x9b, 0xea,
	0x2d, 0x21, 0x06, 0xbd, 0xe7, 0x37, 0xa5, 0xcf, 0x93, 0x80, 0x10, 0x96, 0xe8, 0xd1, 0x3d, 0x08,
	0xf1, 0x37, 0x8a, 0x30, 0xc1, 0xaa, 0x6e, 0xb5, 0x60, 0x9e, 0x3e, 0xc5, 0x22, 0x7d, 0x59, 0x26,
	0x25, 0xba, 0xae, 0x59, 0xed, 0xc4, 0xbe, 0xf4, 0x3f, 0x69, 0xc8, 0xc9, 0x56, 0x41, 0x32, 0xe4,
	0xa4, 0x81, 0x11, 0xd6, 0xc9, 0xac, 0x4f, 0x60, 0x86, 0x96, 0xc6, 0xa7, 0x93, 0x29, 0x46, 0x4d,
	0x8a, 0x62, 0x7b, 0x65, 0x4c, 0x22, 0xec, 0x24, 0x2d, 0x25, 0x42, 0xc2, 0x10, 0x56, 0x08, 0x86,
	0x3a, 0xe3, 0x85, 0x9e, 0x15, 0x61, 0x4e, 0x6b, 0xdf, 0x70, 0x56, 0x87, 0x1a, 0x4c, 0x28, 0x0e,
	0x1a, 0x4c, 0x78, 0x0b, 0x44, 0x70, 0x40, 0x3d, 0xef, 0xd3, 0x3f, 0x94, 0x90, 0x7a, 0x05, 0x3a,
	0x70, 0x42, 0xd7, 0x17, 0x2b, 0x54, 0xea, 0x15, 0xe8, 0x5d, 0x8a, 0x33, 0xbd, 0x02, 0xcd, 0x30,
	0xda, 0x2b, 0xd0, 0x0c, 0x64, 0x7d, 0x1f, 0x14, 0x18, 0x3b, 0x84, 0xce, 0x2f, 0x35, 0xd1, 0x13,
	0x66, 0x12, 0xb7, 0xc7, 0x0d, 0xa6, 0x8b, 0x69, 0xde, 0x7b, 0xcc, 0x74, 0x4a, 0x93, 0xa2, 0x3f,
	0x2c, 0x02, 0xc8, 0x91, 0xb6, 0xd6, 0x61, 0x86, 0xcf, 0x0d, 0x7a, 0x85, 0xae, 0x20, 0x03, 0xac,
	0x0c, 0xcc, 0xef, 0xd0, 0x2d, 0xa9, 0xb3, 0x83, 0x5d, 0xa2, 0x53, 0x08, 0xf8, 0x2b, 0x07, 0xc5,
	0x5e, 0x3b, 0xf2, 0xdd, 0x0e, 0x76, 0x59, 0x36, 0xcc, 0x06, 0x7e, 0x14, 0xd7, 0x84, 0x83, 0xd2,
	0xc7, 0x47, 0xa4, 0xb3, 0x8e, 0x64, 0x58, 0x4b, 0xbc, 0x17, 0x4b, 0x4c, 0xfb, 0x04, 0x88, 0xb0,
	0x4a, 0x32, 0xfa, 0x33, 0xe1, 0xe8, 0x4f, 0x0a, 0x70, 0x49, 0x6a, 0xc0, 0xf3, 0x77, 0x47, 0xef,
	0x6b, 0x0b, 0x79, 0x4f, 0xed, 0x4e, 0x05, 0x9a, 0x3f, 0x3c, 0x23, 0x05, 0x9a, 0x03, 0x10, 0x16,
	0x28, 0xb4, 0xa1, 0xb6, 0xe8, 0x34, 0x27, 0x74, 0x3e, 0x63, 0x81, 0x06, 0xc6, 0xe8, 0x9c, 0x0f,
	0xbd, 0xfc, 0x55, 0xb0, 0xd6, 0xfc, 0x76, 0x7b, 0xcd, 0x6f, 0x3f, 0x72, 0x9b, 0x5d, 0xde, 0xd1,
	0xd5, 0x45, 0x4b, 0x92, 0xb3, 0x79, 0x2b, 0x0f, 0x89, 0xd7, 0x29, 0x54, 0xce, 0xdb, 0x34, 0x06,
	0xe1, 0x0c, 0x31, 0xf1, 0xda, 0xe9, 0x4b, 0x35, 0x86, 0x4a, 0xb8, 0xbd, 0x5e, 0xaa, 0x19, 0x6d,
	0x2d, 0x7e, 0xb9, 0x04, 0x20, 0x39, 0x92, 0x39, 0xce, 0x10, 0x6a, 0xf4, 0x80, 0xce, 0x71, 0x46,
	0xa0, 0x5f, 0x39, 0x94, 0x30, 0x84, 0x15, 0x02, 0xeb, 0x1e, 0xcc, 0x05, 0xa1, 0x7f, 0xe8, 0x36,
	0x44, 0x14, 0x42, 0xd9, 0x16, 0xda, 0xe5, 0x08, 0xce, 0x69, 0x59, 0xdc, 0x21, 0x92, 0x50, 0x84,
	0x35, 0x22, 0x52, 0xa7, 0x46, 0xe8, 0x1e, 0x0a, 0x5e, 0xca, 0xa3, 0x9c, 0xeb, 0x14, 0xac, 0xd7,
	0x49, 0xc2, 0x10, 0x56, 0x08, 0xe8, 0xc5, 0x80, 0xd0, 0x69, 0x38, 0xed, 0xd8, 0xb5, 0x5b, 0x99,
	0x2f, 0x0a, 0xaf, 0x25, 0x28, 0xfd, 0x62, 0x80, 0x0e, 0x47, 0x38, 0x45, 0x48, 0xea, 0xc6, 0xee,
	0xa5, 0xa9, 0x57, 0x0d, 0x68, 0xdd, 0xd8, 0x55, 0x33, 0xbd, 0x6e, 0x12, 0x86, 0xb0, 0x42, 0x80,
	0x3c, 0xb8, 0x20, 0xc7, 0x40, 0x99, 0x06, 0x0f, 0x81, 0x0e, 0x58, 0x2d, 0x3b, 0x24, 0xc9, 0x6d,
	0x06, 0x6d, 0x58, 0x94, 0xdb, 0x0c, 0xea, 0xd0, 0xa4, 0x08, 0xd1, 0xf7, 0x61, 0x9e, 0x15, 0x9e,
	0x08, 0xdc, 0xfb, 0x9a, 0xd4, 0x2f, 0x1b, 0x2e, 0xd7, 0xe5, 0x7a, 0x01, 0x03, 0x7d, 0x02, 0x16,
	0x11, 0xe9, 0x14, 0xf7, 0x0d, 0x5d, 0x9c, 0x87, 0x67, 0xff, 0x1b, 0x45, 0x10, 0x57, 0xf8, 0x52,
	0x1d, 0x5f, 0x18, 0xaa, 0xe3, 0x47, 0x2c, 0xa8, 0x1d, 0x58, 0x96, 0xf7, 0xc0, 0xe4, 0x3b, 0x64,
	0x3d, 0x77, 0x8b, 0xe9, 0x14, 0x16, 0x29, 0xe5, 0xf9, 0xb1, 0x4b, 0xfa, 0x85, 0x30, 0xf9, 0x00,
	0x59, 0x86, 0x18, 0x7d, 0x1f, 0x16, 0x59, 0x93, 0x14, 0xc9, 0xe9, 0xde, 0x3d, 0xa1, 0xa1, 0x7b,
	0x42, 0xb5, 0x7b, 0x94, 0xc4, 0x8f, 0xa8, 0x8a, 0x7c, 0xe4, 0x36, 0x35, 0x7f, 0xe1, 0x7b, 0xbd,
	0x55, 0x24, 0x27, 0x67, 0x23, 0x9a, 0xa8, 0xa4, 0xb9, 0x44, 0x34, 0xa9, 0x22, 0xe2, 0x08, 0xe4,
	0x24, 0x3a, 0x30, 0x5d, 0xca, 0xdd, 0x3e, 0x3a, 0x70, 0xa0, 0x62, 0xfe, 0x56, 0x01, 0x40, 0xe6,
	0x39, 0x83, 0xd3, 0xe0, 0x83, 0x06, 0xa8, 0x50, 0x1d, 0x96, 0x59, 0x85, 0x74, 0x83, 0xe0, 0x9e,
	0xd6, 0xb7, 0x17, 0x0d, 0x8d, 0x4e, 0x8e, 0xfa, 0xe5, 0x58, 0xa7, 0x5d, 0x98, 0x4e, 0x32, 0x0d,
	0x76, 0x17, 0x2c, 0x69, 0x4f, 0x31, 0x67, 0x7b, 0x76, 0x61, 0x31, 0xa3, 0xbe, 0xde, 0xa5, 0xbb,
	0x6f, 0x44, 0x73, 0x25, 0xbd, 0x4d, 0xcd, 0x6d, 0x06, 0x54, 0x6f, 0xfc, 0x08, 0x08, 0xc2, 0x09,
	0x12, 0x05, 0x70, 0x69, 0xb3, 0x1d, 0x05, 0x4e, 0x9d, 0xf8, 0xad, 0xa1, 0x26, 0x1b, 0x0f, 0xb5,
	0x5e, 0xd2, 0xc3, 0x9d, 0xa9, 0x3c, 0xac, 0xc4, 0xd0, 0x89, 0xfc, 0x4e, 0x58, 0x57, 0x42, 0xdf,
	0x02, 0x82, 0x70, 0x82, 0x44, 0x1d, 0xb8, 0x4a, 0x84, 0xb1, 0x5b, 0xa9, 0x7b, 0xba, 0x44, 0x8e,
	0xac, 0xd8, 0x7f, 0x52, 0x82, 0x85, 0x54, 0x76, 0xeb, 0x97, 0x60, 0x51, 0xe0, 0xa3, 0x9a, 0xdf,
	0xae, 0xd5, 0xa3, 0x80, 0x17, 0xfb, 0x72, 0xda, 0x80, 0x0b, 0x31, 0x27, 0xdc, 0x69, 0xaf, 0x45,
	0xc1, 0x4e, 0xc8, 0x1e, 0x79, 0x60, 0x2b, 0x44, 0xc2, 0x83, 0xe2, 0xe4, 0x0a, 0xa1, 0xc3, 0x11,
	0x4e, 0x11, 0x5a, 0xbf, 0x52, 0x80, 0x65, 0xad, 0xfc, 0x88, 0x32, 0xe5, 0xdb, 0xbc, 0x79, 0xab,
	0x40, 0x6f, 0xa5, 0x2b, 0x9c, 0x19, 0x58, 0xde, 0x4a, 0xcf, 0xa0, 0x10, 0xce, 0x92, 0x5b, 0xbf,
	0x51, 0x80, 0x8b, 0x5a, 0x5d, 0x92, 0xa2, 0xb9, 0x66, 0xfd, 0x4a, 0x8f, 0xea, 0x3c, 0x10, 0x70,
	0xf6, 0x40, 0xaa, 0xc2, 0x3d, 0xc1, 0xc8, 0x07, 0x52, 0x4d, 0x58, 0x84, 0x8d, 0x99, 0xd0, 0xdf,
	0x2c, 0xd0, 0x53, 0x95, 0xe6, 0x96, 0xe7, 0x53, 0x30, 0xfc, 0xe1, 0x5a, 0x7e, 0x73, 0x22, 0x31,
	0x5e, 0xc5, 0xc3, 0xb5, 0xdb, 0x14, 0xbe, 0xd9, 0xd0, 0x1e, 0xae, 0x15, 0x40, 0xf6, 0x70, 0x6d,
	0x92, 0xfa, 0x07, 0x45, 0x6a, 0x91, 0x9b, 0x1a, 0x7e, 0xde, 0x75, 0x91, 0xb6, 0x7b, 0x29, 0x8f,
	0xed, 0xfe, 0x75, 0x18, 0x53, 0x1e, 0x64, 0xa1, 0xc4, 0xfc, 0xc3, 0x73, 0x9c, 0x98, 0x7d, 0x75,
	0x8e, 0x02, 0xad, 0xf7, 0x00, 0xf8, 0xcb, 0xb7, 0x07, 0xce, 0x11, 0x37, 0xb6, 0x68, 0x74, 0x86,
	0x41, 0xef, 0xd2, 0x9d, 0x64, 0x1e, 0x9d, 0x49, 0x40, 0x08, 0x4b, 0x34, 0x6a, 0xc1, 0x0a, 0x9f,
	0x6a, 0xa9, 0xe3, 0xee, 0x55, 0x4d, 0xa5, 0x5c, 0x31, 0xcd, 0x6d, 0xee, 0x9d, 0x0e, 0x30, 0xb3,
	0x3f, 0x65, 0xd1, 0x7a, 0x73, 0x89, 0x0f, 0x7a, 0x45, 0xeb, 0x87, 0x2e, 0xf2, 0x1f, 0x96, 0x60,
	0x4e, 0xcb, 0x6c, 0xfd, 0xe5, 0xae, 0xaa, 0x44, 0x9f, 0x38, 0x7b, 0xde, 0x19, 0x28, 0x92, 0x9f,
	0xf4, 0x54, 0x24, 0xf9, 0x2a, 0x30, 0x1a, 0x35, 0xf2, 0xeb, 0xfd, 0xd4, 0x08, 0xea, 0x5a, 0x99,
	0x33, 0x53, 0x22, 0xbf, 0x52, 0x80, 0x4b, 0x5d, 0x5a, 0x7d, 0xee, 0x2a, 0xe4, 0x4f, 0x8b, 0xb0,
	0x62, 0x6c, 0xf4, 0x17, 0x5c, 0x81, 0x28, 0xce, 0xff, 0x58, 0xfe, 0xa0, 0x88, 0x50, 0x3b, 0xe3,
	0x83, 0xab, 0x9d, 0x89, 0x21, 0xd4, 0xce, 0x6f, 0x16, 0x60, 0x89, 0xcf, 0xca, 0x33, 0xff, 0x82,
	0xab, 0x68, 0x5a, 0x31, 0x47, 0xd3, 0xd0, 0x06, 0x58, 0xec, 0xd5, 0x6f, 0x4d, 0x35, 0xbd, 0xa1,
	0x28, 0x43, 0xde, 0xa1, 0xac, 0x2d, 0xb2, 0x43, 0x59, 0x1a, 0x61, 0x8e, 0x40, 0xf7, 0x98, 0x21,
	0x6f, 0x60, 0x76, 0x43, 0xd5, 0x73, 0x39, 0xb9, 0xbd, 0x03, 0x8b, 0x8c, 0x93, 0xd2, 0x5b, 0x79,
	0x4f, 0x0e, 0xdd, 0xf8, 0x2f, 0x25, 0x28, 0x6e, 0x57, 0xad, 0x0d, 0x98, 0x62, 0xb6, 0xf5, 0x76,
	0xd5, 0xd2, 0x6d, 0xb5, 0xed, 0xaa, 0x66, 0x74, 0x5f, 0xb9, 0x9a, 0xc2, 0xaa, 0xd5, 0x47, 0xcf,
	0x59, 0xdf, 0x85, 0x09, 0xd2, 0xb4, 0xed, 0xaa, 0xa5, 0x6f, 0x10, 0xdd, 0xf1, 0x82, 0xf8, 0xe8,
	0x8a, 0xfe, 0x85, 0x0c, 0x46, 0x98, 0x62, 0xf0, 0x1d, 0x98, 0xe2, 0xf0, 0x86, 0x91, 0xc5, 0xd5,
	0x0c, 0x8b, 0xcd, 0x86, 0x92, 0x7d, 0x15, 0xc6, 0x37, 0x1c, 0x52, 0xfc, 0xe5, 0x54, 0x3d, 0x65,
	0xe7, 0xf4, 0x6b, 0xc2, 0x1d, 0x98, 0x5a, 0x77, 0x5a, 0x0e, 0xed, 0x8b, 0x1e, 0x5c, 0x52, 0x07,
	0x07, 0xd8, 0x35, 0x47, 0xad, 0x26, 0x33, 0x8c, 0xcd, 0x6a, 0xab, 0xd5, 0xa5, 0x3b, 0xfa, 0xb1,
	0x58, 0x83, 0xc9, 0xb5, 0xc7, 0x4e, 0xfd, 0x60, 0x90, 0xe6, 0xdc, 0x79, 0xea, 0x46, 0x71, 0x24,
	0x99, 0xdc, 0xf8, 0xad, 0xeb, 0x30, 0xb6, 0xb5, 0xb6, 0x89, 0xad, 0x1d, 0x98, 0xa3, 0xdc, 0x84,
	0xda, 0xb2, 0x2a, 0xa9, 0xd8, 0x02, 0x03, 0xe7, 0xe6, 0x6c, 0xfd, 0x00, 0x96, 0x99, 0x6c, 0xd0,
	0x57, 0xa2, 0x3e, 0x74, 0xe3, 0xc7, 0x74, 0x0d, 0x4d, 0x7f, 0x06, 0x85, 0xbd, 0x21, 0x45, 0xfb,
	0x98, 0xb1, 0x7d, 0xa1, 0x3b, 0x81, 0xc2, 0x7b, 0x29, 0xcd, 0x7b, 0xdd, 0x7a, 0xd1, 0x94, 0x51,
	0x17, 0xcf, 0x3c, 0xbc, 0x3f, 0x84, 0x69, 0x2a, 0x37, 0x04, 0x65, 0x21, 0x63, 0x27, 0x68, 0x71,
	0xda, 0x2b, 0x5f, 0xc9, 0xc8, 0x9c, 0x99, 0xf1, 0x2e, 0xcc, 0x24, 0x8c, 0x37, 0x1b, 0xb9, 0x58,
	0xf7, 0x11, 0xe7, 0x1d, 0x98, 0xda, 0x70, 0x78, 0x4d, 0xfb, 0x0e, 0x57, 0x9e, 0xb6, 0x6f, 0x0b,
	0xa9, 0xcc, 0xc9, 0xb3, 0x9f, 0x88, 0x3e, 0x80, 0xf9, 0x44, 0xca, 0xf3, 0x77, 0x68, 0x3f, 0xae,
	0x3f, 0x84, 0xf9, 0x0d, 0x27, 0x66, 0x5f, 0xf2, 0x36, 0x71, 0x55, 0x30, 0x5d, 0x87, 0x89, 0x99,
	0x06, 0xa6, 0x3e, 0x70, 0x60, 0x81, 0x74, 0xb4, 0xca, 0xfe, 0xe5, 0x6e, 0xec, 0xf5, 0xcf, 0x96,
	0x5f, 0x79, 0x35, 0x33, 0x5c, 0xdd, 0x8b, 0xd9, 0x01, 0x78, 0xdf, 0x89, 0xeb, 0x8f, 0x59, 0x09,
	0xba, 0xec, 0x4a, 0xc4, 0x00, 0xbd, 0xf2, 0x11, 0xcc, 0x54, 0x1d, 0x3b, 0x14, 0x1c, 0xf5, 0x2e,
	0x51, 0x30, 0x43, 0x48, 0xee, 0x87, 0x30, 0xcb, 0xe6, 0x51, 0x95, 0xbe, 0x21, 0x92, 0xe2, 0xfd,
	0x60, 0x9f, 0x81, 0xf5, 0xa9, 0xf6, 0xa2, 0x91, 0x26, 0xc5, 0xf8, 0x23, 0x00, 0xda, 0x4b, 0x26,
	0xb6, 0x66, 0xd9, 0xf8, 0xaa, 0xa1, 0xca, 0x46, 0xd6, 0xf7, 0x61, 0x56, 0xb2, 0x1e, 0xcd, 0x74,
	0xbb, 0x0f, 0xd3, 0x1b, 0x8e, 0xa8, 0x6c, 0xdf, 0xb9, 0x91, 0xab, 0x03, 0x76, 0x60, 0x96, 0x4d,
	0x90, 0xbc, 0x5c, 0xfb, 0x49, 0xc1, 0x43, 0x58, 0x48, 0x66, 0xdc, 0x00, 0xdd, 0xda, 0x8f, 0xed,
	0x87, 0x60, 0x71, 0x09, 0x08, 0x9c, 0x7a, 0xa2, 0xcb, 0xaf, 0x77, 0xb9, 0x6d, 0x25, 0xb8, 0x56,
	0xba, 0xe2, 0x13, 0xc6, 0x9f, 0xc0, 0x45, 0x9d, 0x71, 0xf2, 0xd8, 0xe2, 0x0b, 0x86, 0xcc, 0xba,
	0x88, 0xe5, 0x60, 0xff, 0x90, 0xd9, 0x0b, 0x04, 0x93, 0xab, 0x1f, 0x5e, 0x32, 0x89, 0x57, 0x96,
	0xed, 0x0e, 0x97, 0x5b, 0xf6, 0x38, 0xd1, 0x08, 0x44, 0x6b, 0x0b, 0x26, 0x89, 0x68, 0x91, 0x6a,
	0xf6, 0x15, 0x81, 0x1c, 0xcd, 0xde, 0x02, 0xe0, 0x62, 0x95, 0x8b, 0x63, 0xbf, 0xd1, 0xaf, 0xc2,
	0x9c, 0x14, 0xaa, 0xbc, 0x5d, 0xd9, 0x5f, 0x5f, 0xcd, 0x25, 0x5a, 0x9c, 0x32, 0x7d, 0xd1, 0xa0,
	0x65, 0x09, 0xa2, 0xeb, 0xf0, 0xf0, 0x6f, 0x7c, 0x64, 0x9b, 0xbf, 0x0f, 0xf3, 0x52, 0x85, 0x53,
	0xde, 0x5f, 0xed, 0xc2, 0x3b, 0xa5, 0xc0, 0x5f, 0xe9, 0xa2, 0xc0, 0x8d, 0x5d, 0x3c, 0x4d, 0xd5,
	0x34, 0x65, 0xff, 0x42, 0x56, 0x7d, 0xa7, 0x6a, 0xde, 0xbf, 0x8b, 0xf9, 0x65, 0x15, 0xca, 0xaf,
	0xdf, 0xc4, 0xca, 0x29, 0xa6, 0x75, 0xb0, 0x24, 0xd3, 0xe8, 0xf6, 0x11, 0xfb, 0x50, 0xec, 0xcb,
	0x86, 0x9b, 0x2f, 0x2a, 0xc1, 0x80, 0x85, 0xdc, 0x87, 0xe9, 0xe4, 0x23, 0xb1, 0x56, 0xea, 0x4b,
	0x59, 0xa9, 0x8f, 0xc7, 0x0e, 0x30, 0xbd, 0x1e, 0x06, 0x0d, 0xae, 0x14, 0x46, 0xa1, 0x65, 0x5a,
	0xc2, 0x16, 0xd5, 0x5e, 0xea, 0xb4, 0xbe, 0xd6, 0xeb, 0x93, 0x7c, 0xba, 0xae, 0x79, 0xb5, 0xdf,
	0x77, 0x57, 0x95, 0xd2, 0x9a, 0xb0, 0x44, 0x45, 0x47, 0x2b, 0x2b, 0xcf, 0x94, 0xf9, 0x86, 0xa9,
	0x7b, 0x7a, 0x14, 0xf4, 0x7d, 0x76, 0x5f, 0x23, 0xfd, 0xa5, 0xce, 0x11, 0xe8, 0xa3, 0x1a, 0x2c,
	0x12, 0x7d, 0xa4, 0xb5, 0xa0, 0xaf, 0x1a, 0x19, 0xa4, 0x8f, 0xf6, 0x60, 0x99, 0x6b, 0xa8, 0xc1,
	0xca, 0xe8, 0x6f, 0x1b, 0x5e, 0x94, 0xaa, 0x6a, 0xe0, 0x01, 0xe8, 0xc7, 0xfd, 0x3e, 0x00, 0x13,
	0x8b, 0xbd, 0x6d, 0x27, 0xce, 0xac, 0x50, 0x99, 0x2f, 0x52, 0x65, 0x44, 0x33, 0xfd, 0xcd, 0x3e,
	0xb9, 0x42, 0x51, 0x86, 0xc3, 0xae, 0x50, 0x06, 0xb6, 0x7c, 0x85, 0xe2, 0x1f, 0x76, 0x1b, 0xd9,
	0x0a, 0x45, 0xab, 0x39, 0xf0, 0x0a, 0x65, 0xa8, 0x5f, 0xb2, 0x42, 0xe5, 0xe3, 0x38, 0xc8, 0x0a,
	0x95, 0xbb, 0x2b, 0xfb, 0x30, 0xbd, 0x71, 0xbc, 0x42, 0x7d, 0xe3, 0xaa, 0x1c, 0xf6, 0xad, 0xba,
	0x1b, 0x65, 0x86, 0x3d, 0xf3, 0x8e, 0x68, 0xa6, 0xfd, 0xe9, 0xef, 0x27, 0xd1, 0x0a, 0x4f, 0x89,
	0x73, 0xa4, 0x46, 0x86, 0xfd, 0x07, 0xdd, 0xc0, 0x74, 0x8b, 0x0d, 0xfa, 0x16, 0x0b, 0xcc, 0xf5,
	0x67, 0xdb, 0xd7, 0xbd, 0x9c, 0x59, 0xf3, 0xdb, 0x71, 0xe8, 0xb7, 0xba, 0x57, 0x53, 0x7d, 0xe5,
	0xa3, 0xef, 0x28, 0xd5, 0xd8, 0xba, 0x2c, 0xdf, 0xbe, 0xcb, 0x51, 0xc7, 0xaf, 0x75, 0x69, 0x7a,
	0xf6, 0x9d, 0x3e, 0x6a, 0xa6, 0x12, 0x9b, 0x42, 0xe1, 0x7f, 0xcd, 0xc0, 0xbf, 0xab, 0x37, 0xd1,
	0x83, 0xf1, 0x0e, 0xcc, 0x70, 0xc6, 0xd4, 0xf0, 0xed, 0xc3, 0x36, 0xc7, 0xf8, 0xdf, 0x63, 0xee,
	0x09, 0xc1, 0xd0, 0x87, 0xcc, 0xfa, 0x70, 0xec, 0x33, 0x52, 0x77, 0xc5, 0x6c, 0xa2, 0x03, 0xd5,
	0x87, 0x57, 0x7f, 0x25, 0x27, 0xe7, 0x52, 0x4e, 0xf9, 0xec, 0xc7, 0x72, 0x47, 0x38, 0x90, 0xb4,
	0xbd, 0x5b, 0x56, 0xf6, 0x89, 0x12, 0x7d, 0x02, 0x5d, 0x33, 0x9e, 0x66, 0x54, 0x18, 0x7e, 0x2c,
	0x02, 0x40, 0x8c, 0x21, 0xd3, 0xf0, 0x2f, 0x65, 0x72, 0x19, 0x16, 0xf2, 0x1c, 0x63, 0xb3, 0x03,
	0x73, 0x8a, 0xdc, 0x1b, 0xab, 0x3b, 0x98, 0xdc, 0x3f, 0x80, 0x05, 0x2e, 0x3d, 0x7b, 0x5b, 0x5c,
	0x30, 0xb3, 0x6f, 0x02, 0x29, 0xdd, 0x89, 0x7a, 0x3c, 0x18, 0xa4, 0xce, 0xf6, 0xb9, 0x84, 0x2b,
	0x95, 0xca, 0x9e, 0x3c, 0xfb, 0x76, 0xe9, 0x5d, 0xe1, 0x8a, 0xf2, 0x46, 0xf7, 0xe4, 0xd6, 0xaf,
	0xc5, 0xfb, 0x30, 0x97, 0xdc, 0x7c, 0xa7, 0x32, 0xf4, 0x4a, 0xf7, 0xf7, 0x2f, 0xf4, 0xf1, 0x79,
	0xb9, 0xf7, 0xbb, 0x39, 0x9a, 0x36, 0x99, 0x91, 0xb7, 0xeb, 0xb7, 0x52, 0xc6, 0x5c, 0xaf, 0xbb,
	0xf7, 0x79, 0xcd, 0xd0, 0x5d, 0x98, 0xe4, 0x17, 0xea, 0x52, 0xbe, 0x89, 0xe9, 0x46, 0x67, 0x2a,
	0xbe, 0x66, 0xb8, 0x47, 0x4b, 0x25, 0x6b, 0x9a, 0x03, 0xf7, 0xbc, 0x94, 0xb8, 0x9a, 0x6f, 0x59,
	0xa6, 0x26, 0x7e, 0x35, 0x0e, 0xdd, 0x76, 0x53, 0x61, 0xf8, 0x23, 0xb0, 0xf8, 0x05, 0x41, 0x7a,
	0x59, 0xf0, 0x81, 0x9f, 0xb7, 0xb6, 0xd9, 0x38, 0x8a, 0xe9, 0xb6, 0x21, 0x5d, 0xa8, 0x66, 0x37,
	0x1c, 0x79, 0x4b, 0x2a, 0x15, 0x6a, 0x56, 0xef, 0xa6, 0xa4, 0x86, 0xae, 0xeb, 0xe5, 0x2a, 0xea,
	0xfb, 0x91, 0x09, 0xb1, 0xda, 0x6a, 0x49, 0xbe, 0xcf, 0x67, 0xf9, 0xca, 0x6b, 0x3a, 0x03, 0xb0,
	0x6e, 0xc2, 0xe5, 0xcd, 0xe4, 0x79, 0x4f, 0x37, 0xf6, 0xc3, 0xb3, 0xea, 0x18, 0x16, 0x85, 0xe4,
	0x85, 0xac, 0xdb, 0xb1, 0x9d, 0x52, 0x13, 0x99, 0xab, 0x70, 0x29, 0xfb, 0xb8, 0xc7, 0x1d, 0x4b,
	0xf4, 0x9c, 0xb5, 0x09, 0xd3, 0x34, 0x1c, 0x9f, 0x47, 0xa1, 0xf7, 0x09, 0xc4, 0xdf, 0xe1, 0xfb,
	0x04, 0x7b, 0x5e, 0xef, 0x39, 0xdd, 0x87, 0x4d, 0x0d, 0x16, 0xa5, 0xca, 0xe5, 0xb7, 0x29, 0xbe,
	0xd2, 0xe5, 0x08, 0x74, 0xaf, 0xe9, 0x66, 0xbe, 0x3a, 0x83, 0x9e, 0xb3, 0x6c, 0x69, 0x1d, 0xf4,
	0x61, 0xaf, 0x2f, 0x3e, 0x59, 0xa7, 0xbd, 0x6b, 0x11, 0x1f, 0x25, 0x2a, 0x93, 0x97, 0xf0, 0x62,
	0x97, 0x12, 0xba, 0xda, 0x5e, 0x5d, 0x59, 0x3f, 0x84, 0x45, 0xa9, 0x3e, 0xf3, 0x73, 0xef, 0xa7,
	0x48, 0x3f, 0x16, 0x7e, 0x12, 0x5f, 0x8c, 0x07, 0xea, 0x99, 0x7e, 0x06, 0xee, 0xbf, 0x98, 0x86,
	0xc9, 0x87, 0xb1, 0xdb, 0x72, 0xe3, 0x23, 0xeb, 0x2e, 0xeb, 0x7d, 0xe5, 0x00, 0xb3, 0x69, 0x4f,
	0x2a, 0xab, 0x39, 0xb3, 0x67, 0xae, 0x69, 0x67, 0x90, 0x7e, 0x56, 0x78, 0xbd, 0xd8, 0xe5, 0xdc,
	0x75, 0x57, 0xa3, 0xc9, 0xc8, 0x76, 0x8d, 0xd9, 0xb7, 0xfc, 0xdc, 0x6a, 0xbe, 0x2d, 0x44, 0xfd,
	0x00, 0x2d, 0x9b, 0x59, 0x1b, 0x8e, 0xe0, 0x71, 0xcd, 0x70, 0x80, 0xb6, 0xeb, 0x94, 0xc8, 0xb0,
	0xaa, 0x0a, 0xb3, 0x86, 0xb7, 0xf2, 0x05, 0xc3, 0x21, 0xc3, 0x5e, 0xd6, 0x47, 0xf6, 0xac, 0x26,
	0x7a, 0xce, 0xda, 0x60, 0x8d, 0x1c, 0x74, 0x10, 0xb2, 0x8c, 0xb6, 0x68, 0x43, 0x39, 0x9f, 0x6b,
	0x86, 0x82, 0x7b, 0x75, 0x7e, 0x96, 0xdd, 0x5d, 0x80, 0xcd, 0xb6, 0x9b, 0x93, 0x5f, 0xff, 0xbd,
	0xcb, 0x39, 0xc2, 0x6c, 0xb5, 0xd5, 0xea, 0xd1, 0xce, 0x7e, 0x4c, 0xfe, 0x12, 0x5c, 0x50, 0x0e,
	0xfb, 0x09, 0x1f, 0x2f, 0x4a, 0xe9, 0xe1, 0xcc, 0x61, 0x81, 0xd4, 0xb6, 0x47, 0x97, 0x33, 0x8a,
	0x74, 0x97, 0xd1, 0x4a, 0xce, 0xff, 0xe4, 0xe7, 0x8e, 0xba, 0x9f, 0x3e, 0x52, 0x78, 0x63, 0x36,
	0xca, 0x6c, 0x6b, 0x3e, 0xd5, 0x9b, 0xe9, 0xfd, 0x7a, 0xc3, 0x80, 0x67, 0x0f, 0x07, 0x24, 0x03,
	0x9e, 0x8f, 0x65, 0xc5, 0x80, 0xce, 0xb0, 0xe3, 0x06, 0x61, 0x3e, 0x8e, 0xfd, 0x46, 0x6b, 0x57,
	0xd9, 0x99, 0x18, 0x09, 0xc7, 0xdb, 0x8b, 0x7f, 0xfc, 0xf9, 0xf5, 0xc2, 0x9f, 0x7c, 0x7e, 0xbd,
	0xf0, 0x5f, 0x3f, 0xbf, 0x5e, 0xf8, 0xdb, 0xff, 0xed, 0xfa, 0x73, 0xfb, 0x13, 0x41, 0xe8, 0xc7,
	0xfe, 0x9b, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x31, 0xa4, 0x84, 0x58, 0xc3, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NSClient is the client API for NS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSClient interface {
	CreateNS(ctx context.Context, in *NSCreateRequest, opts ...grpc.CallOption) (*NSInfoResponse, error)
	ListNS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListNSInfoResponse, error)
	ListNSId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListIdResponse, error)
	GetNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*NSInfoResponse, error)
	DeleteNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllNS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageResponse, error)
	CheckNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type nSClient struct {
	cc *grpc.ClientConn
}

func NewNSClient(cc *grpc.ClientConn) NSClient {
	return &nSClient{cc}
}

func (c *nSClient) CreateNS(ctx context.Context, in *NSCreateRequest, opts ...grpc.CallOption) (*NSInfoResponse, error) {
	out := new(NSInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/CreateNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) ListNS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListNSInfoResponse, error) {
	out := new(ListNSInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/ListNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) ListNSId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/ListNSId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) GetNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*NSInfoResponse, error) {
	out := new(NSInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/GetNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) DeleteNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/DeleteNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) DeleteAllNS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/DeleteAllNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) CheckNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/CheckNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSServer is the server API for NS service.
type NSServer interface {
	CreateNS(context.Context, *NSCreateRequest) (*NSInfoResponse, error)
	ListNS(context.Context, *Empty) (*ListNSInfoResponse, error)
	ListNSId(context.Context, *Empty) (*ListIdResponse, error)
	GetNS(context.Context, *NSQryRequest) (*NSInfoResponse, error)
	DeleteNS(context.Context, *NSQryRequest) (*MessageResponse, error)
	DeleteAllNS(context.Context, *Empty) (*MessageResponse, error)
	CheckNS(context.Context, *NSQryRequest) (*ExistsResponse, error)
}

// UnimplementedNSServer can be embedded to have forward compatible implementations.
type UnimplementedNSServer struct {
}

func (*UnimplementedNSServer) CreateNS(ctx context.Context, req *NSCreateRequest) (*NSInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNS not implemented")
}
func (*UnimplementedNSServer) ListNS(ctx context.Context, req *Empty) (*ListNSInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNS not implemented")
}
func (*UnimplementedNSServer) ListNSId(ctx context.Context, req *Empty) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNSId not implemented")
}
func (*UnimplementedNSServer) GetNS(ctx context.Context, req *NSQryRequest) (*NSInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNS not implemented")
}
func (*UnimplementedNSServer) DeleteNS(ctx context.Context, req *NSQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNS not implemented")
}
func (*UnimplementedNSServer) DeleteAllNS(ctx context.Context, req *Empty) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllNS not implemented")
}
func (*UnimplementedNSServer) CheckNS(ctx context.Context, req *NSQryRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNS not implemented")
}

func RegisterNSServer(s *grpc.Server, srv NSServer) {
	s.RegisterService(&_NS_serviceDesc, srv)
}

func _NS_CreateNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).CreateNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/CreateNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).CreateNS(ctx, req.(*NSCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_ListNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).ListNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/ListNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).ListNS(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_ListNSId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).ListNSId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/ListNSId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).ListNSId(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_GetNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).GetNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/GetNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).GetNS(ctx, req.(*NSQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_DeleteNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).DeleteNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/DeleteNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).DeleteNS(ctx, req.(*NSQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_DeleteAllNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).DeleteAllNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/DeleteAllNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).DeleteAllNS(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_CheckNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).CheckNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/CheckNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).CheckNS(ctx, req.(*NSQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.NS",
	HandlerType: (*NSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNS",
			Handler:    _NS_CreateNS_Handler,
		},
		{
			MethodName: "ListNS",
			Handler:    _NS_ListNS_Handler,
		},
		{
			MethodName: "ListNSId",
			Handler:    _NS_ListNSId_Handler,
		},
		{
			MethodName: "GetNS",
			Handler:    _NS_GetNS_Handler,
		},
		{
			MethodName: "DeleteNS",
			Handler:    _NS_DeleteNS_Handler,
		},
		{
			MethodName: "DeleteAllNS",
			Handler:    _NS_DeleteAllNS_Handler,
		},
		{
			MethodName: "CheckNS",
			Handler:    _NS_CheckNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbtumblebug/cbtumblebug.proto",
}

// MCIRClient is the client API for MCIR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MCIRClient interface {
	CheckResource(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	CreateImageWithInfo(ctx context.Context, in *TbImageInfoRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error)
	CreateImageWithID(ctx context.Context, in *TbImageCreateRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error)
	ListImage(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbImageInfoResponse, error)
	ListImageId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error)
	GetImage(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error)
	DeleteImage(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllImage(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetLookupImage(ctx context.Context, in *LookupImageQryRequest, opts ...grpc.CallOption) (*SpiderImageInfoResponse, error)
	ListLookupImage(ctx context.Context, in *LookupImageListQryRequest, opts ...grpc.CallOption) (*ListSpiderImageInfoResponse, error)
	FetchImage(ctx context.Context, in *FetchImageQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	SearchImage(ctx context.Context, in *SearchImageQryRequest, opts ...grpc.CallOption) (*ListTbImageInfoResponse, error)
	CreateSshKey(ctx context.Context, in *TbSshKeyCreateRequest, opts ...grpc.CallOption) (*TbSshKeyInfoResponse, error)
	ListSshKey(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSshKeyInfoResponse, error)
	ListSshKeyId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error)
	GetSshKey(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSshKeyInfoResponse, error)
	DeleteSshKey(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllSshKey(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateSpecWithInfo(ctx context.Context, in *TbSpecInfoRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error)
	CreateSpecWithSpecName(ctx context.Context, in *TbSpecCreateRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error)
	ListSpec(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error)
	ListSpecId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error)
	GetSpec(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error)
	DeleteSpec(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllSpec(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetLookupSpec(ctx context.Context, in *LookupSpecQryRequest, opts ...grpc.CallOption) (*SpiderSpecInfoResponse, error)
	ListLookupSpec(ctx context.Context, in *LookupSpecListQryRequest, opts ...grpc.CallOption) (*ListSpiderSpecInfoResponse, error)
	FetchSpec(ctx context.Context, in *FetchSpecQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	FilterSpec(ctx context.Context, in *TbSpecInfoRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error)
	FilterSpecsByRange(ctx context.Context, in *FilterSpecsByRangeRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error)
	SortSpecs(ctx context.Context, in *SortSpecsRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error)
	UpdateSpec(ctx context.Context, in *TbSpecInfoRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error)
	CreateSecurityGroup(ctx context.Context, in *TbSecurityGroupCreateRequest, opts ...grpc.CallOption) (*TbSecurityGroupInfoResponse, error)
	ListSecurityGroup(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSecurityGroupInfoResponse, error)
	ListSecurityGroupId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error)
	GetSecurityGroup(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSecurityGroupInfoResponse, error)
	DeleteSecurityGroup(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllSecurityGroup(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateVNet(ctx context.Context, in *TbVNetCreateRequest, opts ...grpc.CallOption) (*TbVNetInfoResponse, error)
	ListVNet(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbVNetInfoResponse, error)
	ListVNetId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error)
	GetVNet(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbVNetInfoResponse, error)
	DeleteVNet(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllVNet(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type mCIRClient struct {
	cc *grpc.ClientConn
}

func NewMCIRClient(cc *grpc.ClientConn) MCIRClient {
	return &mCIRClient{cc}
}

func (c *mCIRClient) CheckResource(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CheckResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateImageWithInfo(ctx context.Context, in *TbImageInfoRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error) {
	out := new(TbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateImageWithInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateImageWithID(ctx context.Context, in *TbImageCreateRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error) {
	out := new(TbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateImageWithID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListImage(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbImageInfoResponse, error) {
	out := new(ListTbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListImageId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListImageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetImage(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error) {
	out := new(TbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteImage(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllImage(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetLookupImage(ctx context.Context, in *LookupImageQryRequest, opts ...grpc.CallOption) (*SpiderImageInfoResponse, error) {
	out := new(SpiderImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetLookupImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListLookupImage(ctx context.Context, in *LookupImageListQryRequest, opts ...grpc.CallOption) (*ListSpiderImageInfoResponse, error) {
	out := new(ListSpiderImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListLookupImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) FetchImage(ctx context.Context, in *FetchImageQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/FetchImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) SearchImage(ctx context.Context, in *SearchImageQryRequest, opts ...grpc.CallOption) (*ListTbImageInfoResponse, error) {
	out := new(ListTbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/SearchImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateSshKey(ctx context.Context, in *TbSshKeyCreateRequest, opts ...grpc.CallOption) (*TbSshKeyInfoResponse, error) {
	out := new(TbSshKeyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSshKey(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSshKeyInfoResponse, error) {
	out := new(ListTbSshKeyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSshKeyId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSshKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetSshKey(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSshKeyInfoResponse, error) {
	out := new(TbSshKeyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteSshKey(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllSshKey(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateSpecWithInfo(ctx context.Context, in *TbSpecInfoRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error) {
	out := new(TbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateSpecWithInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateSpecWithSpecName(ctx context.Context, in *TbSpecCreateRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error) {
	out := new(TbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateSpecWithSpecName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSpec(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error) {
	out := new(ListTbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSpecId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSpecId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetSpec(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error) {
	out := new(TbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteSpec(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllSpec(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetLookupSpec(ctx context.Context, in *LookupSpecQryRequest, opts ...grpc.CallOption) (*SpiderSpecInfoResponse, error) {
	out := new(SpiderSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetLookupSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListLookupSpec(ctx context.Context, in *LookupSpecListQryRequest, opts ...grpc.CallOption) (*ListSpiderSpecInfoResponse, error) {
	out := new(ListSpiderSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListLookupSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) FetchSpec(ctx context.Context, in *FetchSpecQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/FetchSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) FilterSpec(ctx context.Context, in *TbSpecInfoRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error) {
	out := new(ListTbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/FilterSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) FilterSpecsByRange(ctx context.Context, in *FilterSpecsByRangeRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error) {
	out := new(ListTbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/FilterSpecsByRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) SortSpecs(ctx context.Context, in *SortSpecsRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error) {
	out := new(ListTbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/SortSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) UpdateSpec(ctx context.Context, in *TbSpecInfoRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error) {
	out := new(TbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/UpdateSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateSecurityGroup(ctx context.Context, in *TbSecurityGroupCreateRequest, opts ...grpc.CallOption) (*TbSecurityGroupInfoResponse, error) {
	out := new(TbSecurityGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSecurityGroup(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSecurityGroupInfoResponse, error) {
	out := new(ListTbSecurityGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSecurityGroupId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSecurityGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetSecurityGroup(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSecurityGroupInfoResponse, error) {
	out := new(TbSecurityGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteSecurityGroup(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllSecurityGroup(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateVNet(ctx context.Context, in *TbVNetCreateRequest, opts ...grpc.CallOption) (*TbVNetInfoResponse, error) {
	out := new(TbVNetInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListVNet(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbVNetInfoResponse, error) {
	out := new(ListTbVNetInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListVNetId(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListVNetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetVNet(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbVNetInfoResponse, error) {
	out := new(TbVNetInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteVNet(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllVNet(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCIRServer is the server API for MCIR service.
type MCIRServer interface {
	CheckResource(context.Context, *ResourceQryRequest) (*ExistsResponse, error)
	CreateImageWithInfo(context.Context, *TbImageInfoRequest) (*TbImageInfoResponse, error)
	CreateImageWithID(context.Context, *TbImageCreateRequest) (*TbImageInfoResponse, error)
	ListImage(context.Context, *ResourceAllQryRequest) (*ListTbImageInfoResponse, error)
	ListImageId(context.Context, *ResourceAllQryRequest) (*ListIdResponse, error)
	GetImage(context.Context, *ResourceQryRequest) (*TbImageInfoResponse, error)
	DeleteImage(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllImage(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	GetLookupImage(context.Context, *LookupImageQryRequest) (*SpiderImageInfoResponse, error)
	ListLookupImage(context.Context, *LookupImageListQryRequest) (*ListSpiderImageInfoResponse, error)
	FetchImage(context.Context, *FetchImageQryRequest) (*MessageResponse, error)
	SearchImage(context.Context, *SearchImageQryRequest) (*ListTbImageInfoResponse, error)
	CreateSshKey(context.Context, *TbSshKeyCreateRequest) (*TbSshKeyInfoResponse, error)
	ListSshKey(context.Context, *ResourceAllQryRequest) (*ListTbSshKeyInfoResponse, error)
	ListSshKeyId(context.Context, *ResourceAllQryRequest) (*ListIdResponse, error)
	GetSshKey(context.Context, *ResourceQryRequest) (*TbSshKeyInfoResponse, error)
	DeleteSshKey(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllSshKey(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	CreateSpecWithInfo(context.Context, *TbSpecInfoRequest) (*TbSpecInfoResponse, error)
	CreateSpecWithSpecName(context.Context, *TbSpecCreateRequest) (*TbSpecInfoResponse, error)
	ListSpec(context.Context, *ResourceAllQryRequest) (*ListTbSpecInfoResponse, error)
	ListSpecId(context.Context, *ResourceAllQryRequest) (*ListIdResponse, error)
	GetSpec(context.Context, *ResourceQryRequest) (*TbSpecInfoResponse, error)
	DeleteSpec(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllSpec(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	GetLookupSpec(context.Context, *LookupSpecQryRequest) (*SpiderSpecInfoResponse, error)
	ListLookupSpec(context.Context, *LookupSpecListQryRequest) (*ListSpiderSpecInfoResponse, error)
	FetchSpec(context.Context, *FetchSpecQryRequest) (*MessageResponse, error)
	FilterSpec(context.Context, *TbSpecInfoRequest) (*ListTbSpecInfoResponse, error)
	FilterSpecsByRange(context.Context, *FilterSpecsByRangeRequest) (*ListTbSpecInfoResponse, error)
	SortSpecs(context.Context, *SortSpecsRequest) (*ListTbSpecInfoResponse, error)
	UpdateSpec(context.Context, *TbSpecInfoRequest) (*TbSpecInfoResponse, error)
	CreateSecurityGroup(context.Context, *TbSecurityGroupCreateRequest) (*TbSecurityGroupInfoResponse, error)
	ListSecurityGroup(context.Context, *ResourceAllQryRequest) (*ListTbSecurityGroupInfoResponse, error)
	ListSecurityGroupId(context.Context, *ResourceAllQryRequest) (*ListIdResponse, error)
	GetSecurityGroup(context.Context, *ResourceQryRequest) (*TbSecurityGroupInfoResponse, error)
	DeleteSecurityGroup(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllSecurityGroup(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	CreateVNet(context.Context, *TbVNetCreateRequest) (*TbVNetInfoResponse, error)
	ListVNet(context.Context, *ResourceAllQryRequest) (*ListTbVNetInfoResponse, error)
	ListVNetId(context.Context, *ResourceAllQryRequest) (*ListIdResponse, error)
	GetVNet(context.Context, *ResourceQryRequest) (*TbVNetInfoResponse, error)
	DeleteVNet(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllVNet(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
}

// UnimplementedMCIRServer can be embedded to have forward compatible implementations.
type UnimplementedMCIRServer struct {
}

func (*UnimplementedMCIRServer) CheckResource(ctx context.Context, req *ResourceQryRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResource not implemented")
}
func (*UnimplementedMCIRServer) CreateImageWithInfo(ctx context.Context, req *TbImageInfoRequest) (*TbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageWithInfo not implemented")
}
func (*UnimplementedMCIRServer) CreateImageWithID(ctx context.Context, req *TbImageCreateRequest) (*TbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageWithID not implemented")
}
func (*UnimplementedMCIRServer) ListImage(ctx context.Context, req *ResourceAllQryRequest) (*ListTbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}
func (*UnimplementedMCIRServer) ListImageId(ctx context.Context, req *ResourceAllQryRequest) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageId not implemented")
}
func (*UnimplementedMCIRServer) GetImage(ctx context.Context, req *ResourceQryRequest) (*TbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (*UnimplementedMCIRServer) DeleteImage(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllImage(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllImage not implemented")
}
func (*UnimplementedMCIRServer) GetLookupImage(ctx context.Context, req *LookupImageQryRequest) (*SpiderImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLookupImage not implemented")
}
func (*UnimplementedMCIRServer) ListLookupImage(ctx context.Context, req *LookupImageListQryRequest) (*ListSpiderImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLookupImage not implemented")
}
func (*UnimplementedMCIRServer) FetchImage(ctx context.Context, req *FetchImageQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchImage not implemented")
}
func (*UnimplementedMCIRServer) SearchImage(ctx context.Context, req *SearchImageQryRequest) (*ListTbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImage not implemented")
}
func (*UnimplementedMCIRServer) CreateSshKey(ctx context.Context, req *TbSshKeyCreateRequest) (*TbSshKeyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSshKey not implemented")
}
func (*UnimplementedMCIRServer) ListSshKey(ctx context.Context, req *ResourceAllQryRequest) (*ListTbSshKeyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSshKey not implemented")
}
func (*UnimplementedMCIRServer) ListSshKeyId(ctx context.Context, req *ResourceAllQryRequest) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSshKeyId not implemented")
}
func (*UnimplementedMCIRServer) GetSshKey(ctx context.Context, req *ResourceQryRequest) (*TbSshKeyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSshKey not implemented")
}
func (*UnimplementedMCIRServer) DeleteSshKey(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSshKey not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllSshKey(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSshKey not implemented")
}
func (*UnimplementedMCIRServer) CreateSpecWithInfo(ctx context.Context, req *TbSpecInfoRequest) (*TbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecWithInfo not implemented")
}
func (*UnimplementedMCIRServer) CreateSpecWithSpecName(ctx context.Context, req *TbSpecCreateRequest) (*TbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecWithSpecName not implemented")
}
func (*UnimplementedMCIRServer) ListSpec(ctx context.Context, req *ResourceAllQryRequest) (*ListTbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpec not implemented")
}
func (*UnimplementedMCIRServer) ListSpecId(ctx context.Context, req *ResourceAllQryRequest) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpecId not implemented")
}
func (*UnimplementedMCIRServer) GetSpec(ctx context.Context, req *ResourceQryRequest) (*TbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpec not implemented")
}
func (*UnimplementedMCIRServer) DeleteSpec(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpec not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllSpec(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSpec not implemented")
}
func (*UnimplementedMCIRServer) GetLookupSpec(ctx context.Context, req *LookupSpecQryRequest) (*SpiderSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLookupSpec not implemented")
}
func (*UnimplementedMCIRServer) ListLookupSpec(ctx context.Context, req *LookupSpecListQryRequest) (*ListSpiderSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLookupSpec not implemented")
}
func (*UnimplementedMCIRServer) FetchSpec(ctx context.Context, req *FetchSpecQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSpec not implemented")
}
func (*UnimplementedMCIRServer) FilterSpec(ctx context.Context, req *TbSpecInfoRequest) (*ListTbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSpec not implemented")
}
func (*UnimplementedMCIRServer) FilterSpecsByRange(ctx context.Context, req *FilterSpecsByRangeRequest) (*ListTbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSpecsByRange not implemented")
}
func (*UnimplementedMCIRServer) SortSpecs(ctx context.Context, req *SortSpecsRequest) (*ListTbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortSpecs not implemented")
}
func (*UnimplementedMCIRServer) UpdateSpec(ctx context.Context, req *TbSpecInfoRequest) (*TbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpec not implemented")
}
func (*UnimplementedMCIRServer) CreateSecurityGroup(ctx context.Context, req *TbSecurityGroupCreateRequest) (*TbSecurityGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) ListSecurityGroup(ctx context.Context, req *ResourceAllQryRequest) (*ListTbSecurityGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) ListSecurityGroupId(ctx context.Context, req *ResourceAllQryRequest) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityGroupId not implemented")
}
func (*UnimplementedMCIRServer) GetSecurityGroup(ctx context.Context, req *ResourceQryRequest) (*TbSecurityGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) DeleteSecurityGroup(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllSecurityGroup(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) CreateVNet(ctx context.Context, req *TbVNetCreateRequest) (*TbVNetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVNet not implemented")
}
func (*UnimplementedMCIRServer) ListVNet(ctx context.Context, req *ResourceAllQryRequest) (*ListTbVNetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVNet not implemented")
}
func (*UnimplementedMCIRServer) ListVNetId(ctx context.Context, req *ResourceAllQryRequest) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVNetId not implemented")
}
func (*UnimplementedMCIRServer) GetVNet(ctx context.Context, req *ResourceQryRequest) (*TbVNetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVNet not implemented")
}
func (*UnimplementedMCIRServer) DeleteVNet(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVNet not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllVNet(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllVNet not implemented")
}

func RegisterMCIRServer(s *grpc.Server, srv MCIRServer) {
	s.RegisterService(&_MCIR_serviceDesc, srv)
}

func _MCIR_CheckResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CheckResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CheckResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CheckResource(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateImageWithInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbImageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateImageWithInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateImageWithInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateImageWithInfo(ctx, req.(*TbImageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateImageWithID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbImageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateImageWithID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateImageWithID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateImageWithID(ctx, req.(*TbImageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListImage(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListImageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListImageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListImageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListImageId(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetImage(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteImage(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllImage(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetLookupImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupImageQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetLookupImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetLookupImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetLookupImage(ctx, req.(*LookupImageQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListLookupImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupImageListQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListLookupImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListLookupImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListLookupImage(ctx, req.(*LookupImageListQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_FetchImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchImageQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).FetchImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/FetchImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).FetchImage(ctx, req.(*FetchImageQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_SearchImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchImageQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).SearchImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/SearchImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).SearchImage(ctx, req.(*SearchImageQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSshKeyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateSshKey(ctx, req.(*TbSshKeyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSshKey(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSshKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSshKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSshKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSshKeyId(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetSshKey(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteSshKey(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllSshKey(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateSpecWithInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSpecInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateSpecWithInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateSpecWithInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateSpecWithInfo(ctx, req.(*TbSpecInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateSpecWithSpecName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSpecCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateSpecWithSpecName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateSpecWithSpecName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateSpecWithSpecName(ctx, req.(*TbSpecCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSpec(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSpecId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSpecId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSpecId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSpecId(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetSpec(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteSpec(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllSpec(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetLookupSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSpecQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetLookupSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetLookupSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetLookupSpec(ctx, req.(*LookupSpecQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListLookupSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSpecListQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListLookupSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListLookupSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListLookupSpec(ctx, req.(*LookupSpecListQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_FetchSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSpecQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).FetchSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/FetchSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).FetchSpec(ctx, req.(*FetchSpecQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_FilterSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSpecInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).FilterSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/FilterSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).FilterSpec(ctx, req.(*TbSpecInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_FilterSpecsByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSpecsByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).FilterSpecsByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/FilterSpecsByRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).FilterSpecsByRange(ctx, req.(*FilterSpecsByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_SortSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).SortSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/SortSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).SortSpecs(ctx, req.(*SortSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_UpdateSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSpecInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).UpdateSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/UpdateSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).UpdateSpec(ctx, req.(*TbSpecInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSecurityGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateSecurityGroup(ctx, req.(*TbSecurityGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSecurityGroup(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSecurityGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSecurityGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSecurityGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSecurityGroupId(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetSecurityGroup(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteSecurityGroup(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllSecurityGroup(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVNetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateVNet(ctx, req.(*TbVNetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListVNet(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListVNetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListVNetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListVNetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListVNetId(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetVNet(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteVNet(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllVNet(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MCIR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.MCIR",
	HandlerType: (*MCIRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckResource",
			Handler:    _MCIR_CheckResource_Handler,
		},
		{
			MethodName: "CreateImageWithInfo",
			Handler:    _MCIR_CreateImageWithInfo_Handler,
		},
		{
			MethodName: "CreateImageWithID",
			Handler:    _MCIR_CreateImageWithID_Handler,
		},
		{
			MethodName: "ListImage",
			Handler:    _MCIR_ListImage_Handler,
		},
		{
			MethodName: "ListImageId",
			Handler:    _MCIR_ListImageId_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _MCIR_GetImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _MCIR_DeleteImage_Handler,
		},
		{
			MethodName: "DeleteAllImage",
			Handler:    _MCIR_DeleteAllImage_Handler,
		},
		{
			MethodName: "GetLookupImage",
			Handler:    _MCIR_GetLookupImage_Handler,
		},
		{
			MethodName: "ListLookupImage",
			Handler:    _MCIR_ListLookupImage_Handler,
		},
		{
			MethodName: "FetchImage",
			Handler:    _MCIR_FetchImage_Handler,
		},
		{
			MethodName: "SearchImage",
			Handler:    _MCIR_SearchImage_Handler,
		},
		{
			MethodName: "CreateSshKey",
			Handler:    _MCIR_CreateSshKey_Handler,
		},
		{
			MethodName: "ListSshKey",
			Handler:    _MCIR_ListSshKey_Handler,
		},
		{
			MethodName: "ListSshKeyId",
			Handler:    _MCIR_ListSshKeyId_Handler,
		},
		{
			MethodName: "GetSshKey",
			Handler:    _MCIR_GetSshKey_Handler,
		},
		{
			MethodName: "DeleteSshKey",
			Handler:    _MCIR_DeleteSshKey_Handler,
		},
		{
			MethodName: "DeleteAllSshKey",
			Handler:    _MCIR_DeleteAllSshKey_Handler,
		},
		{
			MethodName: "CreateSpecWithInfo",
			Handler:    _MCIR_CreateSpecWithInfo_Handler,
		},
		{
			MethodName: "CreateSpecWithSpecName",
			Handler:    _MCIR_CreateSpecWithSpecName_Handler,
		},
		{
			MethodName: "ListSpec",
			Handler:    _MCIR_ListSpec_Handler,
		},
		{
			MethodName: "ListSpecId",
			Handler:    _MCIR_ListSpecId_Handler,
		},
		{
			MethodName: "GetSpec",
			Handler:    _MCIR_GetSpec_Handler,
		},
		{
			MethodName: "DeleteSpec",
			Handler:    _MCIR_DeleteSpec_Handler,
		},
		{
			MethodName: "DeleteAllSpec",
			Handler:    _MCIR_DeleteAllSpec_Handler,
		},
		{
			MethodName: "GetLookupSpec",
			Handler:    _MCIR_GetLookupSpec_Handler,
		},
		{
			MethodName: "ListLookupSpec",
			Handler:    _MCIR_ListLookupSpec_Handler,
		},
		{
			MethodName: "FetchSpec",
			Handler:    _MCIR_FetchSpec_Handler,
		},
		{
			MethodName: "FilterSpec",
			Handler:    _MCIR_FilterSpec_Handler,
		},
		{
			MethodName: "FilterSpecsByRange",
			Handler:    _MCIR_FilterSpecsByRange_Handler,
		},
		{
			MethodName: "SortSpecs",
			Handler:    _MCIR_SortSpecs_Handler,
		},
		{
			MethodName: "UpdateSpec",
			Handler:    _MCIR_UpdateSpec_Handler,
		},
		{
			MethodName: "CreateSecurityGroup",
			Handler:    _MCIR_CreateSecurityGroup_Handler,
		},
		{
			MethodName: "ListSecurityGroup",
			Handler:    _MCIR_ListSecurityGroup_Handler,
		},
		{
			MethodName: "ListSecurityGroupId",
			Handler:    _MCIR_ListSecurityGroupId_Handler,
		},
		{
			MethodName: "GetSecurityGroup",
			Handler:    _MCIR_GetSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteSecurityGroup",
			Handler:    _MCIR_DeleteSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteAllSecurityGroup",
			Handler:    _MCIR_DeleteAllSecurityGroup_Handler,
		},
		{
			MethodName: "CreateVNet",
			Handler:    _MCIR_CreateVNet_Handler,
		},
		{
			MethodName: "ListVNet",
			Handler:    _MCIR_ListVNet_Handler,
		},
		{
			MethodName: "ListVNetId",
			Handler:    _MCIR_ListVNetId_Handler,
		},
		{
			MethodName: "GetVNet",
			Handler:    _MCIR_GetVNet_Handler,
		},
		{
			MethodName: "DeleteVNet",
			Handler:    _MCIR_DeleteVNet_Handler,
		},
		{
			MethodName: "DeleteAllVNet",
			Handler:    _MCIR_DeleteAllVNet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbtumblebug/cbtumblebug.proto",
}

// MCISClient is the client API for MCIS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MCISClient interface {
	CreateMcis(ctx context.Context, in *TbMcisCreateRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error)
	ListMcis(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*ListTbMcisInfoResponse, error)
	ListMcisId(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error)
	ControlMcis(ctx context.Context, in *TbMcisActionRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	ListMcisStatus(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*ListTbMcisStatusInfoResponse, error)
	GetMcisStatus(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*TbMcisStatusInfoResponse, error)
	GetMcisInfo(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error)
	ListMcisVmId(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error)
	DeleteMcis(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllMcis(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateMcisVM(ctx context.Context, in *TbVmCreateRequest, opts ...grpc.CallOption) (*TbVmInfoResponse, error)
	CreateMcisVMGroup(ctx context.Context, in *TbVmGroupCreateRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error)
	ControlMcisVM(ctx context.Context, in *TbVmActionRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetMcisVMStatus(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*TbVmStatusInfoesponse, error)
	GetMcisVMInfo(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*TbVmInfoResponse, error)
	DeleteMcisVM(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	RecommendMcis(ctx context.Context, in *McisRecommendCreateRequest, opts ...grpc.CallOption) (*McisRecommendInfoResponse, error)
	RecommendVM(ctx context.Context, in *McisRecommendVmCreateRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error)
	CmdMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListCmdMcisResponse, error)
	CmdMcisVm(ctx context.Context, in *McisCmdVmCreateRequest, opts ...grpc.CallOption) (*StringResponse, error)
	InstallAgentToMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error)
	GetBenchmark(ctx context.Context, in *BmQryRequest, opts ...grpc.CallOption) (*ListBenchmarkInfoResponse, error)
	GetAllBenchmark(ctx context.Context, in *BmQryAllRequest, opts ...grpc.CallOption) (*ListBenchmarkInfoResponse, error)
	InstallMonitorAgentToMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error)
	GetMonitorData(ctx context.Context, in *MonitorQryRequest, opts ...grpc.CallOption) (*MonitorResultSimpleResponse, error)
	CheckMcis(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	CheckVm(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	CreateMcisPolicy(ctx context.Context, in *McisPolicyCreateRequest, opts ...grpc.CallOption) (*McisPolicyInfoResponse, error)
	ListMcisPolicy(ctx context.Context, in *McisPolicyAllQryRequest, opts ...grpc.CallOption) (*ListMcisPolicyInfoResponse, error)
	GetMcisPolicy(ctx context.Context, in *McisPolicyQryRequest, opts ...grpc.CallOption) (*McisPolicyInfoResponse, error)
	DeleteMcisPolicy(ctx context.Context, in *McisPolicyQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllMcisPolicy(ctx context.Context, in *McisPolicyAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type mCISClient struct {
	cc *grpc.ClientConn
}

func NewMCISClient(cc *grpc.ClientConn) MCISClient {
	return &mCISClient{cc}
}

func (c *mCISClient) CreateMcis(ctx context.Context, in *TbMcisCreateRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error) {
	out := new(TbMcisInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CreateMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ListMcis(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*ListTbMcisInfoResponse, error) {
	out := new(ListTbMcisInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ListMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ListMcisId(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ListMcisId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ControlMcis(ctx context.Context, in *TbMcisActionRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ControlMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ListMcisStatus(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*ListTbMcisStatusInfoResponse, error) {
	out := new(ListTbMcisStatusInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ListMcisStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisStatus(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*TbMcisStatusInfoResponse, error) {
	out := new(TbMcisStatusInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisInfo(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error) {
	out := new(TbMcisInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ListMcisVmId(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ListMcisVmId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) DeleteMcis(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/DeleteMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) DeleteAllMcis(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/DeleteAllMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CreateMcisVM(ctx context.Context, in *TbVmCreateRequest, opts ...grpc.CallOption) (*TbVmInfoResponse, error) {
	out := new(TbVmInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CreateMcisVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CreateMcisVMGroup(ctx context.Context, in *TbVmGroupCreateRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error) {
	out := new(TbMcisInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CreateMcisVMGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ControlMcisVM(ctx context.Context, in *TbVmActionRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ControlMcisVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisVMStatus(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*TbVmStatusInfoesponse, error) {
	out := new(TbVmStatusInfoesponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisVMStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisVMInfo(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*TbVmInfoResponse, error) {
	out := new(TbVmInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisVMInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) DeleteMcisVM(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/DeleteMcisVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) RecommendMcis(ctx context.Context, in *McisRecommendCreateRequest, opts ...grpc.CallOption) (*McisRecommendInfoResponse, error) {
	out := new(McisRecommendInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/RecommendMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) RecommendVM(ctx context.Context, in *McisRecommendVmCreateRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error) {
	out := new(ListTbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/RecommendVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CmdMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListCmdMcisResponse, error) {
	out := new(ListCmdMcisResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CmdMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CmdMcisVm(ctx context.Context, in *McisCmdVmCreateRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CmdMcisVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) InstallAgentToMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error) {
	out := new(ListAgentInstallResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/InstallAgentToMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetBenchmark(ctx context.Context, in *BmQryRequest, opts ...grpc.CallOption) (*ListBenchmarkInfoResponse, error) {
	out := new(ListBenchmarkInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetAllBenchmark(ctx context.Context, in *BmQryAllRequest, opts ...grpc.CallOption) (*ListBenchmarkInfoResponse, error) {
	out := new(ListBenchmarkInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetAllBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) InstallMonitorAgentToMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error) {
	out := new(ListAgentInstallResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/InstallMonitorAgentToMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMonitorData(ctx context.Context, in *MonitorQryRequest, opts ...grpc.CallOption) (*MonitorResultSimpleResponse, error) {
	out := new(MonitorResultSimpleResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMonitorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CheckMcis(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CheckMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CheckVm(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CheckVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CreateMcisPolicy(ctx context.Context, in *McisPolicyCreateRequest, opts ...grpc.CallOption) (*McisPolicyInfoResponse, error) {
	out := new(McisPolicyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CreateMcisPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ListMcisPolicy(ctx context.Context, in *McisPolicyAllQryRequest, opts ...grpc.CallOption) (*ListMcisPolicyInfoResponse, error) {
	out := new(ListMcisPolicyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ListMcisPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisPolicy(ctx context.Context, in *McisPolicyQryRequest, opts ...grpc.CallOption) (*McisPolicyInfoResponse, error) {
	out := new(McisPolicyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) DeleteMcisPolicy(ctx context.Context, in *McisPolicyQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/DeleteMcisPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) DeleteAllMcisPolicy(ctx context.Context, in *McisPolicyAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/DeleteAllMcisPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCISServer is the server API for MCIS service.
type MCISServer interface {
	CreateMcis(context.Context, *TbMcisCreateRequest) (*TbMcisInfoResponse, error)
	ListMcis(context.Context, *TbMcisAllQryRequest) (*ListTbMcisInfoResponse, error)
	ListMcisId(context.Context, *TbMcisAllQryRequest) (*ListIdResponse, error)
	ControlMcis(context.Context, *TbMcisActionRequest) (*MessageResponse, error)
	ListMcisStatus(context.Context, *TbMcisAllQryRequest) (*ListTbMcisStatusInfoResponse, error)
	GetMcisStatus(context.Context, *TbMcisQryRequest) (*TbMcisStatusInfoResponse, error)
	GetMcisInfo(context.Context, *TbMcisQryRequest) (*TbMcisInfoResponse, error)
	ListMcisVmId(context.Context, *TbMcisQryRequest) (*ListIdResponse, error)
	DeleteMcis(context.Context, *TbMcisQryRequest) (*MessageResponse, error)
	DeleteAllMcis(context.Context, *TbMcisAllQryRequest) (*MessageResponse, error)
	CreateMcisVM(context.Context, *TbVmCreateRequest) (*TbVmInfoResponse, error)
	CreateMcisVMGroup(context.Context, *TbVmGroupCreateRequest) (*TbMcisInfoResponse, error)
	ControlMcisVM(context.Context, *TbVmActionRequest) (*MessageResponse, error)
	GetMcisVMStatus(context.Context, *TbVmQryRequest) (*TbVmStatusInfoesponse, error)
	GetMcisVMInfo(context.Context, *TbVmQryRequest) (*TbVmInfoResponse, error)
	DeleteMcisVM(context.Context, *TbVmQryRequest) (*MessageResponse, error)
	RecommendMcis(context.Context, *McisRecommendCreateRequest) (*McisRecommendInfoResponse, error)
	RecommendVM(context.Context, *McisRecommendVmCreateRequest) (*ListTbSpecInfoResponse, error)
	CmdMcis(context.Context, *McisCmdCreateRequest) (*ListCmdMcisResponse, error)
	CmdMcisVm(context.Context, *McisCmdVmCreateRequest) (*StringResponse, error)
	InstallAgentToMcis(context.Context, *McisCmdCreateRequest) (*ListAgentInstallResponse, error)
	GetBenchmark(context.Context, *BmQryRequest) (*ListBenchmarkInfoResponse, error)
	GetAllBenchmark(context.Context, *BmQryAllRequest) (*ListBenchmarkInfoResponse, error)
	InstallMonitorAgentToMcis(context.Context, *McisCmdCreateRequest) (*ListAgentInstallResponse, error)
	GetMonitorData(context.Context, *MonitorQryRequest) (*MonitorResultSimpleResponse, error)
	CheckMcis(context.Context, *TbMcisQryRequest) (*ExistsResponse, error)
	CheckVm(context.Context, *TbVmQryRequest) (*ExistsResponse, error)
	CreateMcisPolicy(context.Context, *McisPolicyCreateRequest) (*McisPolicyInfoResponse, error)
	ListMcisPolicy(context.Context, *McisPolicyAllQryRequest) (*ListMcisPolicyInfoResponse, error)
	GetMcisPolicy(context.Context, *McisPolicyQryRequest) (*McisPolicyInfoResponse, error)
	DeleteMcisPolicy(context.Context, *McisPolicyQryRequest) (*MessageResponse, error)
	DeleteAllMcisPolicy(context.Context, *McisPolicyAllQryRequest) (*MessageResponse, error)
}

// UnimplementedMCISServer can be embedded to have forward compatible implementations.
type UnimplementedMCISServer struct {
}

func (*UnimplementedMCISServer) CreateMcis(ctx context.Context, req *TbMcisCreateRequest) (*TbMcisInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMcis not implemented")
}
func (*UnimplementedMCISServer) ListMcis(ctx context.Context, req *TbMcisAllQryRequest) (*ListTbMcisInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMcis not implemented")
}
func (*UnimplementedMCISServer) ListMcisId(ctx context.Context, req *TbMcisAllQryRequest) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMcisId not implemented")
}
func (*UnimplementedMCISServer) ControlMcis(ctx context.Context, req *TbMcisActionRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlMcis not implemented")
}
func (*UnimplementedMCISServer) ListMcisStatus(ctx context.Context, req *TbMcisAllQryRequest) (*ListTbMcisStatusInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMcisStatus not implemented")
}
func (*UnimplementedMCISServer) GetMcisStatus(ctx context.Context, req *TbMcisQryRequest) (*TbMcisStatusInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisStatus not implemented")
}
func (*UnimplementedMCISServer) GetMcisInfo(ctx context.Context, req *TbMcisQryRequest) (*TbMcisInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisInfo not implemented")
}
func (*UnimplementedMCISServer) ListMcisVmId(ctx context.Context, req *TbMcisQryRequest) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMcisVmId not implemented")
}
func (*UnimplementedMCISServer) DeleteMcis(ctx context.Context, req *TbMcisQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMcis not implemented")
}
func (*UnimplementedMCISServer) DeleteAllMcis(ctx context.Context, req *TbMcisAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMcis not implemented")
}
func (*UnimplementedMCISServer) CreateMcisVM(ctx context.Context, req *TbVmCreateRequest) (*TbVmInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMcisVM not implemented")
}
func (*UnimplementedMCISServer) CreateMcisVMGroup(ctx context.Context, req *TbVmGroupCreateRequest) (*TbMcisInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMcisVMGroup not implemented")
}
func (*UnimplementedMCISServer) ControlMcisVM(ctx context.Context, req *TbVmActionRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlMcisVM not implemented")
}
func (*UnimplementedMCISServer) GetMcisVMStatus(ctx context.Context, req *TbVmQryRequest) (*TbVmStatusInfoesponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisVMStatus not implemented")
}
func (*UnimplementedMCISServer) GetMcisVMInfo(ctx context.Context, req *TbVmQryRequest) (*TbVmInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisVMInfo not implemented")
}
func (*UnimplementedMCISServer) DeleteMcisVM(ctx context.Context, req *TbVmQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMcisVM not implemented")
}
func (*UnimplementedMCISServer) RecommendMcis(ctx context.Context, req *McisRecommendCreateRequest) (*McisRecommendInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendMcis not implemented")
}
func (*UnimplementedMCISServer) RecommendVM(ctx context.Context, req *McisRecommendVmCreateRequest) (*ListTbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendVM not implemented")
}
func (*UnimplementedMCISServer) CmdMcis(ctx context.Context, req *McisCmdCreateRequest) (*ListCmdMcisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdMcis not implemented")
}
func (*UnimplementedMCISServer) CmdMcisVm(ctx context.Context, req *McisCmdVmCreateRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdMcisVm not implemented")
}
func (*UnimplementedMCISServer) InstallAgentToMcis(ctx context.Context, req *McisCmdCreateRequest) (*ListAgentInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallAgentToMcis not implemented")
}
func (*UnimplementedMCISServer) GetBenchmark(ctx context.Context, req *BmQryRequest) (*ListBenchmarkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBenchmark not implemented")
}
func (*UnimplementedMCISServer) GetAllBenchmark(ctx context.Context, req *BmQryAllRequest) (*ListBenchmarkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBenchmark not implemented")
}
func (*UnimplementedMCISServer) InstallMonitorAgentToMcis(ctx context.Context, req *McisCmdCreateRequest) (*ListAgentInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallMonitorAgentToMcis not implemented")
}
func (*UnimplementedMCISServer) GetMonitorData(ctx context.Context, req *MonitorQryRequest) (*MonitorResultSimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorData not implemented")
}
func (*UnimplementedMCISServer) CheckMcis(ctx context.Context, req *TbMcisQryRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMcis not implemented")
}
func (*UnimplementedMCISServer) CheckVm(ctx context.Context, req *TbVmQryRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVm not implemented")
}
func (*UnimplementedMCISServer) CreateMcisPolicy(ctx context.Context, req *McisPolicyCreateRequest) (*McisPolicyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMcisPolicy not implemented")
}
func (*UnimplementedMCISServer) ListMcisPolicy(ctx context.Context, req *McisPolicyAllQryRequest) (*ListMcisPolicyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMcisPolicy not implemented")
}
func (*UnimplementedMCISServer) GetMcisPolicy(ctx context.Context, req *McisPolicyQryRequest) (*McisPolicyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisPolicy not implemented")
}
func (*UnimplementedMCISServer) DeleteMcisPolicy(ctx context.Context, req *McisPolicyQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMcisPolicy not implemented")
}
func (*UnimplementedMCISServer) DeleteAllMcisPolicy(ctx context.Context, req *McisPolicyAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMcisPolicy not implemented")
}

func RegisterMCISServer(s *grpc.Server, srv MCISServer) {
	s.RegisterService(&_MCIS_serviceDesc, srv)
}

func _MCIS_CreateMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CreateMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CreateMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CreateMcis(ctx, req.(*TbMcisCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ListMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ListMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ListMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ListMcis(ctx, req.(*TbMcisAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ListMcisId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ListMcisId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ListMcisId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ListMcisId(ctx, req.(*TbMcisAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ControlMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ControlMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ControlMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ControlMcis(ctx, req.(*TbMcisActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ListMcisStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ListMcisStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ListMcisStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ListMcisStatus(ctx, req.(*TbMcisAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisStatus(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisInfo(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ListMcisVmId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ListMcisVmId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ListMcisVmId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ListMcisVmId(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_DeleteMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).DeleteMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/DeleteMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).DeleteMcis(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_DeleteAllMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).DeleteAllMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/DeleteAllMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).DeleteAllMcis(ctx, req.(*TbMcisAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CreateMcisVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CreateMcisVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CreateMcisVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CreateMcisVM(ctx, req.(*TbVmCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CreateMcisVMGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CreateMcisVMGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CreateMcisVMGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CreateMcisVMGroup(ctx, req.(*TbVmGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ControlMcisVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ControlMcisVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ControlMcisVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ControlMcisVM(ctx, req.(*TbVmActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisVMStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisVMStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisVMStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisVMStatus(ctx, req.(*TbVmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisVMInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisVMInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisVMInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisVMInfo(ctx, req.(*TbVmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_DeleteMcisVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).DeleteMcisVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/DeleteMcisVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).DeleteMcisVM(ctx, req.(*TbVmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_RecommendMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisRecommendCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).RecommendMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/RecommendMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).RecommendMcis(ctx, req.(*McisRecommendCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_RecommendVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisRecommendVmCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).RecommendVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/RecommendVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).RecommendVM(ctx, req.(*McisRecommendVmCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CmdMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisCmdCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CmdMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CmdMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CmdMcis(ctx, req.(*McisCmdCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CmdMcisVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisCmdVmCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CmdMcisVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CmdMcisVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CmdMcisVm(ctx, req.(*McisCmdVmCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_InstallAgentToMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisCmdCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).InstallAgentToMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/InstallAgentToMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).InstallAgentToMcis(ctx, req.(*McisCmdCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetBenchmark(ctx, req.(*BmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetAllBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BmQryAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetAllBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetAllBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetAllBenchmark(ctx, req.(*BmQryAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_InstallMonitorAgentToMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisCmdCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).InstallMonitorAgentToMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/InstallMonitorAgentToMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).InstallMonitorAgentToMcis(ctx, req.(*McisCmdCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMonitorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMonitorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMonitorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMonitorData(ctx, req.(*MonitorQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CheckMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CheckMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CheckMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CheckMcis(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CheckVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CheckVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CheckVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CheckVm(ctx, req.(*TbVmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CreateMcisPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisPolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CreateMcisPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CreateMcisPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CreateMcisPolicy(ctx, req.(*McisPolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ListMcisPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisPolicyAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ListMcisPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ListMcisPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ListMcisPolicy(ctx, req.(*McisPolicyAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisPolicyQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisPolicy(ctx, req.(*McisPolicyQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_DeleteMcisPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisPolicyQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).DeleteMcisPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/DeleteMcisPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).DeleteMcisPolicy(ctx, req.(*McisPolicyQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_DeleteAllMcisPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisPolicyAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).DeleteAllMcisPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/DeleteAllMcisPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).DeleteAllMcisPolicy(ctx, req.(*McisPolicyAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MCIS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.MCIS",
	HandlerType: (*MCISServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMcis",
			Handler:    _MCIS_CreateMcis_Handler,
		},
		{
			MethodName: "ListMcis",
			Handler:    _MCIS_ListMcis_Handler,
		},
		{
			MethodName: "ListMcisId",
			Handler:    _MCIS_ListMcisId_Handler,
		},
		{
			MethodName: "ControlMcis",
			Handler:    _MCIS_ControlMcis_Handler,
		},
		{
			MethodName: "ListMcisStatus",
			Handler:    _MCIS_ListMcisStatus_Handler,
		},
		{
			MethodName: "GetMcisStatus",
			Handler:    _MCIS_GetMcisStatus_Handler,
		},
		{
			MethodName: "GetMcisInfo",
			Handler:    _MCIS_GetMcisInfo_Handler,
		},
		{
			MethodName: "ListMcisVmId",
			Handler:    _MCIS_ListMcisVmId_Handler,
		},
		{
			MethodName: "DeleteMcis",
			Handler:    _MCIS_DeleteMcis_Handler,
		},
		{
			MethodName: "DeleteAllMcis",
			Handler:    _MCIS_DeleteAllMcis_Handler,
		},
		{
			MethodName: "CreateMcisVM",
			Handler:    _MCIS_CreateMcisVM_Handler,
		},
		{
			MethodName: "CreateMcisVMGroup",
			Handler:    _MCIS_CreateMcisVMGroup_Handler,
		},
		{
			MethodName: "ControlMcisVM",
			Handler:    _MCIS_ControlMcisVM_Handler,
		},
		{
			MethodName: "GetMcisVMStatus",
			Handler:    _MCIS_GetMcisVMStatus_Handler,
		},
		{
			MethodName: "GetMcisVMInfo",
			Handler:    _MCIS_GetMcisVMInfo_Handler,
		},
		{
			MethodName: "DeleteMcisVM",
			Handler:    _MCIS_DeleteMcisVM_Handler,
		},
		{
			MethodName: "RecommendMcis",
			Handler:    _MCIS_RecommendMcis_Handler,
		},
		{
			MethodName: "RecommendVM",
			Handler:    _MCIS_RecommendVM_Handler,
		},
		{
			MethodName: "CmdMcis",
			Handler:    _MCIS_CmdMcis_Handler,
		},
		{
			MethodName: "CmdMcisVm",
			Handler:    _MCIS_CmdMcisVm_Handler,
		},
		{
			MethodName: "InstallAgentToMcis",
			Handler:    _MCIS_InstallAgentToMcis_Handler,
		},
		{
			MethodName: "GetBenchmark",
			Handler:    _MCIS_GetBenchmark_Handler,
		},
		{
			MethodName: "GetAllBenchmark",
			Handler:    _MCIS_GetAllBenchmark_Handler,
		},
		{
			MethodName: "InstallMonitorAgentToMcis",
			Handler:    _MCIS_InstallMonitorAgentToMcis_Handler,
		},
		{
			MethodName: "GetMonitorData",
			Handler:    _MCIS_GetMonitorData_Handler,
		},
		{
			MethodName: "CheckMcis",
			Handler:    _MCIS_CheckMcis_Handler,
		},
		{
			MethodName: "CheckVm",
			Handler:    _MCIS_CheckVm_Handler,
		},
		{
			MethodName: "CreateMcisPolicy",
			Handler:    _MCIS_CreateMcisPolicy_Handler,
		},
		{
			MethodName: "ListMcisPolicy",
			Handler:    _MCIS_ListMcisPolicy_Handler,
		},
		{
			MethodName: "GetMcisPolicy",
			Handler:    _MCIS_GetMcisPolicy_Handler,
		},
		{
			MethodName: "DeleteMcisPolicy",
			Handler:    _MCIS_DeleteMcisPolicy_Handler,
		},
		{
			MethodName: "DeleteAllMcisPolicy",
			Handler:    _MCIS_DeleteAllMcisPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbtumblebug/cbtumblebug.proto",
}

// UtilityClient is the client API for Utility service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilityClient interface {
	ListConnConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConnConfigResponse, error)
	GetConnConfig(ctx context.Context, in *ConnConfigQryRequest, opts ...grpc.CallOption) (*ConnConfigResponse, error)
	ListRegion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRegionResponse, error)
	GetRegion(ctx context.Context, in *RegionQryRequest, opts ...grpc.CallOption) (*RegionResponse, error)
	CreateConfig(ctx context.Context, in *ConfigCreateRequest, opts ...grpc.CallOption) (*ConfigInfoResponse, error)
	ListConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConfigInfoResponse, error)
	GetConfig(ctx context.Context, in *ConfigQryRequest, opts ...grpc.CallOption) (*ConfigInfoResponse, error)
	InitConfig(ctx context.Context, in *ConfigQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	InitAllConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageResponse, error)
	InspectMcirResources(ctx context.Context, in *InspectQryRequest, opts ...grpc.CallOption) (*InspectMcirInfoResponse, error)
	InspectVmResources(ctx context.Context, in *InspectQryRequest, opts ...grpc.CallOption) (*InspectVmInfoResponse, error)
	ListObject(ctx context.Context, in *ObjectQryRequest, opts ...grpc.CallOption) (*ListObjectInfoResponse, error)
	GetObject(ctx context.Context, in *ObjectQryRequest, opts ...grpc.CallOption) (*ObjectInfoResponse, error)
	DeleteObject(ctx context.Context, in *ObjectQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllObject(ctx context.Context, in *ObjectQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type utilityClient struct {
	cc *grpc.ClientConn
}

func NewUtilityClient(cc *grpc.ClientConn) UtilityClient {
	return &utilityClient{cc}
}

func (c *utilityClient) ListConnConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConnConfigResponse, error) {
	out := new(ListConnConfigResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/ListConnConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) GetConnConfig(ctx context.Context, in *ConnConfigQryRequest, opts ...grpc.CallOption) (*ConnConfigResponse, error) {
	out := new(ConnConfigResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/GetConnConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) ListRegion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRegionResponse, error) {
	out := new(ListRegionResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/ListRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) GetRegion(ctx context.Context, in *RegionQryRequest, opts ...grpc.CallOption) (*RegionResponse, error) {
	out := new(RegionResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) CreateConfig(ctx context.Context, in *ConfigCreateRequest, opts ...grpc.CallOption) (*ConfigInfoResponse, error) {
	out := new(ConfigInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) ListConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConfigInfoResponse, error) {
	out := new(ListConfigInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/ListConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) GetConfig(ctx context.Context, in *ConfigQryRequest, opts ...grpc.CallOption) (*ConfigInfoResponse, error) {
	out := new(ConfigInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) InitConfig(ctx context.Context, in *ConfigQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/InitConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) InitAllConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/InitAllConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) InspectMcirResources(ctx context.Context, in *InspectQryRequest, opts ...grpc.CallOption) (*InspectMcirInfoResponse, error) {
	out := new(InspectMcirInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/InspectMcirResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) InspectVmResources(ctx context.Context, in *InspectQryRequest, opts ...grpc.CallOption) (*InspectVmInfoResponse, error) {
	out := new(InspectVmInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/InspectVmResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) ListObject(ctx context.Context, in *ObjectQryRequest, opts ...grpc.CallOption) (*ListObjectInfoResponse, error) {
	out := new(ListObjectInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/ListObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) GetObject(ctx context.Context, in *ObjectQryRequest, opts ...grpc.CallOption) (*ObjectInfoResponse, error) {
	out := new(ObjectInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) DeleteObject(ctx context.Context, in *ObjectQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityClient) DeleteAllObject(ctx context.Context, in *ObjectQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Utility/DeleteAllObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilityServer is the server API for Utility service.
type UtilityServer interface {
	ListConnConfig(context.Context, *Empty) (*ListConnConfigResponse, error)
	GetConnConfig(context.Context, *ConnConfigQryRequest) (*ConnConfigResponse, error)
	ListRegion(context.Context, *Empty) (*ListRegionResponse, error)
	GetRegion(context.Context, *RegionQryRequest) (*RegionResponse, error)
	CreateConfig(context.Context, *ConfigCreateRequest) (*ConfigInfoResponse, error)
	ListConfig(context.Context, *Empty) (*ListConfigInfoResponse, error)
	GetConfig(context.Context, *ConfigQryRequest) (*ConfigInfoResponse, error)
	InitConfig(context.Context, *ConfigQryRequest) (*MessageResponse, error)
	InitAllConfig(context.Context, *Empty) (*MessageResponse, error)
	InspectMcirResources(context.Context, *InspectQryRequest) (*InspectMcirInfoResponse, error)
	InspectVmResources(context.Context, *InspectQryRequest) (*InspectVmInfoResponse, error)
	ListObject(context.Context, *ObjectQryRequest) (*ListObjectInfoResponse, error)
	GetObject(context.Context, *ObjectQryRequest) (*ObjectInfoResponse, error)
	DeleteObject(context.Context, *ObjectQryRequest) (*MessageResponse, error)
	DeleteAllObject(context.Context, *ObjectQryRequest) (*MessageResponse, error)
}

// UnimplementedUtilityServer can be embedded to have forward compatible implementations.
type UnimplementedUtilityServer struct {
}

func (*UnimplementedUtilityServer) ListConnConfig(ctx context.Context, req *Empty) (*ListConnConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnConfig not implemented")
}
func (*UnimplementedUtilityServer) GetConnConfig(ctx context.Context, req *ConnConfigQryRequest) (*ConnConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnConfig not implemented")
}
func (*UnimplementedUtilityServer) ListRegion(ctx context.Context, req *Empty) (*ListRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegion not implemented")
}
func (*UnimplementedUtilityServer) GetRegion(ctx context.Context, req *RegionQryRequest) (*RegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (*UnimplementedUtilityServer) CreateConfig(ctx context.Context, req *ConfigCreateRequest) (*ConfigInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (*UnimplementedUtilityServer) ListConfig(ctx context.Context, req *Empty) (*ListConfigInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfig not implemented")
}
func (*UnimplementedUtilityServer) GetConfig(ctx context.Context, req *ConfigQryRequest) (*ConfigInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedUtilityServer) InitConfig(ctx context.Context, req *ConfigQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitConfig not implemented")
}
func (*UnimplementedUtilityServer) InitAllConfig(ctx context.Context, req *Empty) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAllConfig not implemented")
}
func (*UnimplementedUtilityServer) InspectMcirResources(ctx context.Context, req *InspectQryRequest) (*InspectMcirInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectMcirResources not implemented")
}
func (*UnimplementedUtilityServer) InspectVmResources(ctx context.Context, req *InspectQryRequest) (*InspectVmInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectVmResources not implemented")
}
func (*UnimplementedUtilityServer) ListObject(ctx context.Context, req *ObjectQryRequest) (*ListObjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObject not implemented")
}
func (*UnimplementedUtilityServer) GetObject(ctx context.Context, req *ObjectQryRequest) (*ObjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (*UnimplementedUtilityServer) DeleteObject(ctx context.Context, req *ObjectQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (*UnimplementedUtilityServer) DeleteAllObject(ctx context.Context, req *ObjectQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllObject not implemented")
}

func RegisterUtilityServer(s *grpc.Server, srv UtilityServer) {
	s.RegisterService(&_Utility_serviceDesc, srv)
}

func _Utility_ListConnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).ListConnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/ListConnConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).ListConnConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_GetConnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnConfigQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).GetConnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/GetConnConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).GetConnConfig(ctx, req.(*ConnConfigQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_ListRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).ListRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/ListRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).ListRegion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).GetRegion(ctx, req.(*RegionQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).CreateConfig(ctx, req.(*ConfigCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_ListConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).ListConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/ListConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).ListConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).GetConfig(ctx, req.(*ConfigQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_InitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).InitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/InitConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).InitConfig(ctx, req.(*ConfigQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_InitAllConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).InitAllConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/InitAllConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).InitAllConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_InspectMcirResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).InspectMcirResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/InspectMcirResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).InspectMcirResources(ctx, req.(*InspectQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_InspectVmResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).InspectVmResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/InspectVmResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).InspectVmResources(ctx, req.(*InspectQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_ListObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).ListObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/ListObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).ListObject(ctx, req.(*ObjectQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).GetObject(ctx, req.(*ObjectQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).DeleteObject(ctx, req.(*ObjectQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utility_DeleteAllObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).DeleteAllObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Utility/DeleteAllObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).DeleteAllObject(ctx, req.(*ObjectQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Utility_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.Utility",
	HandlerType: (*UtilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConnConfig",
			Handler:    _Utility_ListConnConfig_Handler,
		},
		{
			MethodName: "GetConnConfig",
			Handler:    _Utility_GetConnConfig_Handler,
		},
		{
			MethodName: "ListRegion",
			Handler:    _Utility_ListRegion_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _Utility_GetRegion_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _Utility_CreateConfig_Handler,
		},
		{
			MethodName: "ListConfig",
			Handler:    _Utility_ListConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Utility_GetConfig_Handler,
		},
		{
			MethodName: "InitConfig",
			Handler:    _Utility_InitConfig_Handler,
		},
		{
			MethodName: "InitAllConfig",
			Handler:    _Utility_InitAllConfig_Handler,
		},
		{
			MethodName: "InspectMcirResources",
			Handler:    _Utility_InspectMcirResources_Handler,
		},
		{
			MethodName: "InspectVmResources",
			Handler:    _Utility_InspectVmResources_Handler,
		},
		{
			MethodName: "ListObject",
			Handler:    _Utility_ListObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _Utility_GetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Utility_DeleteObject_Handler,
		},
		{
			MethodName: "DeleteAllObject",
			Handler:    _Utility_DeleteAllObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbtumblebug/cbtumblebug.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SystemId) > 0 {
		i -= len(m.SystemId)
		copy(dAtA[i:], m.SystemId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SystemId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NameId) > 0 {
		i -= len(m.NameId)
		copy(dAtA[i:], m.NameId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NameId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BooleanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BooleanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListNSInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNSInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNSInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdList) > 0 {
		for iNdEx := len(m.IdList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IdList[iNdEx])
			copy(dAtA[i:], m.IdList[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.IdList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbImageInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbImageInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbImageInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAutoGenerated {
		i--
		if m.IsAutoGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.AssociatedObjectList) > 0 {
		for iNdEx := len(m.AssociatedObjectList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssociatedObjectList[iNdEx])
			copy(dAtA[i:], m.AssociatedObjectList[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.AssociatedObjectList[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.GuestOs) > 0 {
		i -= len(m.GuestOs)
		copy(dAtA[i:], m.GuestOs)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GuestOs)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreationDate) > 0 {
		i -= len(m.CreationDate)
		copy(dAtA[i:], m.CreationDate)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CreationDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CspImageName) > 0 {
		i -= len(m.CspImageName)
		copy(dAtA[i:], m.CspImageName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspImageName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CspImageId) > 0 {
		i -= len(m.CspImageId)
		copy(dAtA[i:], m.CspImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspImageId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CspImageId) > 0 {
		i -= len(m.CspImageId)
		copy(dAtA[i:], m.CspImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspImageId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchImageQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchImageQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchImageQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchImageQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchImageQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchImageQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Keywords) > 0 {
		for iNdEx := len(m.Keywords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keywords[iNdEx])
			copy(dAtA[i:], m.Keywords[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Keywords[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderImageInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderImageInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderImageInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSpiderImageInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSpiderImageInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSpiderImageInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpiderImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GuestOs) > 0 {
		i -= len(m.GuestOs)
		copy(dAtA[i:], m.GuestOs)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GuestOs)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupImageListQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupImageListQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupImageListQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupImageQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupImageQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupImageQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CspImageId) > 0 {
		i -= len(m.CspImageId)
		copy(dAtA[i:], m.CspImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspImageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSshKeyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSshKeyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSshKeyInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbSshKeyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbSshKeyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbSshKeyInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbSshKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSshKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSshKeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAutoGenerated {
		i--
		if m.IsAutoGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.AssociatedObjectList) > 0 {
		for iNdEx := len(m.AssociatedObjectList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssociatedObjectList[iNdEx])
			copy(dAtA[i:], m.AssociatedObjectList[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.AssociatedObjectList[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VerifiedUserName) > 0 {
		i -= len(m.VerifiedUserName)
		copy(dAtA[i:], m.VerifiedUserName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VerifiedUserName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CspSshKeyName) > 0 {
		i -= len(m.CspSshKeyName)
		copy(dAtA[i:], m.CspSshKeyName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSshKeyName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSshKeyCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSshKeyCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSshKeyCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSshKeyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSshKeyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSshKeyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAutoGenerated {
		i--
		if m.IsAutoGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if len(m.AssociatedObjectList) > 0 {
		for iNdEx := len(m.AssociatedObjectList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssociatedObjectList[iNdEx])
			copy(dAtA[i:], m.AssociatedObjectList[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.AssociatedObjectList[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if m.EvaluationScore_10 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_10))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc5
	}
	if m.EvaluationScore_09 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_09))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xbd
	}
	if m.EvaluationScore_08 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_08))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb5
	}
	if m.EvaluationScore_07 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_07))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xad
	}
	if m.EvaluationScore_06 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_06))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa5
	}
	if m.EvaluationScore_05 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_05))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9d
	}
	if m.EvaluationScore_04 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_04))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x95
	}
	if m.EvaluationScore_03 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_03))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8d
	}
	if m.EvaluationScore_02 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_02))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x85
	}
	if m.EvaluationScore_01 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EvaluationScore_01))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfd
	}
	if len(m.EvaluationStatus) > 0 {
		i -= len(m.EvaluationStatus)
		copy(dAtA[i:], m.EvaluationStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.EvaluationStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.OrderInFilteredResult != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.OrderInFilteredResult))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.GpuP2P) > 0 {
		i -= len(m.GpuP2P)
		copy(dAtA[i:], m.GpuP2P)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GpuP2P)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.GpumemGib != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.GpumemGib))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.NumGpu != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.NumGpu))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.GpuModel) > 0 {
		i -= len(m.GpuModel)
		copy(dAtA[i:], m.GpuModel)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GpuModel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.EbsBwMbps != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.EbsBwMbps))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.NetBwGbps != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.NetBwGbps))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.MaxTotalStorageTib != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.MaxTotalStorageTib))
		i--
		dAtA[i] = 0x78
	}
	if m.MaxNumStorage != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.MaxNumStorage))
		i--
		dAtA[i] = 0x70
	}
	if m.NumStorage != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.NumStorage))
		i--
		dAtA[i] = 0x68
	}
	if m.CostPerHour != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CostPerHour))))
		i--
		dAtA[i] = 0x65
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if m.StorageGib != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.StorageGib))
		i--
		dAtA[i] = 0x50
	}
	if m.MemGib != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.MemGib))
		i--
		dAtA[i] = 0x48
	}
	if m.NumCore != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.NumCore))
		i--
		dAtA[i] = 0x40
	}
	if m.NumVcpu != 0 {
		i = encodeVarintCbtumblebug(dAtA, i, uint64(m.NumVcpu))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OsType) > 0 {
		i -= len(m.OsType)
		copy(dAtA[i:], m.OsType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.OsType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CspSpecName) > 0 {
		i -= len(m.CspSpecName)
		copy(dAtA[i:], m.CspSpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSpecName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CspSpecName) > 0 {
		i -= len(m.CspSpecName)
		copy(dAtA[i:], m.CspSpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSpecName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchSpecQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchSpecQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchSpecQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSpiderSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSpiderSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSpiderSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSpecInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSpecInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSpecInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Gpu) > 0 {
		for iNdEx := len(m.Gpu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gpu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Mem) > 0 {
		i -= len(m.Mem)
		copy(dAtA[i:], m.Mem)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Mem)))
		i--
		dAtA[i] = 0x22
	}
	if m.VCpu != nil {
		{
			size, err := m.VCpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderVCpuInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderVCpuInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderVCpuInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clock) > 0 {
		i -= len(m.Clock)
		copy(dAtA[i:], m.Clock)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Clock)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderGpuInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderGpuInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderGpuInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mem) > 0 {
		i -= len(m.Mem)
		copy(dAtA[i:], m.Mem)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Mem)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mfr) > 0 {
		i -= len(m.Mfr)
		copy(dAtA[i:], m.Mfr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Mfr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSpecListQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSpecListQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSpecListQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSpecQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSpecQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSpecQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CspSpecName) > 0 {
		i -= len(m.CspSpecName)
		copy(dAtA[i:], m.CspSpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSpecName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilterSpecsByRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterSpecsByRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterSpecsByRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecRangeFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecRangeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecRangeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EvaluationScore_10 != nil {
		{
			size, err := m.EvaluationScore_10.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.EvaluationScore_09 != nil {
		{
			size, err := m.EvaluationScore_09.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if m.EvaluationScore_08 != nil {
		{
			size, err := m.EvaluationScore_08.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.EvaluationScore_07 != nil {
		{
			size, err := m.EvaluationScore_07.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.EvaluationScore_06 != nil {
		{
			size, err := m.EvaluationScore_06.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.EvaluationScore_05 != nil {
		{
			size, err := m.EvaluationScore_05.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.EvaluationScore_04 != nil {
		{
			size, err := m.EvaluationScore_04.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.EvaluationScore_03 != nil {
		{
			size, err := m.EvaluationScore_03.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.EvaluationScore_02 != nil {
		{
			size, err := m.EvaluationScore_02.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.EvaluationScore_01 != nil {
		{
			size, err := m.EvaluationScore_01.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.EvaluationStatus) > 0 {
		i -= len(m.EvaluationStatus)
		copy(dAtA[i:], m.EvaluationStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.EvaluationStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.GpuP2P) > 0 {
		i -= len(m.GpuP2P)
		copy(dAtA[i:], m.GpuP2P)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GpuP2P)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Gpumem_GiB != nil {
		{
			size, err := m.Gpumem_GiB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.NumGpu != nil {
		{
			size, err := m.NumGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.GpuModel) > 0 {
		i -= len(m.GpuModel)
		copy(dAtA[i:], m.GpuModel)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GpuModel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.EbsBw_Mbps != nil {
		{
			size, err := m.EbsBw_Mbps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.NetBw_Gbps != nil {
		{
			size, err := m.NetBw_Gbps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.MaxTotalStorage_TiB != nil {
		{
			size, err := m.MaxTotalStorage_TiB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.MaxNumStorage != nil {
		{
			size, err := m.MaxNumStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.NumStorage != nil {
		{
			size, err := m.NumStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.CostPerHour != nil {
		{
			size, err := m.CostPerHour.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x52
	}
	if m.Storage_GiB != nil {
		{
			size, err := m.Storage_GiB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Mem_GiB != nil {
		{
			size, err := m.Mem_GiB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NumCore != nil {
		{
			size, err := m.NumCore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.NumVCPU != nil {
		{
			size, err := m.NumVCPU.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.OsType) > 0 {
		i -= len(m.OsType)
		copy(dAtA[i:], m.OsType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.OsType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CspSpecName) > 0 {
		i -= len(m.CspSpecName)
		copy(dAtA[i:], m.CspSpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSpecName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Max != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Max))))
		i--
		dAtA[i] = 0x15
	}
	if m.Min != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Min))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *SortSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbSecurityGroupInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSecurityGroupInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSecurityGroupInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbSecurityGroupInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbSecurityGroupInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbSecurityGroupInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbSecurityGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSecurityGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSecurityGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAutoGenerated {
		i--
		if m.IsAutoGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.AssociatedObjectList) > 0 {
		for iNdEx := len(m.AssociatedObjectList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssociatedObjectList[iNdEx])
			copy(dAtA[i:], m.AssociatedObjectList[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.AssociatedObjectList[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CspSecurityGroupName) > 0 {
		i -= len(m.CspSecurityGroupName)
		copy(dAtA[i:], m.CspSecurityGroupName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSecurityGroupName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CspSecurityGroupId) > 0 {
		i -= len(m.CspSecurityGroupId)
		copy(dAtA[i:], m.CspSecurityGroupId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSecurityGroupId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FirewallRules) > 0 {
		for iNdEx := len(m.FirewallRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirewallRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VnetId) > 0 {
		i -= len(m.VnetId)
		copy(dAtA[i:], m.VnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VnetId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSecurityRuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSecurityRuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSecurityRuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cidr) > 0 {
		i -= len(m.Cidr)
		copy(dAtA[i:], m.Cidr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Cidr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IpProtocol) > 0 {
		i -= len(m.IpProtocol)
		copy(dAtA[i:], m.IpProtocol)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.IpProtocol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToPort) > 0 {
		i -= len(m.ToPort)
		copy(dAtA[i:], m.ToPort)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ToPort)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromPort) > 0 {
		i -= len(m.FromPort)
		copy(dAtA[i:], m.FromPort)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.FromPort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSecurityGroupCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSecurityGroupCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSecurityGroupCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSecurityGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSecurityGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSecurityGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirewallRules) > 0 {
		for iNdEx := len(m.FirewallRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirewallRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VnetId) > 0 {
		i -= len(m.VnetId)
		copy(dAtA[i:], m.VnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VnetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVNetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVNetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVNetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbVNetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbVNetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbVNetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbVNetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVNetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVNetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAutoGenerated {
		i--
		if m.IsAutoGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.AssociatedObjectList) > 0 {
		for iNdEx := len(m.AssociatedObjectList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssociatedObjectList[iNdEx])
			copy(dAtA[i:], m.AssociatedObjectList[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.AssociatedObjectList[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CspVnetName) > 0 {
		i -= len(m.CspVnetName)
		copy(dAtA[i:], m.CspVnetName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspVnetName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CspVnetId) > 0 {
		i -= len(m.CspVnetId)
		copy(dAtA[i:], m.CspVnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspVnetId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SubnetInfoList) > 0 {
		for iNdEx := len(m.SubnetInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubnetInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CidrBlock) > 0 {
		i -= len(m.CidrBlock)
		copy(dAtA[i:], m.CidrBlock)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CidrBlock)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSubnetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSubnetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSubnetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVNetCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVNetCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVNetCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVNetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVNetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVNetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubnetInfoList) > 0 {
		for iNdEx := len(m.SubnetInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubnetInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CidrBlock) > 0 {
		i -= len(m.CidrBlock)
		copy(dAtA[i:], m.CidrBlock)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CidrBlock)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSubnetReqInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSubnetReqInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSubnetReqInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbMcisInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbMcisInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbMcisInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InstallMonAgent) > 0 {
		i -= len(m.InstallMonAgent)
		copy(dAtA[i:], m.InstallMonAgent)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.InstallMonAgent)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TargetAction) > 0 {
		i -= len(m.TargetAction)
		copy(dAtA[i:], m.TargetAction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetAction)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TargetStatus) > 0 {
		i -= len(m.TargetStatus)
		copy(dAtA[i:], m.TargetStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetStatus)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vm) > 0 {
		for iNdEx := len(m.Vm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CspViewVmDetail != nil {
		{
			size, err := m.CspViewVmDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.VmUserPassword) > 0 {
		i -= len(m.VmUserPassword)
		copy(dAtA[i:], m.VmUserPassword)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserPassword)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.VmUserAccount) > 0 {
		i -= len(m.VmUserAccount)
		copy(dAtA[i:], m.VmUserAccount)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserAccount)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.SshKeyId) > 0 {
		i -= len(m.SshKeyId)
		copy(dAtA[i:], m.SshKeyId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SshKeyId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.SecurityGroupIds) > 0 {
		for iNdEx := len(m.SecurityGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityGroupIds[iNdEx])
			copy(dAtA[i:], m.SecurityGroupIds[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SecurityGroupIds[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.SubnetId) > 0 {
		i -= len(m.SubnetId)
		copy(dAtA[i:], m.SubnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SubnetId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.VnetId) > 0 {
		i -= len(m.VnetId)
		copy(dAtA[i:], m.VnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VnetId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.SpecId) > 0 {
		i -= len(m.SpecId)
		copy(dAtA[i:], m.SpecId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SpecId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.VmBlockDisk) > 0 {
		i -= len(m.VmBlockDisk)
		copy(dAtA[i:], m.VmBlockDisk)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmBlockDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.VmBootDisk) > 0 {
		i -= len(m.VmBootDisk)
		copy(dAtA[i:], m.VmBootDisk)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmBootDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.PrivateDns) > 0 {
		i -= len(m.PrivateDns)
		copy(dAtA[i:], m.PrivateDns)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.PrivateIp) > 0 {
		i -= len(m.PrivateIp)
		copy(dAtA[i:], m.PrivateIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.PublicDns) > 0 {
		i -= len(m.PublicDns)
		copy(dAtA[i:], m.PublicDns)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.SshPort) > 0 {
		i -= len(m.SshPort)
		copy(dAtA[i:], m.SshPort)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SshPort)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x72
	}
	if m.Region != nil {
		{
			size, err := m.Region.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CreatedTime) > 0 {
		i -= len(m.CreatedTime)
		copy(dAtA[i:], m.CreatedTime)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CreatedTime)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SystemMessage) > 0 {
		i -= len(m.SystemMessage)
		copy(dAtA[i:], m.SystemMessage)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SystemMessage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MonAgentStatus) > 0 {
		i -= len(m.MonAgentStatus)
		copy(dAtA[i:], m.MonAgentStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MonAgentStatus)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TargetAction) > 0 {
		i -= len(m.TargetAction)
		copy(dAtA[i:], m.TargetAction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetAction)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TargetStatus) > 0 {
		i -= len(m.TargetStatus)
		copy(dAtA[i:], m.TargetStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetStatus)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.VmGroupId) > 0 {
		i -= len(m.VmGroupId)
		copy(dAtA[i:], m.VmGroupId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmGroupId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeoLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NativeRegion) > 0 {
		i -= len(m.NativeRegion)
		copy(dAtA[i:], m.NativeRegion)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NativeRegion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CloudType) > 0 {
		i -= len(m.CloudType)
		copy(dAtA[i:], m.CloudType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CloudType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BriefAddr) > 0 {
		i -= len(m.BriefAddr)
		copy(dAtA[i:], m.BriefAddr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.BriefAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Longitude) > 0 {
		i -= len(m.Longitude)
		copy(dAtA[i:], m.Longitude)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Longitude)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Latitude) > 0 {
		i -= len(m.Latitude)
		copy(dAtA[i:], m.Latitude)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Latitude)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderVMInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderVMInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderVMInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.SshAccessPoint) > 0 {
		i -= len(m.SshAccessPoint)
		copy(dAtA[i:], m.SshAccessPoint)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SshAccessPoint)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.VmBlockDisk) > 0 {
		i -= len(m.VmBlockDisk)
		copy(dAtA[i:], m.VmBlockDisk)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmBlockDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.VmBootDisk) > 0 {
		i -= len(m.VmBootDisk)
		copy(dAtA[i:], m.VmBootDisk)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmBootDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.PrivateDns) > 0 {
		i -= len(m.PrivateDns)
		copy(dAtA[i:], m.PrivateDns)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.PrivateIp) > 0 {
		i -= len(m.PrivateIp)
		copy(dAtA[i:], m.PrivateIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.PublicDns) > 0 {
		i -= len(m.PublicDns)
		copy(dAtA[i:], m.PublicDns)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.NetworkInterface) > 0 {
		i -= len(m.NetworkInterface)
		copy(dAtA[i:], m.NetworkInterface)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NetworkInterface)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Region != nil {
		{
			size, err := m.Region.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.KeyPairIid != nil {
		{
			size, err := m.KeyPairIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SecurityGroupIids) > 0 {
		for iNdEx := len(m.SecurityGroupIids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityGroupIids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.SubnetIid != nil {
		{
			size, err := m.SubnetIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.VpcIid != nil {
		{
			size, err := m.VpcIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ImageIid != nil {
		{
			size, err := m.ImageIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.VmUserPasswd) > 0 {
		i -= len(m.VmUserPasswd)
		copy(dAtA[i:], m.VmUserPasswd)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserPasswd)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VmUserId) > 0 {
		i -= len(m.VmUserId)
		copy(dAtA[i:], m.VmUserId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.VmSpecName) > 0 {
		i -= len(m.VmSpecName)
		copy(dAtA[i:], m.VmSpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmSpecName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KeyPairName) > 0 {
		i -= len(m.KeyPairName)
		copy(dAtA[i:], m.KeyPairName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.KeyPairName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityGroupNames) > 0 {
		for iNdEx := len(m.SecurityGroupNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityGroupNames[iNdEx])
			copy(dAtA[i:], m.SecurityGroupNames[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SecurityGroupNames[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SubnetName) > 0 {
		i -= len(m.SubnetName)
		copy(dAtA[i:], m.SubnetName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SubnetName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImageName) > 0 {
		i -= len(m.ImageName)
		copy(dAtA[i:], m.ImageName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ImageName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vm) > 0 {
		for iNdEx := len(m.Vm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InstallMonAgent) > 0 {
		i -= len(m.InstallMonAgent)
		copy(dAtA[i:], m.InstallMonAgent)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.InstallMonAgent)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VmUserPassword) > 0 {
		i -= len(m.VmUserPassword)
		copy(dAtA[i:], m.VmUserPassword)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserPassword)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.VmUserAccount) > 0 {
		i -= len(m.VmUserAccount)
		copy(dAtA[i:], m.VmUserAccount)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserAccount)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SshKeyId) > 0 {
		i -= len(m.SshKeyId)
		copy(dAtA[i:], m.SshKeyId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SshKeyId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SecurityGroupIds) > 0 {
		for iNdEx := len(m.SecurityGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityGroupIds[iNdEx])
			copy(dAtA[i:], m.SecurityGroupIds[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SecurityGroupIds[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.SubnetId) > 0 {
		i -= len(m.SubnetId)
		copy(dAtA[i:], m.SubnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SubnetId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VnetId) > 0 {
		i -= len(m.VnetId)
		copy(dAtA[i:], m.VnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VnetId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SpecId) > 0 {
		i -= len(m.SpecId)
		copy(dAtA[i:], m.SpecId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SpecId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VmGroupSize) > 0 {
		i -= len(m.VmGroupSize)
		copy(dAtA[i:], m.VmGroupSize)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmGroupSize)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbMcisStatusInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbMcisStatusInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbMcisStatusInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisStatusInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisStatusInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisStatusInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vm) > 0 {
		for iNdEx := len(m.Vm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.MasterSshPort) > 0 {
		i -= len(m.MasterSshPort)
		copy(dAtA[i:], m.MasterSshPort)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MasterSshPort)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MasterIp) > 0 {
		i -= len(m.MasterIp)
		copy(dAtA[i:], m.MasterIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MasterIp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MasterVmId) > 0 {
		i -= len(m.MasterVmId)
		copy(dAtA[i:], m.MasterVmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MasterVmId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InstallMonAgent) > 0 {
		i -= len(m.InstallMonAgent)
		copy(dAtA[i:], m.InstallMonAgent)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.InstallMonAgent)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TargetAction) > 0 {
		i -= len(m.TargetAction)
		copy(dAtA[i:], m.TargetAction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetAction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetStatus) > 0 {
		i -= len(m.TargetStatus)
		copy(dAtA[i:], m.TargetStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.SshPort) > 0 {
		i -= len(m.SshPort)
		copy(dAtA[i:], m.SshPort)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SshPort)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PrivateIp) > 0 {
		i -= len(m.PrivateIp)
		copy(dAtA[i:], m.PrivateIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateIp)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CreatedTime) > 0 {
		i -= len(m.CreatedTime)
		copy(dAtA[i:], m.CreatedTime)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CreatedTime)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SystemMessage) > 0 {
		i -= len(m.SystemMessage)
		copy(dAtA[i:], m.SystemMessage)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SystemMessage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MonAgentStatus) > 0 {
		i -= len(m.MonAgentStatus)
		copy(dAtA[i:], m.MonAgentStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MonAgentStatus)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NativeStatus) > 0 {
		i -= len(m.NativeStatus)
		copy(dAtA[i:], m.NativeStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NativeStatus)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TargetAction) > 0 {
		i -= len(m.TargetAction)
		copy(dAtA[i:], m.TargetAction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetAction)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TargetStatus) > 0 {
		i -= len(m.TargetStatus)
		copy(dAtA[i:], m.TargetStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CspVmId) > 0 {
		i -= len(m.CspVmId)
		copy(dAtA[i:], m.CspVmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspVmId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmGroupCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmGroupCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmGroupCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmStatusInfoesponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmStatusInfoesponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmStatusInfoesponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlacementParam) > 0 {
		for iNdEx := len(m.PlacementParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlacementParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VmRecommend) > 0 {
		for iNdEx := len(m.VmRecommend) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmRecommend[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbVmRecommendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmRecommendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmRecommendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlacementParam) > 0 {
		for iNdEx := len(m.PlacementParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlacementParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VmPriority) > 0 {
		for iNdEx := len(m.VmPriority) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmPriority[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.VmReq != nil {
		{
			size, err := m.VmReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmPriority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmPriority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmPriority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VmSpec != nil {
		{
			size, err := m.VmSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Priority) > 0 {
		i -= len(m.Priority)
		copy(dAtA[i:], m.Priority)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Priority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MaxResultNum) > 0 {
		i -= len(m.MaxResultNum)
		copy(dAtA[i:], m.MaxResultNum)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MaxResultNum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PlacementParam) > 0 {
		for iNdEx := len(m.PlacementParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlacementParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VmReq) > 0 {
		for iNdEx := len(m.VmReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbVmRecommendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmRecommendReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmRecommendReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlacementParam) > 0 {
		for iNdEx := len(m.PlacementParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlacementParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DiskSize) > 0 {
		i -= len(m.DiskSize)
		copy(dAtA[i:], m.DiskSize)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.DiskSize)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MemorySize) > 0 {
		i -= len(m.MemorySize)
		copy(dAtA[i:], m.MemorySize)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MemorySize)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VcpuSize) > 0 {
		i -= len(m.VcpuSize)
		copy(dAtA[i:], m.VcpuSize)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VcpuSize)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MaxResultNum) > 0 {
		i -= len(m.MaxResultNum)
		copy(dAtA[i:], m.MaxResultNum)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MaxResultNum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestName) > 0 {
		i -= len(m.RequestName)
		copy(dAtA[i:], m.RequestName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.RequestName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendVmCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendVmCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendVmCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		i -= len(m.Limit)
		copy(dAtA[i:], m.Limit)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Limit)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Priority != nil {
		{
			size, err := m.Priority.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Policy) > 0 {
		for iNdEx := len(m.Policy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FilterCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Condition) > 0 {
		for iNdEx := len(m.Condition) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Condition[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Metric) > 0 {
		i -= len(m.Metric)
		copy(dAtA[i:], m.Metric)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Metric)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Condition) > 0 {
		i -= len(m.Condition)
		copy(dAtA[i:], m.Condition)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Condition)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriorityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriorityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriorityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Policy) > 0 {
		for iNdEx := len(m.Policy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PriorityCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriorityCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriorityCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Parameter) > 0 {
		for iNdEx := len(m.Parameter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parameter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Metric) > 0 {
		i -= len(m.Metric)
		copy(dAtA[i:], m.Metric)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Metric)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParameterKeyVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParameterKeyVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParameterKeyVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		for iNdEx := len(m.Val) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Val[iNdEx])
			copy(dAtA[i:], m.Val[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Val[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCmdMcisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCmdMcisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCmdMcisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CmdMcisResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdMcisResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdMcisResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VmIp) > 0 {
		i -= len(m.VmIp)
		copy(dAtA[i:], m.VmIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisCmdCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisCmdCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisCmdCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisCmdVmCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisCmdVmCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisCmdVmCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisCmdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisCmdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisCmdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAgentInstallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAgentInstallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAgentInstallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MonitorResultSimpleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitorResultSimpleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonitorResultSimpleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MonResultSimpleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonResultSimpleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonResultSimpleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.McisMonitoring) > 0 {
		for iNdEx := len(m.McisMonitoring) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.McisMonitoring[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MonResultSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonResultSimple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonResultSimple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Metric) > 0 {
		i -= len(m.Metric)
		copy(dAtA[i:], m.Metric)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Metric)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MonitorQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitorQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonitorQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metric) > 0 {
		i -= len(m.Metric)
		copy(dAtA[i:], m.Metric)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Metric)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBenchmarkInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBenchmarkInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBenchmarkInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BenchmarkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BenchmarkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BenchmarkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResultArray) > 0 {
		for iNdEx := len(m.ResultArray) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResultArray[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SpecId) > 0 {
		i -= len(m.SpecId)
		copy(dAtA[i:], m.SpecId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SpecId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Elapsed) > 0 {
		i -= len(m.Elapsed)
		copy(dAtA[i:], m.Elapsed)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Elapsed)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Unit) > 0 {
		i -= len(m.Unit)
		copy(dAtA[i:], m.Unit)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Unit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BmQryAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BmQryAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BmQryAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BmQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BmQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BmQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BmReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BmReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BmReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisPolicyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisPolicyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisPolicyInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListMcisPolicyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMcisPolicyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMcisPolicyInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *McisPolicyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisPolicyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisPolicyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActionLog) > 0 {
		i -= len(m.ActionLog)
		copy(dAtA[i:], m.ActionLog)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ActionLog)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Policy) > 0 {
		for iNdEx := len(m.Policy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AutoAction != nil {
		{
			size, err := m.AutoAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AutoCondition != nil {
		{
			size, err := m.AutoCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutoCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EvaluationValue) > 0 {
		for iNdEx := len(m.EvaluationValue) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EvaluationValue[iNdEx])
			copy(dAtA[i:], m.EvaluationValue[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.EvaluationValue[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.EvaluationPeriod) > 0 {
		i -= len(m.EvaluationPeriod)
		copy(dAtA[i:], m.EvaluationPeriod)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.EvaluationPeriod)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Operand) > 0 {
		i -= len(m.Operand)
		copy(dAtA[i:], m.Operand)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Operand)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Metric) > 0 {
		i -= len(m.Metric)
		copy(dAtA[i:], m.Metric)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Metric)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutoAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x22
	}
	if m.PostCommand != nil {
		{
			size, err := m.PostCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Vm != nil {
		{
			size, err := m.Vm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActionType) > 0 {
		i -= len(m.ActionType)
		copy(dAtA[i:], m.ActionType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ActionType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisPolicyCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisPolicyCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisPolicyCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisPolicyAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisPolicyAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisPolicyAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisPolicyQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisPolicyQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisPolicyQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListConnConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListConnConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListConnConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConnConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CredentialName) > 0 {
		i -= len(m.CredentialName)
		copy(dAtA[i:], m.CredentialName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CredentialName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DriverName) > 0 {
		i -= len(m.DriverName)
		copy(dAtA[i:], m.DriverName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.DriverName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConfigName) > 0 {
		i -= len(m.ConfigName)
		copy(dAtA[i:], m.ConfigName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConfigName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnConfigQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnConfigQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnConfigQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnConfigName) > 0 {
		i -= len(m.ConnConfigName)
		copy(dAtA[i:], m.ConnConfigName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnConfigName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRegionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRegionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRegionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Region) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueInfoList) > 0 {
		for iNdEx := len(m.KeyValueInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListConfigInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListConfigInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListConfigInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConfigInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfigId) > 0 {
		i -= len(m.ConfigId)
		copy(dAtA[i:], m.ConfigId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConfigId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InspectMcirInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InspectMcirInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InspectMcirInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListInspectMcirInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInspectMcirInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListInspectMcirInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InspectMcirInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InspectMcirInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InspectMcirInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourcesOnTumblebug) > 0 {
		for iNdEx := len(m.ResourcesOnTumblebug) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourcesOnTumblebug[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResourcesOnSpider) > 0 {
		for iNdEx := len(m.ResourcesOnSpider) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourcesOnSpider[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ResourcesOnCsp) > 0 {
		for iNdEx := len(m.ResourcesOnCsp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourcesOnCsp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *McirResourceOnCspOrSpider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McirResourceOnCspOrSpider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McirResourceOnCspOrSpider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CspNativeId) > 0 {
		i -= len(m.CspNativeId)
		copy(dAtA[i:], m.CspNativeId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspNativeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McirResourceOnTumblebug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McirResourceOnTumblebug) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McirResourceOnTumblebug) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ObjectKey) > 0 {
		i -= len(m.ObjectKey)
		copy(dAtA[i:], m.ObjectKey)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ObjectKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CspNativeId) > 0 {
		i -= len(m.CspNativeId)
		copy(dAtA[i:], m.CspNativeId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspNativeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InspectVmInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InspectVmInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InspectVmInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListInspectVmInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInspectVmInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListInspectVmInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InspectVmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InspectVmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InspectVmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourcesOnTumblebug) > 0 {
		for iNdEx := len(m.ResourcesOnTumblebug) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourcesOnTumblebug[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResourcesOnSpider) > 0 {
		for iNdEx := len(m.ResourcesOnSpider) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourcesOnSpider[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ResourcesOnCsp) > 0 {
		for iNdEx := len(m.ResourcesOnCsp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourcesOnCsp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VmResourceOnCspOrSpider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmResourceOnCspOrSpider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmResourceOnCspOrSpider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CspNativeId) > 0 {
		i -= len(m.CspNativeId)
		copy(dAtA[i:], m.CspNativeId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspNativeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmResourceOnTumblebug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmResourceOnTumblebug) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmResourceOnTumblebug) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ObjectKey) > 0 {
		i -= len(m.ObjectKey)
		copy(dAtA[i:], m.ObjectKey)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ObjectKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CspNativeId) > 0 {
		i -= len(m.CspNativeId)
		copy(dAtA[i:], m.CspNativeId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspNativeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InspectQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InspectQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InspectQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Item) > 0 {
		i -= len(m.Item)
		copy(dAtA[i:], m.Item)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Item)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListObjectInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListObjectInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListObjectInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Items[iNdEx])
			copy(dAtA[i:], m.Items[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Items[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ObjectQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCbtumblebug(dAtA []byte, offset int, v uint64) int {
	offset -= sovCbtumblebug(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NameId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SystemId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BooleanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NSInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListNSInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NSInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NSCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NSQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, s := range m.IdList {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbImageInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspImageId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspImageName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CreationDate)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.GuestOs)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.AssociatedObjectList) > 0 {
		for _, s := range m.AssociatedObjectList {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.IsAutoGenerated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspImageId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchImageQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchImageQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderImageInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSpiderImageInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.GuestOs)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupImageListQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupImageQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspImageId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSshKeyInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbSshKeyInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSshKeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSshKeyName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VerifiedUserName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.AssociatedObjectList) > 0 {
		for _, s := range m.AssociatedObjectList {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.IsAutoGenerated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSshKeyCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSshKeyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.OsType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.NumVcpu != 0 {
		n += 1 + sovCbtumblebug(uint64(m.NumVcpu))
	}
	if m.NumCore != 0 {
		n += 1 + sovCbtumblebug(uint64(m.NumCore))
	}
	if m.MemGib != 0 {
		n += 1 + sovCbtumblebug(uint64(m.MemGib))
	}
	if m.StorageGib != 0 {
		n += 1 + sovCbtumblebug(uint64(m.StorageGib))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.CostPerHour != 0 {
		n += 5
	}
	if m.NumStorage != 0 {
		n += 1 + sovCbtumblebug(uint64(m.NumStorage))
	}
	if m.MaxNumStorage != 0 {
		n += 1 + sovCbtumblebug(uint64(m.MaxNumStorage))
	}
	if m.MaxTotalStorageTib != 0 {
		n += 1 + sovCbtumblebug(uint64(m.MaxTotalStorageTib))
	}
	if m.NetBwGbps != 0 {
		n += 2 + sovCbtumblebug(uint64(m.NetBwGbps))
	}
	if m.EbsBwMbps != 0 {
		n += 2 + sovCbtumblebug(uint64(m.EbsBwMbps))
	}
	l = len(m.GpuModel)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.NumGpu != 0 {
		n += 2 + sovCbtumblebug(uint64(m.NumGpu))
	}
	if m.GpumemGib != 0 {
		n += 2 + sovCbtumblebug(uint64(m.GpumemGib))
	}
	l = len(m.GpuP2P)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.OrderInFilteredResult != 0 {
		n += 2 + sovCbtumblebug(uint64(m.OrderInFilteredResult))
	}
	l = len(m.EvaluationStatus)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_01 != 0 {
		n += 6
	}
	if m.EvaluationScore_02 != 0 {
		n += 6
	}
	if m.EvaluationScore_03 != 0 {
		n += 6
	}
	if m.EvaluationScore_04 != 0 {
		n += 6
	}
	if m.EvaluationScore_05 != 0 {
		n += 6
	}
	if m.EvaluationScore_06 != 0 {
		n += 6
	}
	if m.EvaluationScore_07 != 0 {
		n += 6
	}
	if m.EvaluationScore_08 != 0 {
		n += 6
	}
	if m.EvaluationScore_09 != 0 {
		n += 6
	}
	if m.EvaluationScore_10 != 0 {
		n += 6
	}
	if len(m.AssociatedObjectList) > 0 {
		for _, s := range m.AssociatedObjectList {
			l = len(s)
			n += 2 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.IsAutoGenerated {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchSpecQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSpiderSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSpecInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.VCpu != nil {
		l = m.VCpu.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Mem)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Gpu) > 0 {
		for _, e := range m.Gpu {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderVCpuInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Clock)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderGpuInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Mfr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Mem)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSpecListQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSpecQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FilterSpecsByRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecRangeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.OsType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.NumVCPU != nil {
		l = m.NumVCPU.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.NumCore != nil {
		l = m.NumCore.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Mem_GiB != nil {
		l = m.Mem_GiB.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Storage_GiB != nil {
		l = m.Storage_GiB.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.CostPerHour != nil {
		l = m.CostPerHour.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.NumStorage != nil {
		l = m.NumStorage.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.MaxNumStorage != nil {
		l = m.MaxNumStorage.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.MaxTotalStorage_TiB != nil {
		l = m.MaxTotalStorage_TiB.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.NetBw_Gbps != nil {
		l = m.NetBw_Gbps.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.EbsBw_Mbps != nil {
		l = m.EbsBw_Mbps.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.GpuModel)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.NumGpu != nil {
		l = m.NumGpu.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.Gpumem_GiB != nil {
		l = m.Gpumem_GiB.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.GpuP2P)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.EvaluationStatus)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_01 != nil {
		l = m.EvaluationScore_01.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_02 != nil {
		l = m.EvaluationScore_02.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_03 != nil {
		l = m.EvaluationScore_03.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_04 != nil {
		l = m.EvaluationScore_04.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_05 != nil {
		l = m.EvaluationScore_05.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_06 != nil {
		l = m.EvaluationScore_06.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_07 != nil {
		l = m.EvaluationScore_07.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_08 != nil {
		l = m.EvaluationScore_08.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_09 != nil {
		l = m.EvaluationScore_09.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.EvaluationScore_10 != nil {
		l = m.EvaluationScore_10.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Min != 0 {
		n += 5
	}
	if m.Max != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SortSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSecurityGroupInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbSecurityGroupInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSecurityGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.FirewallRules) > 0 {
		for _, e := range m.FirewallRules {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.CspSecurityGroupId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSecurityGroupName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.AssociatedObjectList) > 0 {
		for _, s := range m.AssociatedObjectList {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.IsAutoGenerated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSecurityRuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromPort)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ToPort)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.IpProtocol)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Cidr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSecurityGroupCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSecurityGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.FirewallRules) > 0 {
		for _, e := range m.FirewallRules {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVNetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbVNetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVNetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CidrBlock)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SubnetInfoList) > 0 {
		for _, e := range m.SubnetInfoList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspVnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspVnetName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.AssociatedObjectList) > 0 {
		for _, s := range m.AssociatedObjectList {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.IsAutoGenerated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSubnetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVNetCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVNetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CidrBlock)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SubnetInfoList) > 0 {
		for _, e := range m.SubnetInfoList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSubnetReqInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbMcisInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Vm) > 0 {
		for _, e := range m.Vm {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetAction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.InstallMonAgent)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmGroupId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetAction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MonAgentStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SystemMessage)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CreatedTime)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SshPort)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicDns)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateIp)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateDns)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmBootDisk)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmBlockDisk)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SpecId)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VnetId)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SecurityGroupIds) > 0 {
		for _, s := range m.SecurityGroupIds {
			l = len(s)
			n += 2 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.SshKeyId)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserAccount)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserPassword)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.CspViewVmDetail != nil {
		l = m.CspViewVmDetail.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Latitude)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Longitude)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.BriefAddr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CloudType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NativeRegion)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderVMInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SubnetName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SecurityGroupNames) > 0 {
		for _, s := range m.SecurityGroupNames {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.KeyPairName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmSpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserPasswd)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.ImageIid != nil {
		l = m.ImageIid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.VpcIid != nil {
		l = m.VpcIid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.SubnetIid != nil {
		l = m.SubnetIid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SecurityGroupIids) > 0 {
		for _, e := range m.SecurityGroupIids {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.KeyPairIid != nil {
		l = m.KeyPairIid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NetworkInterface)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicDns)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateIp)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateDns)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmBootDisk)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmBlockDisk)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SshAccessPoint)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 2 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.InstallMonAgent)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Vm) > 0 {
		for _, e := range m.Vm {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmGroupSize)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SpecId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SecurityGroupIds) > 0 {
		for _, s := range m.SecurityGroupIds {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.SshKeyId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserAccount)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserPassword)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbMcisStatusInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisStatusInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetAction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.InstallMonAgent)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MasterVmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MasterIp)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MasterSshPort)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Vm) > 0 {
		for _, e := range m.Vm {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspVmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetAction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NativeStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MonAgentStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SystemMessage)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CreatedTime)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateIp)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SshPort)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmGroupCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmStatusInfoesponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VmRecommend) > 0 {
		for _, e := range m.VmRecommend {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.PlacementParam) > 0 {
		for _, e := range m.PlacementParam {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmRecommendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VmReq != nil {
		l = m.VmReq.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.VmPriority) > 0 {
		for _, e := range m.VmPriority {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.PlacementParam) > 0 {
		for _, e := range m.PlacementParam {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmPriority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Priority)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.VmSpec != nil {
		l = m.VmSpec.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VmReq) > 0 {
		for _, e := range m.VmReq {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.PlacementParam) > 0 {
		for _, e := range m.PlacementParam {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.MaxResultNum)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmRecommendReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MaxResultNum)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VcpuSize)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MemorySize)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.DiskSize)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.PlacementParam) > 0 {
		for _, e := range m.PlacementParam {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendVmCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Priority != nil {
		l = m.Priority.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Limit)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FilterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policy) > 0 {
		for _, e := range m.Policy {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FilterCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Condition) > 0 {
		for _, e := range m.Condition {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PriorityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policy) > 0 {
		for _, e := range m.Policy {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PriorityCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Parameter) > 0 {
		for _, e := range m.Parameter {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParameterKeyVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Val) > 0 {
		for _, s := range m.Val {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCmdMcisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CmdMcisResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmIp)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisCmdCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisCmdVmCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisCmdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAgentInstallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MonitorResultSimpleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MonResultSimpleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.McisMonitoring) > 0 {
		for _, e := range m.McisMonitoring {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MonResultSimple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MonitorQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBenchmarkInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BenchmarkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Elapsed)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SpecId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.ResultArray) > 0 {
		for _, e := range m.ResultArray {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BmQryAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BmQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BmReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisPolicyInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListMcisPolicyInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisPolicyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Policy) > 0 {
		for _, e := range m.Policy {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.ActionLog)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoCondition != nil {
		l = m.AutoCondition.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.AutoAction != nil {
		l = m.AutoAction.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AutoCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Operand)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.EvaluationPeriod)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.EvaluationValue) > 0 {
		for _, s := range m.EvaluationValue {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AutoAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActionType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Vm != nil {
		l = m.Vm.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.PostCommand != nil {
		l = m.PostCommand.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisPolicyCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisPolicyAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisPolicyQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListConnConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.DriverName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CredentialName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnConfigQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnConfigName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRegionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueInfoList) > 0 {
		for _, e := range m.KeyValueInfoList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListConfigInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InspectMcirInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListInspectMcirInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InspectMcirInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourcesOnCsp) > 0 {
		for _, e := range m.ResourcesOnCsp {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.ResourcesOnSpider) > 0 {
		for _, e := range m.ResourcesOnSpider {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.ResourcesOnTumblebug) > 0 {
		for _, e := range m.ResourcesOnTumblebug {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McirResourceOnCspOrSpider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspNativeId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McirResourceOnTumblebug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspNativeId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ObjectKey)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InspectVmInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListInspectVmInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InspectVmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourcesOnCsp) > 0 {
		for _, e := range m.ResourcesOnCsp {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.ResourcesOnSpider) > 0 {
		for _, e := range m.ResourcesOnSpider {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.ResourcesOnTumblebug) > 0 {
		for _, e := range m.ResourcesOnTumblebug {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmResourceOnCspOrSpider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspNativeId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmResourceOnTumblebug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspNativeId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ObjectKey)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InspectQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ObjectInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Item)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListObjectInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ObjectQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCbtumblebug(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCbtumblebug(x uint64) (n int) {
	return sovCbtumblebug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BooleanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NSInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNSInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNSInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNSInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &NSInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NsReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdList = append(m.IdList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbImageInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbImageInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbImageInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbImageInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbImageInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbImageInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestOs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuestOs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssociatedObjectList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssociatedObjectList = append(m.AssociatedObjectList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbImageReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchImageQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchImageQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchImageQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchImageQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchImageQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchImageQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderImageInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderImageInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderImageInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &SpiderImageInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSpiderImageInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSpiderImageInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSpiderImageInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SpiderImageInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestOs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuestOs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupImageListQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupImageListQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupImageListQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupImageQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupImageQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupImageQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSshKeyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSshKeyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSshKeyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSshKeyInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbSshKeyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbSshKeyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbSshKeyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbSshKeyInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSshKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSshKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSshKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSshKeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSshKeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifiedUserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssociatedObjectList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssociatedObjectList = append(m.AssociatedObjectList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSshKeyCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSshKeyCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSshKeyCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSshKeyReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSshKeyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSshKeyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSshKeyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSpecInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSpecInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbSpecInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumVcpu", wireType)
			}
			m.NumVcpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumVcpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCore", wireType)
			}
			m.NumCore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumCore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemGib", wireType)
			}
			m.MemGib = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemGib |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageGib", wireType)
			}
			m.StorageGib = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageGib |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPerHour", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CostPerHour = float32(math.Float32frombits(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumStorage", wireType)
			}
			m.NumStorage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumStorage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumStorage", wireType)
			}
			m.MaxNumStorage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumStorage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTotalStorageTib", wireType)
			}
			m.MaxTotalStorageTib = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTotalStorageTib |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetBwGbps", wireType)
			}
			m.NetBwGbps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetBwGbps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbsBwMbps", wireType)
			}
			m.EbsBwMbps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EbsBwMbps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGpu", wireType)
			}
			m.NumGpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumGpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpumemGib", wireType)
			}
			m.GpumemGib = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GpumemGib |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuP2P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuP2P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderInFilteredResult", wireType)
			}
			m.OrderInFilteredResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderInFilteredResult |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_01", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_01 = float32(math.Float32frombits(v))
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_02", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_02 = float32(math.Float32frombits(v))
		case 33:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_03", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_03 = float32(math.Float32frombits(v))
		case 34:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_04", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_04 = float32(math.Float32frombits(v))
		case 35:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_05", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_05 = float32(math.Float32frombits(v))
		case 36:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_06", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_06 = float32(math.Float32frombits(v))
		case 37:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_07", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_07 = float32(math.Float32frombits(v))
		case 38:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_08", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_08 = float32(math.Float32frombits(v))
		case 39:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_09", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_09 = float32(math.Float32frombits(v))
		case 40:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_10", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EvaluationScore_10 = float32(math.Float32frombits(v))
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssociatedObjectList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssociatedObjectList = append(m.AssociatedObjectList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSpecReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchSpecQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchSpecQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchSpecQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &SpiderSpecInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSpiderSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSpiderSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSpiderSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SpiderSpecInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSpecInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSpecInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSpecInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VCpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VCpu == nil {
				m.VCpu = &SpiderVCpuInfo{}
			}
			if err := m.VCpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpu = append(m.Gpu, &SpiderGpuInfo{})
			if err := m.Gpu[len(m.Gpu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderVCpuInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderVCpuInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderVCpuInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderGpuInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderGpuInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderGpuInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mfr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mfr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSpecListQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSpecListQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSpecListQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSpecQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSpecQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSpecQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterSpecsByRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterSpecsByRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterSpecsByRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &SpecRangeFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecRangeFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecRangeFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecRangeFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumVCPU", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NumVCPU == nil {
				m.NumVCPU = &Range{}
			}
			if err := m.NumVCPU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NumCore == nil {
				m.NumCore = &Range{}
			}
			if err := m.NumCore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem_GiB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mem_GiB == nil {
				m.Mem_GiB = &Range{}
			}
			if err := m.Mem_GiB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage_GiB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Storage_GiB == nil {
				m.Storage_GiB = &Range{}
			}
			if err := m.Storage_GiB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPerHour", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CostPerHour == nil {
				m.CostPerHour = &Range{}
			}
			if err := m.CostPerHour.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NumStorage == nil {
				m.NumStorage = &Range{}
			}
			if err := m.NumStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxNumStorage == nil {
				m.MaxNumStorage = &Range{}
			}
			if err := m.MaxNumStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTotalStorage_TiB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTotalStorage_TiB == nil {
				m.MaxTotalStorage_TiB = &Range{}
			}
			if err := m.MaxTotalStorage_TiB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetBw_Gbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetBw_Gbps == nil {
				m.NetBw_Gbps = &Range{}
			}
			if err := m.NetBw_Gbps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbsBw_Mbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EbsBw_Mbps == nil {
				m.EbsBw_Mbps = &Range{}
			}
			if err := m.EbsBw_Mbps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NumGpu == nil {
				m.NumGpu = &Range{}
			}
			if err := m.NumGpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpumem_GiB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gpumem_GiB == nil {
				m.Gpumem_GiB = &Range{}
			}
			if err := m.Gpumem_GiB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuP2P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuP2P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_01", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_01 == nil {
				m.EvaluationScore_01 = &Range{}
			}
			if err := m.EvaluationScore_01.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_02", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_02 == nil {
				m.EvaluationScore_02 = &Range{}
			}
			if err := m.EvaluationScore_02.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_03", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_03 == nil {
				m.EvaluationScore_03 = &Range{}
			}
			if err := m.EvaluationScore_03.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_04", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_04 == nil {
				m.EvaluationScore_04 = &Range{}
			}
			if err := m.EvaluationScore_04.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_05", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_05 == nil {
				m.EvaluationScore_05 = &Range{}
			}
			if err := m.EvaluationScore_05.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_06", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_06 == nil {
				m.EvaluationScore_06 = &Range{}
			}
			if err := m.EvaluationScore_06.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_07", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_07 == nil {
				m.EvaluationScore_07 = &Range{}
			}
			if err := m.EvaluationScore_07.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_08", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_08 == nil {
				m.EvaluationScore_08 = &Range{}
			}
			if err := m.EvaluationScore_08.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_09", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_09 == nil {
				m.EvaluationScore_09 = &Range{}
			}
			if err := m.EvaluationScore_09.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationScore_10", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvaluationScore_10 == nil {
				m.EvaluationScore_10 = &Range{}
			}
			if err := m.EvaluationScore_10.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Min = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Max = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbSpecInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSecurityGroupInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSecurityGroupInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSecurityGroupInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSecurityGroupInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbSecurityGroupInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbSecurityGroupInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbSecurityGroupInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbSecurityGroupInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSecurityGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSecurityGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSecurityGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRules = append(m.FirewallRules, &SpiderSecurityRuleInfo{})
			if err := m.FirewallRules[len(m.FirewallRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSecurityGroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSecurityGroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSecurityGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSecurityGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssociatedObjectList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssociatedObjectList = append(m.AssociatedObjectList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSecurityRuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSecurityRuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSecurityRuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSecurityGroupCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSecurityGroupCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSecurityGroupCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSecurityGroupReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSecurityGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSecurityGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSecurityGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRules = append(m.FirewallRules, &SpiderSecurityRuleInfo{})
			if err := m.FirewallRules[len(m.FirewallRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVNetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVNetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVNetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVNetInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbVNetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbVNetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbVNetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbVNetInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVNetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVNetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVNetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidrBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidrBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetInfoList = append(m.SubnetInfoList, &SpiderSubnetInfo{})
			if err := m.SubnetInfoList[len(m.SubnetInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspVnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspVnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspVnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspVnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssociatedObjectList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssociatedObjectList = append(m.AssociatedObjectList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSubnetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSubnetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSubnetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVNetCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVNetCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVNetCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVNetReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVNetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVNetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVNetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidrBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidrBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetInfoList = append(m.SubnetInfoList, &SpiderSubnetReqInfo{})
			if err := m.SubnetInfoList[len(m.SubnetInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSubnetReqInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSubnetReqInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSubnetReqInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbMcisInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbMcisInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbMcisInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbMcisInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbMcisInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vm = append(m.Vm, &TbVmInfo{})
			if err := m.Vm[len(m.Vm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallMonAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallMonAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmGroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmGroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &GeoLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonAgentStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonAgentStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &RegionInfo{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBootDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBootDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBlockDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBlockDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupIds = append(m.SecurityGroupIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspViewVmDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CspViewVmDetail == nil {
				m.CspViewVmDetail = &SpiderVMInfo{}
			}
			if err := m.CspViewVmDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Latitude = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Longitude = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BriefAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BriefAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderVMInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderVMInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderVMInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupNames = append(m.SecurityGroupNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPairName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPairName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserPasswd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserPasswd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageIid == nil {
				m.ImageIid = &IID{}
			}
			if err := m.ImageIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIid == nil {
				m.VpcIid = &IID{}
			}
			if err := m.VpcIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubnetIid == nil {
				m.SubnetIid = &IID{}
			}
			if err := m.SubnetIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupIids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupIids = append(m.SecurityGroupIids, &IID{})
			if err := m.SecurityGroupIids[len(m.SecurityGroupIids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPairIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyPairIid == nil {
				m.KeyPairIid = &IID{}
			}
			if err := m.KeyPairIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &RegionInfo{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBootDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBootDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBlockDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBlockDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshAccessPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshAccessPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbMcisReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallMonAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallMonAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vm = append(m.Vm, &TbVmReq{})
			if err := m.Vm[len(m.Vm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmGroupSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmGroupSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupIds = append(m.SecurityGroupIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbMcisStatusInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbMcisStatusInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbMcisStatusInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &McisStatusInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisStatusInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisStatusInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisStatusInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisStatusInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallMonAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallMonAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterSshPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterSshPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vm = append(m.Vm, &TbVmStatusInfo{})
			if err := m.Vm[len(m.Vm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspVmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspVmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonAgentStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonAgentStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &GeoLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVmInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVmInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmGroupCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmGroupCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmGroupCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVmReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmStatusInfoesponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmStatusInfoesponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmStatusInfoesponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVmStatusInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisRecommendInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmRecommend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmRecommend = append(m.VmRecommend, &TbVmRecommendInfo{})
			if err := m.VmRecommend[len(m.VmRecommend)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementParam = append(m.PlacementParam, &KeyValue{})
			if err := m.PlacementParam[len(m.PlacementParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmRecommendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmRecommendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmRecommendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VmReq == nil {
				m.VmReq = &TbVmRecommendReq{}
			}
			if err := m.VmReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmPriority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmPriority = append(m.VmPriority, &TbVmPriority{})
			if err := m.VmPriority[len(m.VmPriority)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementParam = append(m.PlacementParam, &KeyValue{})
			if err := m.PlacementParam[len(m.PlacementParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmPriority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmPriority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmPriority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Priority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VmSpec == nil {
				m.VmSpec = &TbSpecInfo{}
			}
			if err := m.VmSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisRecommendReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmReq = append(m.VmReq, &TbVmRecommendReq{})
			if err := m.VmReq[len(m.VmReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementParam = append(m.PlacementParam, &KeyValue{})
			if err := m.PlacementParam[len(m.PlacementParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResultNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxResultNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmRecommendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmRecommendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmRecommendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResultNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxResultNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VcpuSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VcpuSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemorySize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementParam = append(m.PlacementParam, &KeyValue{})
			if err := m.PlacementParam[len(m.PlacementParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendVmCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendVmCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendVmCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &DeploymentPlan{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &FilterInfo{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Priority == nil {
				m.Priority = &PriorityInfo{}
			}
			if err := m.Priority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = append(m.Policy, &FilterCondition{})
			if err := m.Policy[len(m.Policy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = append(m.Condition, &Operation{})
			if err := m.Condition[len(m.Condition)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriorityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriorityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriorityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = append(m.Policy, &PriorityCondition{})
			if err := m.Policy[len(m.Policy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriorityCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriorityCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriorityCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = append(m.Parameter, &ParameterKeyVal{})
			if err := m.Parameter[len(m.Parameter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParameterKeyVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParameterKeyVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParameterKeyVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCmdMcisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCmdMcisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCmdMcisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CmdMcisResult{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdMcisResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdMcisResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdMcisResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisCmdCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisCmdCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisCmdCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisCmdReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisCmdVmCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisCmdVmCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisCmdVmCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisCmdReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisCmdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisCmdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisCmdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAgentInstallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAgentInstallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAgentInstallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CmdMcisResult{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitorResultSimpleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitorResultSimpleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitorResultSimpleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &MonResultSimpleInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonResultSimpleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonResultSimpleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonResultSimpleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisMonitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisMonitoring = append(m.McisMonitoring, &MonResultSimple{})
			if err := m.McisMonitoring[len(m.McisMonitoring)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonResultSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonResultSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonResultSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitorQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitorQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitorQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBenchmarkInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBenchmarkInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBenchmarkInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BenchmarkInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BenchmarkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BenchmarkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BenchmarkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elapsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elapsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultArray = append(m.ResultArray, &BenchmarkInfo{})
			if err := m.ResultArray[len(m.ResultArray)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BmQryAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BmQryAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BmQryAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &BmReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BmQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BmQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BmQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &BmReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BmReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BmReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BmReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisPolicyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisPolicyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisPolicyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisPolicyInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMcisPolicyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMcisPolicyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMcisPolicyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &McisPolicyInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisPolicyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisPolicyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisPolicyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = append(m.Policy, &Policy{})
			if err := m.Policy[len(m.Policy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionLog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionLog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCondition == nil {
				m.AutoCondition = &AutoCondition{}
			}
			if err := m.AutoCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoAction == nil {
				m.AutoAction = &AutoAction{}
			}
			if err := m.AutoAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationValue = append(m.EvaluationValue, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vm == nil {
				m.Vm = &TbVmInfo{}
			}
			if err := m.Vm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostCommand == nil {
				m.PostCommand = &McisCmdReq{}
			}
			if err := m.PostCommand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisPolicyCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisPolicyCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisPolicyCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisPolicyInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisPolicyAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisPolicyAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisPolicyAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisPolicyQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisPolicyQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisPolicyQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ConnConfig{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListConnConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListConnConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListConnConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ConnConfig{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnConfigQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnConfigQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnConfigQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnConfigName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Region{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRegionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Region{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueInfoList = append(m.KeyValueInfoList, &KeyValue{})
			if err := m.KeyValueInfoList[len(m.KeyValueInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ConfigInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListConfigInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListConfigInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListConfigInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ConfigInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ConfigReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InspectMcirInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InspectMcirInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InspectMcirInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &InspectMcirInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInspectMcirInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInspectMcirInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInspectMcirInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &InspectMcirInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InspectMcirInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InspectMcirInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InspectMcirInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesOnCsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcesOnCsp = append(m.ResourcesOnCsp, &McirResourceOnCspOrSpider{})
			if err := m.ResourcesOnCsp[len(m.ResourcesOnCsp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesOnSpider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcesOnSpider = append(m.ResourcesOnSpider, &McirResourceOnCspOrSpider{})
			if err := m.ResourcesOnSpider[len(m.ResourcesOnSpider)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesOnTumblebug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcesOnTumblebug = append(m.ResourcesOnTumblebug, &McirResourceOnTumblebug{})
			if err := m.ResourcesOnTumblebug[len(m.ResourcesOnTumblebug)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McirResourceOnCspOrSpider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McirResourceOnCspOrSpider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McirResourceOnCspOrSpider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspNativeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspNativeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McirResourceOnTumblebug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McirResourceOnTumblebug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McirResourceOnTumblebug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspNativeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspNativeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InspectVmInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InspectVmInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InspectVmInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &InspectVmInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInspectVmInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInspectVmInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInspectVmInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &InspectVmInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InspectVmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InspectVmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InspectVmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesOnCsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcesOnCsp = append(m.ResourcesOnCsp, &VmResourceOnCspOrSpider{})
			if err := m.ResourcesOnCsp[len(m.ResourcesOnCsp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesOnSpider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcesOnSpider = append(m.ResourcesOnSpider, &VmResourceOnCspOrSpider{})
			if err := m.ResourcesOnSpider[len(m.ResourcesOnSpider)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesOnTumblebug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcesOnTumblebug = append(m.ResourcesOnTumblebug, &VmResourceOnTumblebug{})
			if err := m.ResourcesOnTumblebug[len(m.ResourcesOnTumblebug)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmResourceOnCspOrSpider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmResourceOnCspOrSpider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmResourceOnCspOrSpider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspNativeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspNativeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmResourceOnTumblebug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmResourceOnTumblebug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmResourceOnTumblebug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspNativeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspNativeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InspectQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InspectQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InspectQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListObjectInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListObjectInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListObjectInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCbtumblebug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCbtumblebug
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCbtumblebug
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCbtumblebug
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCbtumblebug        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCbtumblebug          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCbtumblebug = fmt.Errorf("proto: unexpected end of group")
)

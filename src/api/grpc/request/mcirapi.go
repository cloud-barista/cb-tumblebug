package request

import (
	"encoding/json"
	"errors"
	"io"
	"time"

	gc "github.com/cloud-barista/cb-tumblebug/src/api/grpc/common"
	"github.com/cloud-barista/cb-tumblebug/src/api/grpc/config"
	"github.com/cloud-barista/cb-tumblebug/src/api/grpc/logger"
	pb "github.com/cloud-barista/cb-tumblebug/src/api/grpc/protobuf/cbtumblebug"
	"github.com/cloud-barista/cb-tumblebug/src/api/grpc/request/mcir"

	core_mcir "github.com/cloud-barista/cb-tumblebug/src/core/mcir"

	"google.golang.org/grpc"
)

// ===== [ Comtants and Variables ] =====

// ===== [ Types ] =====

// MCIRApi is ...
type MCIRApi struct {
	gConf        *config.GrpcConfig
	conn         *grpc.ClientConn
	jaegerCloser io.Closer
	clientMCIR   pb.MCIRClient
	requestMCIR  *mcir.MCIRRequest
	inType       string
	outType      string
}

// KeyValue is ...
type KeyValue struct {
	Key   string `yaml:"Key" json:"Key"`
	Value string `yaml:"Value" json:"Value"`
}

// IID is for Defined by & used for CB-Spider
type IID struct {
	NameId   string `yaml:"NameId" json:"NameId"`
	SystemId string `yaml:"SystemId" json:"SystemId"`
}

// TbImageCreateRequest is for Wrapper struct
type TbImageCreateRequest struct {
	NsId string               `yaml:"nsId" json:"nsId"`
	Item core_mcir.TbImageReq `yaml:"image" json:"image"`
}

// TbImageReq
// type TbImageReq struct {
// 	Name           string `yaml:"name" json:"name"`
// 	ConnectionName string `yaml:"connectionName" json:"connectionName"`
// 	CspImageId     string `yaml:"cspImageId" json:"cspImageId"`
// 	Description    string `yaml:"description" json:"description"`
// }

// TbImageInfoRequest is for Wrapper struct
type TbImageInfoRequest struct {
	NsId string                `yaml:"nsId" json:"nsId"`
	Item core_mcir.TbImageInfo `yaml:"image" json:"image"`
}

// TbImageInfo
// type TbImageInfo struct {
// 	Id                   string     `yaml:"id" json:"id"`
// 	Name                 string     `yaml:"name" json:"name"`
// 	ConnectionName       string     `yaml:"connectionName" json:"connectionName"`
// 	CspImageId           string     `yaml:"cspImageId" json:"cspImageId"`
// 	CspImageName         string     `yaml:"cspImageName" json:"cspImageName"`
// 	Description          string     `yaml:"description" json:"description"`
// 	CreationDate         string     `yaml:"creationDate" json:"creationDate"`
// 	GuestOS              string     `yaml:"guestOS" json:"guestOS"`
// 	Status               string     `yaml:"status" json:"status"`
// 	KeyValueList         []KeyValue `yaml:"keyValueList" json:"keyValueList"`
// 	AssociatedObjectList []string   `yaml:"associatedObjectList" json:"associatedObjectList"`
// 	IsAutoGenerated      bool       `yaml:"isAutoGenerated" json:"isAutoGenerated"`
// }

// SearchImageQryRequest is for Wrapper struct
type SearchImageQryRequest struct {
	NsId     string   `yaml:"nsId" json:"nsId"`
	Keywords []string `yaml:"keywords" json:"keywords"`
}

// TbSecurityGroupCreateRequest is for Wrapper struct
type TbSecurityGroupCreateRequest struct {
	NsId string                       `yaml:"nsId" json:"nsId"`
	Item core_mcir.TbSecurityGroupReq `yaml:"securityGroup" json:"securityGroup"`
}

// TbSecurityGroupReq
// type TbSecurityGroupReq struct { // Tumblebug
// 	Name           string                    `yaml:"name" json:"name"`
// 	ConnectionName string                    `yaml:"connectionName" json:"connectionName"`
// 	VNetId         string                    `yaml:"vNetId" json:"vNetId"`
// 	Description    string                    `yaml:"description" json:"description"`
// 	FirewallRules  *[]SpiderSecurityRuleInfo `yaml:"firewallRules" json:"firewallRules"`
// }

// SpiderSecurityRuleInfo
// type SpiderSecurityRuleInfo struct {
// 	FromPort   string `yaml:"fromPort" json:"fromPort"`
// 	ToPort     string `yaml:"toPort" json:"toPort"`
// 	IPProtocol string `yaml:"ipProtocol" json:"ipProtocol"`
// 	Direction  string `yaml:"direction" json:"direction"`
// 	CIDR       string `yaml:"cidr" json:"cidr"`
// }

// TbSpecCreateRequest is for Wrapper struct
type TbSpecCreateRequest struct {
	NsId string              `yaml:"nsId" json:"nsId"`
	Item core_mcir.TbSpecReq `yaml:"spec" json:"spec"`
}

// TbSpecReq
// type TbSpecReq struct { // Tumblebug
// 	Name           string `yaml:"name" json:"name"`
// 	ConnectionName string `yaml:"connectionName" json:"connectionName"`
// 	CspSpecName    string `yaml:"cspSpecName" json:"cspSpecName"`
// 	Description    string `yaml:"description" json:"description"`
// }

// TbSpecInfoRequest is for Wrapper struct
type TbSpecInfoRequest struct {
	NsId string               `yaml:"nsId" json:"nsId"`
	Item core_mcir.TbSpecInfo `yaml:"spec" json:"spec"`
}

// TbSpecInfo
// type TbSpecInfo struct { // Tumblebug
// 	Namespace             string   `json:"namespace"` // required to save in RDB
// 	Id                    string   `json:"id"`
// 	Name                  string   `json:"name"`
// 	ConnectionName        string   `json:"connectionName"`
// 	CspSpecName           string   `json:"cspSpecName"`
// 	OsType                string   `json:"osType"`
// 	NumvCPU               uint16   `json:"numvCPU"`
// 	NumCore               uint16   `json:"numCore"`
// 	MemGiB                uint16   `json:"memGiB"`
// 	StorageGiB            uint32   `json:"storageGiB"`
// 	Description           string   `json:"description"`
// 	CostPerHour           float32  `json:"costPerHour"`
// 	NumStorage            uint8    `json:"numStorage"`
// 	MaxNumStorage         uint8    `json:"maxNumStorage"`
// 	MaxTotalStorageTiB    uint16   `json:"maxTotalStorageTiB"`
// 	NetBwGbps             uint16   `json:"netBwGbps"`
// 	EbsBwMbps             uint32   `json:"ebsBwMbps"`
// 	GpuModel              string   `json:"gpuModel"`
// 	NumGpu                uint8    `json:"numGpu"`
// 	GpuMemGiB             uint16   `json:"gpuMemGiB"`
// 	GpuP2p                string   `json:"gpuP2p"`
// 	OrderInFilteredResult uint16   `json:"orderInFilteredResult"`
// 	EvaluationStatus      string   `json:"evaluationStatus"`
// 	EvaluationScore01     float32  `json:"evaluationScore01"`
// 	EvaluationScore02     float32  `json:"evaluationScore02"`
// 	EvaluationScore03     float32  `json:"evaluationScore03"`
// 	EvaluationScore04     float32  `json:"evaluationScore04"`
// 	EvaluationScore05     float32  `json:"evaluationScore05"`
// 	EvaluationScore06     float32  `json:"evaluationScore06"`
// 	EvaluationScore07     float32  `json:"evaluationScore07"`
// 	EvaluationScore08     float32  `json:"evaluationScore08"`
// 	EvaluationScore09     float32  `json:"evaluationScore09"`
// 	EvaluationScore10     float32  `json:"evaluationScore10"`
// 	AssociatedObjectList  []string `json:"associatedObjectList"`
// 	IsAutoGenerated       bool     `json:"isAutoGenerated"`
// }

// TbSshKeyCreateRequest is for Wrapper struct
type TbSshKeyCreateRequest struct {
	NsId string                `yaml:"nsId" json:"nsId"`
	Item core_mcir.TbSshKeyReq `yaml:"sshKey" json:"sshKey"`
}

// TbSshKeyReq
// type TbSshKeyReq struct {
// 	Name           string `yaml:"name" json:"name"`
// 	ConnectionName string `yaml:"connectionName" json:"connectionName"`
// 	Description    string `yaml:"description" json:"description"`
// }

// TbVNetCreateRequest is for Wrapper struct
type TbVNetCreateRequest struct {
	NsId string              `yaml:"nsId" json:"nsId"`
	Item core_mcir.TbVNetReq `yaml:"vNet" json:"vNet"`
}

// TbVNetReq
// type TbVNetReq struct { // Tumblebug
// 	Name           string                `yaml:"name" json:"name"`
// 	ConnectionName string                `yaml:"connectionName" json:"connectionName"`
// 	CidrBlock      string                `yaml:"cidrBlock" json:"cidrBlock"`
// 	SubnetInfoList []SpiderSubnetReqInfo `yaml:"subnetInfoList" json:"subnetInfoList"`
// 	Description    string                `yaml:"description" json:"description"`
// }

// SpiderSubnetReqInfo
// type SpiderSubnetReqInfo struct {
// 	Name         string     `yaml:"Name" json:"Name"`
// 	IPv4_CIDR    string     `yaml:"IPv4_CIDR" json:"IPv4_CIDR"`
// 	KeyValueList []KeyValue `yaml:"KeyValueList" json:"KeyValueList"`
// }

// ===== [ Implementatiom ] =====

// SetServerAddr is to Set Tumblebug server address
func (m *MCIRApi) SetServerAddr(addr string) error {
	if addr == "" {
		return errors.New("parameter is empty")
	}

	m.gConf.GSL.TumblebugCli.ServerAddr = addr
	return nil
}

// GetServerAddr is to Get Tumblebug server address
func (m *MCIRApi) GetServerAddr() (string, error) {
	return m.gConf.GSL.TumblebugCli.ServerAddr, nil
}

// SetTLSCA is to Set TLS CA
func (m *MCIRApi) SetTLSCA(tlsCAFile string) error {
	if tlsCAFile == "" {
		return errors.New("parameter is empty")
	}

	if m.gConf.GSL.TumblebugCli.TLS == nil {
		m.gConf.GSL.TumblebugCli.TLS = &config.TLSConfig{}
	}

	m.gConf.GSL.TumblebugCli.TLS.TLSCA = tlsCAFile
	return nil
}

// GetTLSCA is to Get TLS CA
func (m *MCIRApi) GetTLSCA() (string, error) {
	if m.gConf.GSL.TumblebugCli.TLS == nil {
		return "", nil
	}

	return m.gConf.GSL.TumblebugCli.TLS.TLSCA, nil
}

// SetTimeout is to set timeout
func (m *MCIRApi) SetTimeout(timeout time.Duration) error {
	m.gConf.GSL.TumblebugCli.Timeout = timeout
	return nil
}

// GetTimeout is to get timeout
func (m *MCIRApi) GetTimeout() (time.Duration, error) {
	return m.gConf.GSL.TumblebugCli.Timeout, nil
}

// SetJWTToken is to Set JWT auth token
func (m *MCIRApi) SetJWTToken(token string) error {
	if token == "" {
		return errors.New("parameter is empty")
	}

	if m.gConf.GSL.TumblebugCli.Interceptors == nil {
		m.gConf.GSL.TumblebugCli.Interceptors = &config.InterceptorsConfig{}
		m.gConf.GSL.TumblebugCli.Interceptors.AuthJWT = &config.AuthJWTConfig{}
	}
	if m.gConf.GSL.TumblebugCli.Interceptors.AuthJWT == nil {
		m.gConf.GSL.TumblebugCli.Interceptors.AuthJWT = &config.AuthJWTConfig{}
	}

	m.gConf.GSL.TumblebugCli.Interceptors.AuthJWT.JWTToken = token
	return nil
}

// GetJWTToken is to Get JWT auth token
func (m *MCIRApi) GetJWTToken() (string, error) {
	if m.gConf.GSL.TumblebugCli.Interceptors == nil {
		return "", nil
	}
	if m.gConf.GSL.TumblebugCli.Interceptors.AuthJWT == nil {
		return "", nil
	}

	return m.gConf.GSL.TumblebugCli.Interceptors.AuthJWT.JWTToken, nil
}

// SetConfigPath is to set config path
func (m *MCIRApi) SetConfigPath(configFile string) error {
	logger := logger.NewLogger()

	// Make new config parser that uses Viper library
	parser := config.MakeParser()

	var (
		gConf config.GrpcConfig
		err   error
	)

	if configFile == "" {
		logger.Error("Please, provide the path to your configuration file")
		return errors.New("configuration file are not specified")
	}

	logger.Debug("Parsing configuration file: ", configFile)
	if gConf, err = parser.GrpcParse(configFile); err != nil {
		logger.Error("ERROR - Parsing the configuration file.\n", err.Error())
		return err
	}

	// Check input data
	tumblebugcli := gConf.GSL.TumblebugCli

	if tumblebugcli == nil {
		return errors.New("tumblebugcli field are not specified")
	}

	if tumblebugcli.ServerAddr == "" {
		return errors.New("tumblebugcli.server_addr field are not specified")
	}

	if tumblebugcli.Timeout == 0 {
		tumblebugcli.Timeout = 90 * time.Second
	}

	if tumblebugcli.TLS != nil {
		if tumblebugcli.TLS.TLSCA == "" {
			return errors.New("tumblebugcli.tls.tls_ca field are not specified")
		}
	}

	if tumblebugcli.Interceptors != nil {
		if tumblebugcli.Interceptors.AuthJWT != nil {
			if tumblebugcli.Interceptors.AuthJWT.JWTToken == "" {
				return errors.New("tumblebugcli.interceptors.auth_jwt.jwt_token field are not specified")
			}
		}
		if tumblebugcli.Interceptors.Opentracing != nil {
			if tumblebugcli.Interceptors.Opentracing.Jaeger != nil {
				if tumblebugcli.Interceptors.Opentracing.Jaeger.Endpoint == "" {
					return errors.New("tumblebugcli.interceptors.opentracing.jaeger.endpoint field are not specified")
				}
			}
		}
	}

	m.gConf = &gConf
	return nil
}

// Open is to Open new connection
func (m *MCIRApi) Open() error {

	tumblebugcli := m.gConf.GSL.TumblebugCli

	// grpc 커넥션 생성
	cbconn, closer, err := gc.NewCBConnection(tumblebugcli)
	if err != nil {
		return err
	}

	if closer != nil {
		m.jaegerCloser = closer
	}

	m.conn = cbconn.Conn

	// grpc 클라이언트 생성
	m.clientMCIR = pb.NewMCIRClient(m.conn)

	// grpc 호출 Wrapper
	m.requestMCIR = &mcir.MCIRRequest{Client: m.clientMCIR, Timeout: tumblebugcli.Timeout, InType: m.inType, OutType: m.outType}

	return nil
}

// Close is to Close connection
func (m *MCIRApi) Close() {
	if m.conn != nil {
		m.conn.Close()
	}
	if m.jaegerCloser != nil {
		m.jaegerCloser.Close()
	}

	m.jaegerCloser = nil
	m.conn = nil
	m.clientMCIR = nil
	m.requestMCIR = nil
}

// SetInType is to Set input doc type (json/yaml)
func (m *MCIRApi) SetInType(in string) error {
	if in == "json" {
		m.inType = in
	} else if in == "yaml" {
		m.inType = in
	} else {
		return errors.New("input type is not supported")
	}

	if m.requestMCIR != nil {
		m.requestMCIR.InType = m.inType
	}

	return nil
}

// GetInType is to Get input doc type (json/yaml)
func (m *MCIRApi) GetInType() (string, error) {
	return m.inType, nil
}

// SetOutType is to Set output doc type (json/yaml)
func (m *MCIRApi) SetOutType(out string) error {
	if out == "json" {
		m.outType = out
	} else if out == "yaml" {
		m.outType = out
	} else {
		return errors.New("output type is not supported")
	}

	if m.requestMCIR != nil {
		m.requestMCIR.OutType = m.outType
	}

	return nil
}

// GetOutType is to Get output doc type (json/yaml)
func (m *MCIRApi) GetOutType() (string, error) {
	return m.outType, nil
}

// CreateImageWithInfo is to create image with information
func (m *MCIRApi) CreateImageWithInfo(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.CreateImageWithInfo()
}

// CreateImageWithInfoByParam is to create image by parameters
func (m *MCIRApi) CreateImageWithInfoByParam(req *TbImageInfoRequest) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	j, err := json.Marshal(req)
	if err != nil {
		return "", err
	}
	m.requestMCIR.InData = string(j)
	result, err := m.requestMCIR.CreateImageWithInfo()
	m.SetInType(holdType)

	return result, err
}

// CreateImageWithID is to create image with ID
func (m *MCIRApi) CreateImageWithID(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.CreateImageWithID()
}

// CreateImageWithIDByParam is to create image with ID by parameters
func (m *MCIRApi) CreateImageWithIDByParam(req *TbImageCreateRequest) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	j, err := json.Marshal(req)
	if err != nil {
		return "", err
	}
	m.requestMCIR.InData = string(j)
	result, err := m.requestMCIR.CreateImageWithID()
	m.SetInType(holdType)

	return result, err
}

// ListImage is to list images
func (m *MCIRApi) ListImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListImage()
}

// ListImageByParam is to list images by parameters
func (m *MCIRApi) ListImageByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"image"}`
	result, err := m.requestMCIR.ListImage()
	m.SetInType(holdType)

	return result, err
}

// ListImageId is to list image IDs
func (m *MCIRApi) ListImageId(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListImageId()
}

// ListImageIdByParam is to list image IDs by parameters
func (m *MCIRApi) ListImageIdByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"image"}`
	result, err := m.requestMCIR.ListImageId()
	m.SetInType(holdType)

	return result, err
}

// GetImage is to get image
func (m *MCIRApi) GetImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.GetImage()
}

// GetImageByParam is to get image by parameters
func (m *MCIRApi) GetImageByParam(nameSpaceID string, resourceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"image", "resourceId":"` + resourceID + `"}`
	result, err := m.requestMCIR.GetImage()
	m.SetInType(holdType)

	return result, err
}

// DeleteImage is to delete image
func (m *MCIRApi) DeleteImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteImage()
}

// DeleteImageByParam is to Delete Image By Param
func (m *MCIRApi) DeleteImageByParam(nameSpaceID string, resourceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"image", "resourceId":"` + resourceID + `", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteImage()
	m.SetInType(holdType)

	return result, err
}

// DeleteAllImage is to delete all images
func (m *MCIRApi) DeleteAllImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteAllImage()
}

// DeleteAllImageByParam is to delete all images by parameters
func (m *MCIRApi) DeleteAllImageByParam(nameSpaceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"image", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteAllImage()
	m.SetInType(holdType)

	return result, err
}

// FetchImage is to fetch images
func (m *MCIRApi) FetchImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.FetchImage()
}

// FetchImageByParam is to fetch images by parameters
func (m *MCIRApi) FetchImageByParam(connConfigName string, nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"ConnectionName":"` + connConfigName + `", "nsId":"` + nameSpaceID + `"}`
	result, err := m.requestMCIR.FetchImage()
	m.SetInType(holdType)

	return result, err
}

// SearchImage is to search image
func (m *MCIRApi) SearchImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.SearchImage()
}

// SearchImageByParam is to search image by parameters
func (m *MCIRApi) SearchImageByParam(req *SearchImageQryRequest) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	j, err := json.Marshal(req)
	if err != nil {
		return "", err
	}
	m.requestMCIR.InData = string(j)
	result, err := m.requestMCIR.SearchImage()
	m.SetInType(holdType)

	return result, err
}

// ListLookupImage is to LookupImages
func (m *MCIRApi) ListLookupImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListLookupImage()
}

// ListLookupImageByParam is to LookupImages
func (m *MCIRApi) ListLookupImageByParam(connConfigName string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"ConnectionName":"` + connConfigName + `"}`
	result, err := m.requestMCIR.ListLookupImage()
	m.SetInType(holdType)

	return result, err
}

// GetLookupImage is to LookupImage
func (m *MCIRApi) GetLookupImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.GetLookupImage()
}

// GetLookupImageByParam is to LookupImage
func (m *MCIRApi) GetLookupImageByParam(connConfigName string, cspImageId string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"ConnectionName":"` + connConfigName + `", "cspImageId": "` + cspImageId + `"}`
	result, err := m.requestMCIR.GetLookupImage()
	m.SetInType(holdType)

	return result, err
}

// UpdateImage is to update image
func (m *MCIRApi) UpdateImage(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.UpdateImage()
}

// CreateSecurityGroup is to create securityGroup
func (m *MCIRApi) CreateSecurityGroup(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.CreateSecurityGroup()
}

// CreateSecurityGroupByParam is to create securityGroup by parameters
func (m *MCIRApi) CreateSecurityGroupByParam(req *TbSecurityGroupCreateRequest) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	j, err := json.Marshal(req)
	if err != nil {
		return "", err
	}
	m.requestMCIR.InData = string(j)
	result, err := m.requestMCIR.CreateSecurityGroup()
	m.SetInType(holdType)

	return result, err
}

// ListSecurityGroup is to list securityGroups
func (m *MCIRApi) ListSecurityGroup(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListSecurityGroup()
}

// ListSecurityGroupByParam is to list securityGroups by parameters
func (m *MCIRApi) ListSecurityGroupByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"securityGroup"}`
	result, err := m.requestMCIR.ListSecurityGroup()
	m.SetInType(holdType)

	return result, err
}

// ListSecurityGroupId is to list securityGroup IDs
func (m *MCIRApi) ListSecurityGroupId(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListSecurityGroupId()
}

// ListSecurityGroupIdByParam is to list securityGroup IDs by parameters
func (m *MCIRApi) ListSecurityGroupIdByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"securityGroup"}`
	result, err := m.requestMCIR.ListSecurityGroupId()
	m.SetInType(holdType)

	return result, err
}

// GetSecurityGroup is to get securityGroup
func (m *MCIRApi) GetSecurityGroup(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.GetSecurityGroup()
}

// GetSecurityGroupByParam is to get securityGroup by parameters
func (m *MCIRApi) GetSecurityGroupByParam(nameSpaceID string, resourceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"securityGroup", "resourceId":"` + resourceID + `"}`
	result, err := m.requestMCIR.GetSecurityGroup()
	m.SetInType(holdType)

	return result, err
}

// DeleteSecurityGroup is to delete securityGroup
func (m *MCIRApi) DeleteSecurityGroup(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteSecurityGroup()
}

// DeleteSecurityGroupByParam is to delete securityGroup by parameters
func (m *MCIRApi) DeleteSecurityGroupByParam(nameSpaceID string, resourceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"securityGroup", "resourceId":"` + resourceID + `", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteSecurityGroup()
	m.SetInType(holdType)

	return result, err
}

// DeleteAllSecurityGroup is to delete all securityGroups
func (m *MCIRApi) DeleteAllSecurityGroup(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteAllSecurityGroup()
}

// DeleteAllSecurityGroupByParam is to delete all securityGroups by parameters
func (m *MCIRApi) DeleteAllSecurityGroupByParam(nameSpaceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"securityGroup", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteAllImage()
	m.SetInType(holdType)

	return result, err
}

// CreateSpecWithInfo is to create spec with information
func (m *MCIRApi) CreateSpecWithInfo(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.CreateSpecWithInfo()
}

// CreateSpecWithInfoByParam is to create spec with information by parameters
func (m *MCIRApi) CreateSpecWithInfoByParam(req *TbSpecInfoRequest) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	j, err := json.Marshal(req)
	if err != nil {
		return "", err
	}
	m.requestMCIR.InData = string(j)
	result, err := m.requestMCIR.CreateSpecWithInfo()
	m.SetInType(holdType)

	return result, err
}

// CreateSpecWithSpecName is to create spec with name
func (m *MCIRApi) CreateSpecWithSpecName(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.CreateSpecWithSpecName()
}

// CreateSpecWithSpecNameByParam is to create spec with name by parameters
func (m *MCIRApi) CreateSpecWithSpecNameByParam(req *TbSpecCreateRequest) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	j, err := json.Marshal(req)
	if err != nil {
		return "", err
	}
	m.requestMCIR.InData = string(j)
	result, err := m.requestMCIR.CreateSpecWithSpecName()
	m.SetInType(holdType)

	return result, err
}

// ListSpec is to list specs
func (m *MCIRApi) ListSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListSpec()
}

// ListSpecByParam is to list specs by parameters
func (m *MCIRApi) ListSpecByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"spec"}`
	result, err := m.requestMCIR.ListSpec()
	m.SetInType(holdType)

	return result, err
}

// ListSpecId is to list spec IDs
func (m *MCIRApi) ListSpecId(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListSpecId()
}

// ListSpecIdByParam is to list spec IDs by parameters
func (m *MCIRApi) ListSpecIdByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"spec"}`
	result, err := m.requestMCIR.ListSpecId()
	m.SetInType(holdType)

	return result, err
}

// GetSpec is to get a spec
func (m *MCIRApi) GetSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.GetSpec()
}

// GetSpecByParam is to get a spec by parameters
func (m *MCIRApi) GetSpecByParam(nameSpaceID string, resourceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"spec", "resourceId":"` + resourceID + `"}`
	result, err := m.requestMCIR.GetSpec()
	m.SetInType(holdType)

	return result, err
}

// DeleteSpec is to delete spec
func (m *MCIRApi) DeleteSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteSpec()
}

// DeleteSpecByParam is to delete spec by parameters
func (m *MCIRApi) DeleteSpecByParam(nameSpaceID string, resourceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"spec", "resourceId":"` + resourceID + `", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteSpec()
	m.SetInType(holdType)

	return result, err
}

// DeleteAllSpec is to delete all specs
func (m *MCIRApi) DeleteAllSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteAllSpec()
}

// DeleteAllSpecByParam is to delete specs by parameters
func (m *MCIRApi) DeleteAllSpecByParam(nameSpaceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"spec", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteAllSpec()
	m.SetInType(holdType)

	return result, err
}

// FetchSpec is to fetch specs
func (m *MCIRApi) FetchSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.FetchSpec()
}

// FetchSpecByParam is to fetch specs by parameters
func (m *MCIRApi) FetchSpecByParam(connConfigName string, nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"ConnectionName":"` + connConfigName + `", "nsId":"` + nameSpaceID + `"}`
	result, err := m.requestMCIR.FetchSpec()
	m.SetInType(holdType)

	return result, err
}

// FilterSpec is to filter specs
func (m *MCIRApi) FilterSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.FilterSpec()
}

// FilterSpecsByRange is to filter by parameters
func (m *MCIRApi) FilterSpecsByRange(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.FilterSpecsByRange()
}

// SortSpecs is to sort specs
func (m *MCIRApi) SortSpecs(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.SortSpecs()
}

// UpdateSpec is to update spec
func (m *MCIRApi) UpdateSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.UpdateSpec()
}

// ListLookupSpec is to LookupSpecs
func (m *MCIRApi) ListLookupSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListLookupSpec()
}

// ListLookupSpecByParam is to LookupSpecs
func (m *MCIRApi) ListLookupSpecByParam(connConfigName string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"ConnectionName":"` + connConfigName + `"}`
	result, err := m.requestMCIR.ListLookupSpec()
	m.SetInType(holdType)

	return result, err
}

// GetLookupSpec is to LookupSpec
func (m *MCIRApi) GetLookupSpec(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.GetLookupSpec()
}

// GetLookupSpecByParam is to LookupSpec
func (m *MCIRApi) GetLookupSpecByParam(connConfigName string, cspSpecName string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"ConnectionName":"` + connConfigName + `", "cspSpecName": "` + cspSpecName + `"}`
	result, err := m.requestMCIR.GetLookupSpec()
	m.SetInType(holdType)

	return result, err
}

// CreateSshKey is to create sshKey
func (m *MCIRApi) CreateSshKey(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.CreateSshKey()
}

// CreateSshKeyByParam is to create sshKey by parameters
func (m *MCIRApi) CreateSshKeyByParam(req *TbSshKeyCreateRequest) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	j, err := json.Marshal(req)
	if err != nil {
		return "", err
	}
	m.requestMCIR.InData = string(j)
	result, err := m.requestMCIR.CreateSshKey()
	m.SetInType(holdType)

	return result, err
}

// ListSshKey is to list sshKeys
func (m *MCIRApi) ListSshKey(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListSshKey()
}

// ListSshKeyByParam is to list sshKeys by parameters
func (m *MCIRApi) ListSshKeyByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"sshKey"}`
	result, err := m.requestMCIR.ListSshKey()
	m.SetInType(holdType)

	return result, err
}

// ListSshKeyId is to list sshKey IDs
func (m *MCIRApi) ListSshKeyId(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListSshKeyId()
}

// ListSshKeyIdByParam is to list sshKey IDs by parameters
func (m *MCIRApi) ListSshKeyIdByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"sshKey"}`
	result, err := m.requestMCIR.ListSshKeyId()
	m.SetInType(holdType)

	return result, err
}

// GetSshKey is to get sshKey
func (m *MCIRApi) GetSshKey(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.GetSshKey()
}

// GetSshKeyByParam is to get sshKey by parameters
func (m *MCIRApi) GetSshKeyByParam(nameSpaceID string, resourceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"sshKey", "resourceId":"` + resourceID + `"}`
	result, err := m.requestMCIR.GetSshKey()
	m.SetInType(holdType)

	return result, err
}

// DeleteSshKey is to delete sshKey
func (m *MCIRApi) DeleteSshKey(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteSshKey()
}

// DeleteSshKeyByParam is to delete sshKey by parameters
func (m *MCIRApi) DeleteSshKeyByParam(nameSpaceID string, resourceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"sshKey", "resourceId":"` + resourceID + `", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteSshKey()
	m.SetInType(holdType)

	return result, err
}

// DeleteAllSshKey is to delete all sshKeys
func (m *MCIRApi) DeleteAllSshKey(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteAllSshKey()
}

// DeleteAllSshKeyByParam is to delete all sshKeys by parameters
func (m *MCIRApi) DeleteAllSshKeyByParam(nameSpaceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"sshKey", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteAllSshKey()
	m.SetInType(holdType)

	return result, err
}

// CreateVNet is to create vNet
func (m *MCIRApi) CreateVNet(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.CreateVNet()
}

// CreateVNetByParam is to create vNet by parameters
func (m *MCIRApi) CreateVNetByParam(req *TbVNetCreateRequest) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	j, err := json.Marshal(req)
	if err != nil {
		return "", err
	}
	m.requestMCIR.InData = string(j)
	result, err := m.requestMCIR.CreateVNet()
	m.SetInType(holdType)

	return result, err
}

// ListVNet is to list vNet
func (m *MCIRApi) ListVNet(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListVNet()
}

// ListVNetByParam is to list vNet by parameters
func (m *MCIRApi) ListVNetByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"vNet"}`
	result, err := m.requestMCIR.ListVNet()
	m.SetInType(holdType)

	return result, err
}

// ListVNetId is to list vNet IDs
func (m *MCIRApi) ListVNetId(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.ListVNetId()
}

// ListVNetIdByParam is to list vNet IDs by parameters
func (m *MCIRApi) ListVNetIdByParam(nameSpaceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"vNet"}`
	result, err := m.requestMCIR.ListVNetId()
	m.SetInType(holdType)

	return result, err
}

// GetVNet is to get vNet
func (m *MCIRApi) GetVNet(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.GetVNet()
}

// GetVNetByParam is to get vNet by parameters
func (m *MCIRApi) GetVNetByParam(nameSpaceID string, resourceID string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"vNet", "resourceId":"` + resourceID + `"}`
	result, err := m.requestMCIR.GetVNet()
	m.SetInType(holdType)

	return result, err
}

// DeleteVNet is to delete vNet
func (m *MCIRApi) DeleteVNet(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteVNet()
}

// DeleteVNetByParam is to delete vNet by parameters
func (m *MCIRApi) DeleteVNetByParam(nameSpaceID string, resourceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"vNet", "resourceId":"` + resourceID + `", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteVNet()
	m.SetInType(holdType)

	return result, err
}

// DeleteAllVNet is to delete all vNets
func (m *MCIRApi) DeleteAllVNet(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.DeleteAllVNet()
}

// DeleteAllVNetByParam is to delete vNets by parameters
func (m *MCIRApi) DeleteAllVNetByParam(nameSpaceID string, force string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"vNet", "force":"` + force + `"}`
	result, err := m.requestMCIR.DeleteAllVNet()
	m.SetInType(holdType)

	return result, err
}

// CheckResource is to Check whether Resource exists or not
func (m *MCIRApi) CheckResource(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.CheckResource()
}

// CheckResourceByParam is to Check whether Resource exists or not
func (m *MCIRApi) CheckResourceByParam(nameSpaceID string, resourceID string, resourceType string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"vNet", "resourceId":"` + resourceID + `", "resourceType":"` + resourceType + `"}`
	result, err := m.requestMCIR.CheckResource()
	m.SetInType(holdType)

	return result, err
}

// LoadCommonResource is to load common resources into the namespace 'common'.
func (m *MCIRApi) LoadCommonResource() (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	return m.requestMCIR.LoadCommonResource()
}

// LoadDefaultResource is to Check whether Resource exists or not
func (m *MCIRApi) LoadDefaultResource(doc string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	m.requestMCIR.InData = doc
	return m.requestMCIR.LoadDefaultResource()
}

// LoadDefaultResourceByParam is to Check whether Resource exists or not
func (m *MCIRApi) LoadDefaultResourceByParam(nameSpaceID string, resourceType string, connectionName string) (string, error) {
	if m.requestMCIR == nil {
		return "", errors.New("The Open() function must be called")
	}

	holdType, _ := m.GetInType()
	m.SetInType("json")
	m.requestMCIR.InData = `{"nsId":"` + nameSpaceID + `", "resourceType":"` + resourceType + `", "connectionName":"` + connectionName + `"}`
	result, err := m.requestMCIR.LoadDefaultResource()
	m.SetInType(holdType)

	return result, err
}

// ===== [ Private Functiom ] =====

// ===== [ Public Functiom ] =====

// NewMCIRManager is to Create new MCIR API object
func NewMCIRManager() (m *MCIRApi) {

	m = &MCIRApi{}
	m.gConf = &config.GrpcConfig{}
	m.gConf.GSL.TumblebugCli = &config.GrpcClientConfig{}

	m.jaegerCloser = nil
	m.conn = nil
	m.clientMCIR = nil
	m.requestMCIR = nil

	m.inType = "json"
	m.outType = "json"

	return
}

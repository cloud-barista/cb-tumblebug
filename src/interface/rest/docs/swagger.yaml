openapi: 3.0.1
info:
  title: CB-Tumblebug REST API
  description: CB-Tumblebug is an open source system for managing multi-cloud infrastructure
    consisting of resources from multiple cloud service providers. (Cloud-Barista)
  termsOfService: https://github.com/cloud-barista/cb-tumblebug/blob/main/README.md
  contact:
    name: API Support
    url: https://github.com/cloud-barista/cb-tumblebug/issues/new/choose
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: latest
servers:
- url: /tumblebug
tags:
- name: "[Admin] System Management"
  description: "System configuration, namespace management, and administrative operations"
- name: "[Admin] Cloud Credential Management"
  description: Cloud credential and authentication management
- name: "[Admin] Multi-Cloud Information"
  description: Multi-cloud provider information and metadata
- name: "[Admin] Provisioning History and Analytics"
  description: Provisioning event history and risk analytics
- name: "[MC-Infra] MCI Provisioning and Management"
  description: "Multi-Cloud Infrastructure provisioning, lifecycle management, and\
    \ operations"
- name: "[MC-Infra] MCI Remote Command"
  description: Execute commands or transfer files remotely on VMs in MCI via SSH
- name: "[Kubernetes] Cluster Management"
  description: Kubernetes cluster provisioning and management
- name: "[Kubernetes] Cluster's Container Remote Command"
  description: Execute commands in Kubernetes cluster containers
- name: "[Job Scheduler] (WIP) CSP Resource Registration"
  description: Scheduled CSP resource registration jobs (Work In Progress)
- name: "[Infra Resource] Common Utility"
  description: Common utility functions for infrastructure resources
- name: "[Infra Resource] Spec Management"
  description: VM specification recommendation and management
- name: "[Infra Resource] Image Management"
  description: "VM image lookup, registration, and management"
- name: "[Infra Resource] Network Management"
  description: Virtual network (VNet/VPC) and subnet management
- name: "[Infra Resource] Security Group Management"
  description: Security group and firewall rule management
- name: "[Infra Resource] Access Key Management"
  description: SSH key pair management for VM access
- name: "[Infra Resource] Data Disk Management"
  description: Additional data disk management for VMs
- name: "[Infra Resource] Object Storage Management"
  description: Object storage bucket and object management
- name: "[Infra Resource] SQL Database Management (under development)"
  description: Managed SQL database service operations
- name: "[Infra Resource] NLB Management"
  description: Network Load Balancer management
- name: "[Infra Resource] NLB Management (for developer)"
  description: Advanced NLB management operations for developers
- name: "[Infra Resource] Site-to-site VPN Management (under development)"
  description: Site-to-site VPN tunnel management
- name: "[Admin] System Configuration"
  description: System settings and configuration management
- name: "[Admin] API Request Management"
  description: API request tracking and management
- name: "[MC-Infra] MCI Performance Benchmarking (WIP)"
  description: Performance benchmark operations for MCI (Work In Progress)
- name: "[MC-Infra] MCI Orchestration Management (WIP)"
  description: MCI orchestration policy and automation (Work In Progress)
- name: "[MC-Infra] MCI Resource Monitor (for developer)"
  description: MCI resource monitoring operations for developers
- name: "[Test] Stream Response"
  description: Test endpoints for streaming responses
paths:
  /auth/test:
    get:
      tags:
      - "[Admin] API Request Management"
      summary: Test JWT authentication
      description: Test JWT authentication
      operationId: TestJWTAuth
      responses:
        "200":
          description: Information of JWT authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth.AuthsInfo'
        "400":
          description: Invalid Request
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
  /availableK8sNodeImage:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: (UNDER DEVELOPMENT!!!) Get available kubernetes cluster node image
      description: (UNDER DEVELOPMENT!!!) Get available kubernetes cluster node image
      operationId: GetAvailableK8sNodeImage
      parameters:
      - name: providerName
        in: query
        description: Name of the CSP to retrieve
        required: true
        schema:
          type: string
      - name: regionName
        in: query
        description: Name of region to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterNodeImageDetailAvailable'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /availableK8sVersion:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Get available kubernetes cluster version
      description: Get available kubernetes cluster version
      operationId: GetAvailableK8sVersion
      parameters:
      - name: providerName
        in: query
        description: Name of the CSP to retrieve
        required: true
        schema:
          type: string
      - name: regionName
        in: query
        description: Name of region to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterVersionDetailAvailable'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /availableRegionZonesForSpec:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Get available regions and zones for a specific spec
      description: Query the availability of a specific spec across all regions/zones
      operationId: GetAvailableRegionZonesForSpec
      requestBody:
        description: Spec availability request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.GetAvailableRegionZonesRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpecAvailabilityInfo'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: availabilityReq
  /availableRegionZonesForSpecList:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Get available regions and zones for multiple specs
      description: Query the availability for multiple specs in parallel and return
        batch results
      operationId: GetAvailableRegionZonesForSpecList
      requestBody:
        description: Batch spec availability request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.GetAvailableRegionZonesListRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpecAvailabilityBatchResult'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: batchAvailabilityReq
  /checkK8sNodeGroupsOnK8sCreation:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Check whether nodegroups are required during the K8sCluster creation
      description: Check whether nodegroups are required during the K8sCluster creation
      operationId: CheckK8sNodeGroupsOnK8sCreation
      parameters:
      - name: providerName
        in: query
        description: Name of the CSP to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterNodeGroupsOnCreation'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /checkK8sNodeImageDesignation:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Check whether node image designation is possible to create a K8sCluster
      description: Check whether node image designation is possible to create a K8sCluster
      operationId: CheckK8sNodeImageDesignation
      parameters:
      - name: providerName
        in: query
        description: Name of the CSP to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterNodeImageDesignation'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /cloudInfo:
    get:
      tags:
      - "[Admin] Multi-Cloud Information"
      summary: Get cloud information
      description: Get cloud information
      operationId: GetCloudInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.CloudInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /config:
    get:
      tags:
      - "[Admin] System Configuration"
      summary: List all configs
      description: List all configs
      operationId: GetAllConfig
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/common.RestGetAllConfigResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Admin] System Configuration"
      summary: Create or Update config
      description: "Create or Update config (TB_SPIDER_REST_URL, TB_DRAGONFLY_REST_URL,\
        \ ...)"
      operationId: PostConfig
      requestBody:
        description: Key and Value for configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ConfigReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ConfigInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: config
    delete:
      tags:
      - "[Admin] System Configuration"
      summary: Init all configs
      description: Init all configs
      operationId: InitAllConfig
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /config/{configId}:
    get:
      tags:
      - "[Admin] System Configuration"
      summary: Get config
      description: Get config
      operationId: GetConfig
      parameters:
      - name: configId
        in: path
        description: Config ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ConfigInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Admin] System Configuration"
      summary: Init config
      description: Init config
      operationId: InitConfig
      parameters:
      - name: configId
        in: path
        description: Config ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ConfigInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /connConfig:
    get:
      tags:
      - "[Admin] Cloud Credential Management"
      summary: List all registered ConnConfig
      description: List all registered ConnConfig
      operationId: GetConnConfigList
      parameters:
      - name: filterCredentialHolder
        in: query
        description: filter objects by Credential Holder
        schema:
          type: string
      - name: filterVerified
        in: query
        description: filter verified connections only
        schema:
          type: boolean
          default: true
          enum:
          - true
          - false
      - name: filterRegionRepresentative
        in: query
        description: filter connections with the representative region only
        schema:
          type: boolean
          default: false
          enum:
          - true
          - false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ConnConfigList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /connConfig/{connConfigName}:
    get:
      tags:
      - "[Admin] Cloud Credential Management"
      summary: Get registered ConnConfig info
      description: Get registered ConnConfig info
      operationId: GetConnConfig
      parameters:
      - name: connConfigName
        in: path
        description: Name of connection config (cloud config)
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ConnConfig'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /credential:
    post:
      tags:
      - "[Admin] Cloud Credential Management"
      summary: Register Credential Information
      description: "This API registers credential information using hybrid encryption.\
        \ The process involves compressing and encrypting sensitive data with AES-256,\
        \ encrypting the AES key with a 4096-bit RSA public key (retrieved via `GET\
        \ /credential/publicKey`), and using OAEP padding with SHA-256. All values,\
        \ including the AES key, must be base64 encoded before sending, and the public\
        \ key token ID must be included in the request."
      operationId: RegisterCredential
      requestBody:
        description: Credential request info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.CredentialReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.CredentialInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: CredentialReq
  /credential/publicKey:
    get:
      tags:
      - "[Admin] Cloud Credential Management"
      summary: Get RSA Public Key for Credential Encryption
      description: Generates an RSA key pair using a 4096-bit key size with the RSA
        algorithm. The public key is generated using the RSA algorithm with OAEP padding
        and SHA-256 as the hash function. This key is used to encrypt an AES key that
        will be used for hybrid encryption of credentials.
      operationId: GetPublicKeyForCredentialEncryption
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.PublicKeyResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /fetchImages:
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Fetch images for regions of each CSP synchronously
      description: Fetch images waiting for completion
      operationId: FetchImages
      requestBody:
        description: Fetch option
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ImageFetchOption'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource.FetchImagesAsyncResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: fetchOption
  /fetchImagesAsync:
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Fetch images asynchronously
      description: Fetch images in the background without waiting for completion
      operationId: FetchImagesAsync
      requestBody:
        description: Fetch option
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ImageFetchOption'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: fetchOption
  /fetchImagesResult:
    get:
      tags:
      - "[Infra Resource] Image Management"
      summary: Get result of asynchronous image fetching
      description: Get detailed results from the last asynchronous image fetch operation
      operationId: GetFetchImagesAsyncResult
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource.FetchImagesAsyncResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /fetchPrice:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Fetch price from all CSP connections and update the price information
        for associated specs in the system.
      description: Fetch price from all CSP connections and update the price information
        for associated specs in the system.
      operationId: FetchPrice
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /fetchSpecs:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Fetch specs from CSPs and register them in the system.
      description: Fetch specs from CSPs and register them in the system.
      operationId: FetchSpecs
      requestBody:
        description: Fetch option
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SpecFetchOption'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource.FetchSpecsAsyncResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: fetchOption
  /forward/{path}:
    post:
      tags:
      - "[Admin] API Request Management"
      summary: Forward any (GET) request to CB-Spider
      description: Forward any (GET) request to CB-Spider
      operationId: ForwardAnyReqToAny
      parameters:
      - name: path
        in: path
        description: "Internal call path to CB-Spider (path without /spider/ prefix)\
          \ - see [https://documenter.getpostman.com/view/24786935/2s9Ykq8Lpf#231eec23-b0ab-4966-83ce-a0ef92ead7bc]\
          \ for more details"
        required: true
        schema:
          type: string
          default: vmspec
      requestBody:
        description: "Request body (various formats) - see [https://documenter.getpostman.com/view/24786935/2s9Ykq8Lpf#231eec23-b0ab-4966-83ce-a0ef92ead7bc]\
          \ for more details"
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      x-codegen-request-body-name: Request
  /httpVersion:
    get:
      tags:
      - "[Admin] API Request Management"
      summary: Check HTTP version of incoming request
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
      operationId: CheckHTTPVersion
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /inspectResources:
    post:
      tags:
      - "[Admin] System Management"
      summary: "Inspect Resources (vNet, securityGroup, sshKey, vm) registered in\
        \ CB-Tumblebug, CB-Spider, CSP"
      description: "Inspect Resources (vNet, securityGroup, sshKey, vm) registered\
        \ in CB-Tumblebug, CB-Spider, CSP"
      operationId: InspectResources
      requestBody:
        description: Specify connectionName and resource type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.InspectResourcesRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.InspectResource'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: connectionName
  /inspectResourcesOverview:
    get:
      tags:
      - "[Admin] System Management"
      summary: "Inspect Resources Overview (vNet, securityGroup, sshKey, vm) registered\
        \ in CB-Tumblebug and CSP for all connections"
      description: "Inspect Resources Overview (vNet, securityGroup, sshKey, vm) registered\
        \ in CB-Tumblebug and CSP for all connections"
      operationId: InspectResourcesOverview
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.InspectResourceAllResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /k8sClusterDynamicCheckRequest:
    post:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Check available ConnectionConfig list for creating K8sCluster Dynamically
      description: Check available ConnectionConfig list before create K8sCluster
        Dynamically from common spec and image
      operationId: PostK8sClusterDynamicCheckRequest
      requestBody:
        description: Details for K8sCluster dynamic request information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.K8sClusterConnectionConfigCandidatesReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.CheckK8sClusterDynamicReqInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: k8sClusterConnectionConfigCandidatesReq
  /k8sClusterInfo:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Get kubernetes cluster information
      description: Get kubernetes cluster information
      operationId: GetK8sClusterInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterAssetInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /k8sClusterRecommendNode:
    post:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Recommend K8sCluster's Node plan (filter and priority)
      description: Recommend K8sCluster's Node plan (filter and priority) Find details
        from https://github.com/cloud-barista/cb-tumblebug/discussions/1234
      operationId: RecommendK8sNode
      requestBody:
        description: Recommend K8sCluster's Node plan (filter and priority)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.RecommendSpecReq'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/model.SpecInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: recommendSpecReq
  /label/{labelType}/{uid}:
    get:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Get labels for a resource
      description: Get labels for a resource identified by its uid
      operationId: GetLabels
      parameters:
      - name: labelType
        in: path
        description: Label Type
        required: true
        schema:
          type: string
          enum:
          - ns
          - mci
          - subGroup
          - vm
          - k8s
          - vNet
          - subnet
          - vpn
          - securityGroup
          - sshKey
          - dataDisk
          - sqlDb
          - objectStorage
      - name: uid
        in: path
        description: Resource uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Labels for the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.LabelInfo'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Create or update a label for a resource
      description: Create or update a label for a resource identified by its uid
      operationId: CreateOrUpdateLabel
      parameters:
      - name: labelType
        in: path
        description: Label Type
        required: true
        schema:
          type: string
          enum:
          - ns
          - mci
          - subGroup
          - vm
          - k8s
          - vNet
          - subnet
          - vpn
          - securityGroup
          - sshKey
          - dataDisk
          - sqlDb
          - objectStorage
      - name: uid
        in: path
        description: Resource uid
        required: true
        schema:
          type: string
      requestBody:
        description: Labels to create or update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.Label'
        required: true
      responses:
        "200":
          description: Label created or updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: labels
  /label/{labelType}/{uid}/{key}:
    delete:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Remove a label from a resource
      description: Remove a label from a resource identified by its uid
      operationId: RemoveLabel
      parameters:
      - name: labelType
        in: path
        description: Label Type
        required: true
        schema:
          type: string
          enum:
          - ns
          - mci
          - subGroup
          - vm
          - k8s
          - vNet
          - subnet
          - vpn
          - securityGroup
          - sshKey
          - dataDisk
          - sqlDb
          - objectStorage
      - name: uid
        in: path
        description: Resource uid
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: Label key to remove
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Label removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /labelInfo:
    get:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Return LabelTypes and system defined label keys with example
      description: Return LabelTypes and system defined label keys with example
      operationId: GetSystemLabelInfo
      responses:
        "200":
          description: LabelTypes and System labels with example values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SystemLabelInfo'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /loadAssets:
    get:
      tags:
      - "[Admin] System Configuration"
      summary: Load Common Resources from internal asset files
      description: "Load Common Resources from internal asset files (Spec, Image)"
      operationId: LoadAssets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /lookupImage:
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Lookup image (for debugging purposes)
      description: Lookup image (for debugging purposes)
      operationId: LookupImage
      requestBody:
        description: "Specify connectionName, cspImageName"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resource.RestLookupImageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpiderImageInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: lookupImageReq
  /lookupImages:
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Lookup image list (for debugging purposes)
      description: Lookup image list (for debugging purposes)
      operationId: LookupImageList
      requestBody:
        description: Specify connectionName
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/common.TbConnectionName'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpiderImageList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: lookupImagesReq
  /lookupSpec:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Lookup spec (for debugging purposes)
      description: Lookup spec (for debugging purposes)
      operationId: LookupSpec
      requestBody:
        description: Specify connectionName & cspSpecNameS
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resource.RestLookupSpecRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpiderSpecInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: lookupSpecReq
  /lookupSpecs:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Lookup spec list (for debugging purposes)
      description: Lookup spec list (for debugging purposes)
      operationId: LookupSpecList
      requestBody:
        description: Specify connectionName
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/common.TbConnectionName'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpiderSpecList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: lookupSpecsReq
  /mciDynamicCheckRequest:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: (Deprecated) Check Resource Availability for Dynamic MCI Creation
      description: |-
        **⚠️ DEPRECATED: This endpoint is deprecated and will be removed in a future version. Please use `/mciDynamicReview` instead for comprehensive validation and cost estimation.**

        Validate resource availability and discover optimal connection configurations before creating MCI dynamically.
        This endpoint provides comprehensive resource validation and connection discovery for MCI planning:

        **Resource Validation Process:**
        1. **Specification Analysis**: Validates that requested common specs exist and are accessible
        2. **Provider Discovery**: Identifies available cloud providers and regions for each specification
        3. **Connectivity Assessment**: Tests connection configurations and CSP API accessibility
        4. **Quota Verification**: Checks available quotas and resource limits where possible
        5. **Compatibility Matrix**: Generates matrix of viable spec-provider-region combinations

        **Connection Configuration Discovery:**
        - **Available Providers**: Lists all configured cloud providers (AWS, Azure, GCP, etc.)
        - **Active Regions**: Shows available regions per provider with connectivity status
        - **Specification Mapping**: Maps common specs to provider-specific instance types
        - **Image Compatibility**: Validates image availability across different providers/regions
        - **Network Capabilities**: Identifies supported network features and configurations

        **Pre-Deployment Validation:**
        - **Resource Existence**: Confirms all specified resources exist in system namespace
        - **Permission Verification**: Validates CSP credentials and required permissions
        - **API Connectivity**: Tests connection to CSP APIs and service endpoints
        - **Dependency Resolution**: Identifies any missing dependencies or prerequisites

        **Optimization Recommendations:**
        - **Cost-Effective Regions**: Suggests regions with lower pricing for specified resources
        - **Performance Optimization**: Recommends regions with better network performance
        - **Availability Zone**: Identifies optimal AZ distribution for high availability
        - **Resource Bundling**: Suggests efficient resource combinations and groupings

        **Output Information:**
        - **Connection Candidates**: List of viable connection configurations
        - **Provider Capabilities**: Detailed capabilities matrix per provider
        - **Resource Status**: Real-time availability status for each requested resource
        - **Recommendation Summary**: Actionable recommendations for optimal deployment

        **Use Cases:**
        - Pre-validate MCI configuration before expensive deployment operations
        - Discover optimal provider/region combinations for cost or performance
        - Troubleshoot resource availability issues during MCI planning
        - Generate connection configuration templates for standardized deployments
        - Assess infrastructure capacity and planning constraints

        **Integration Workflow:**
        1. Use this endpoint to validate and discover connection options
        2. Review recommendations and adjust specifications if needed
        3. Use `/mciDynamicReview` for detailed cost estimation and final validation
        4. Proceed with `/mciDynamic` using validated configuration
      operationId: PostMciDynamicCheckRequest
      requestBody:
        description: Resource check request containing common specifications to validate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciConnectionConfigCandidatesReq'
        required: true
      responses:
        "200":
          description: "Resource availability matrix with connection candidates, provider\
            \ capabilities, and optimization recommendations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.CheckMciDynamicReqInfo'
        "400":
          description: Invalid request format or malformed specification identifiers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Specified common specifications not found in system namespace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: CSP connectivity issues or internal validation service errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      deprecated: true
      x-codegen-request-body-name: mciReq
  /mergeCSPLabel/{labelType}/{uid}:
    put:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Fetch the labels in the CSP and merge them with the existing labels
      description: Fetch the labels in the CSP and merge them with the existing labels
      operationId: MergeCSPResourceLabel
      parameters:
      - name: labelType
        in: path
        description: Label Type
        required: true
        schema:
          type: string
          enum:
          - ns
          - mci
          - subGroup
          - vm
          - k8s
          - vNet
          - subnet
          - vpn
          - securityGroup
          - sshKey
          - dataDisk
          - sqlDb
          - objectStorage
      - name: uid
        in: path
        description: Resource uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Merged CSP labels successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns:
    get:
      tags:
      - "[Admin] System Configuration"
      summary: List all namespaces or namespaces' ID
      description: List all namespaces or namespaces' ID
      operationId: GetAllNs
      parameters:
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/common.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/common.RestGetAllNsResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Admin] System Configuration"
      summary: Create namespace
      description: Create namespace
      operationId: PostNs
      requestBody:
        description: Details for a new namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.NsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.NsInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: nsReq
    delete:
      tags:
      - "[Admin] System Configuration"
      summary: Delete all namespaces
      description: Delete all namespaces
      operationId: DelAllNs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}:
    get:
      tags:
      - "[Admin] System Configuration"
      summary: Get namespace
      description: Get namespace
      operationId: GetNs
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.NsInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Admin] System Configuration"
      summary: Update namespace
      description: Update namespace
      operationId: PutNs
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      requestBody:
        description: Details to update existing namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.NsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.NsInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: namespace
    delete:
      tags:
      - "[Admin] System Configuration"
      summary: Delete namespace
      description: Delete namespace
      operationId: DelNs
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/benchmark/mci/{mciId}:
    post:
      tags:
      - "[MC-Infra] MCI Performance Benchmarking (WIP)"
      summary: Run MCI benchmark for a single performance metric and return results
      description: Run MCI benchmark for a single performance metric and return results
      operationId: GetBenchmark
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: action
        in: query
        description: Benchmark Action to MCI
        required: true
        schema:
          type: string
          enum:
          - install
          - init
          - cpus
          - cpum
          - memR
          - memW
          - fioR
          - fioW
          - dbR
          - dbW
          - rtt
          - mrtt
          - clean
      requestBody:
        description: Host IP address to benchmark
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/infra.RestGetBenchmarkRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.BenchmarkInfoArray'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: hostIP
  /ns/{nsId}/benchmarkAll/mci/{mciId}:
    post:
      tags:
      - "[MC-Infra] MCI Performance Benchmarking (WIP)"
      summary: Run MCI benchmark for all performance metrics and return results
      description: Run MCI benchmark for all performance metrics and return results
      operationId: GetAllBenchmark
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      requestBody:
        description: Host IP address to benchmark
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/infra.RestGetAllBenchmarkRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.BenchmarkInfoArray'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: hostIP
  /ns/{nsId}/benchmarkLatency/mci/{mciId}:
    get:
      tags:
      - "[MC-Infra] MCI Performance Benchmarking (WIP)"
      summary: Run MCI benchmark for network latency
      description: Run MCI benchmark for network latency
      operationId: GetLatencyBenchmark
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: probe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.BenchmarkInfoArray'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/buildAgnosticImage:
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: "Build agnostic custom images by creating MCI, executing commands,\
        \ and taking snapshots"
      description: "Creates an MCI infrastructure, executes post-deployment commands,\
        \ creates snapshots from each subgroup, and optionally cleans up the MCI.\
        \ This is a complete workflow for building CSP-agnostic custom images."
      operationId: PostBuildAgnosticImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      requestBody:
        description: Request body to build agnostic images
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.BuildAgnosticImageReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.BuildAgnosticImageResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: buildReq
  /ns/{nsId}/checkResource/{resourceType}/{resourceId}:
    get:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Check resources' existence
      description: Check resources' existence
      operationId: CheckResource
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: resourceType
        in: path
        description: Resource Type
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/cmd/k8sCluster/{k8sClusterId}:
    post:
      tags:
      - "[Kubernetes] Cluster's Container Remote Command"
      summary: Send a command to specified Container in K8sCluster
      description: |-
        Send a command to specified Container in K8sCluster
        [note] This feature is not intended for general use
        This API is provided as an exceptional and limited function for specific purposes such as migration.
        Kubernetes resource information required as input for this API is not currently provided, and its availability in the future is uncertain.
      operationId: PostCmdK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      - name: k8sClusterNamespace
        in: query
        description: Namespace in K8sCluster to apply the command
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterPodName
        in: query
        description: Pod Name in K8sCluster to apply the command
        required: true
        schema:
          type: string
          default: mypod
      - name: k8sClusterContainerName
        in: query
        description: Container Name in K8sCluster to apply the command
        schema:
          type: string
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      requestBody:
        description: K8sCluster's Container Command Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.K8sClusterContainerCmdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterContainerCmdResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: k8sClusterContainerCmdReq
  /ns/{nsId}/cmd/mci/{mciId}:
    post:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Send a command to specified MCI
      description: Send a command to specified MCI
      operationId: PostCmdMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: subGroupId
        in: query
        description: subGroupId to apply the command only for VMs in subGroup of MCI
        schema:
          type: string
          default: g1
      - name: vmId
        in: query
        description: vmId to apply the command only for a VM in MCI
        schema:
          type: string
          default: g1-1
      - name: labelSelector
        in: query
        description: "Target VM Label selector query. Example: sys.id=g1-1,role=worker"
        schema:
          type: string
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      requestBody:
        description: MCI Command Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciCmdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciSshCmdResultForAPI'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciCmdReq
  /ns/{nsId}/control/k8sCluster/{k8sClusterId}:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: "Control the creation of K8sCluster (continue, withdraw)"
      description: "Control the creation of K8sCluster (continue, withdraw)"
      operationId: GetControlK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      - name: action
        in: query
        description: Action to K8sCluster
        required: true
        schema:
          type: string
          enum:
          - continue
          - withdraw
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/control/mci/{mciId}:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: "Control the lifecycle of MCI (refine, suspend, resume, reboot, terminate)"
      description: "Control the lifecycle of MCI (refine, suspend, resume, reboot,\
        \ terminate)"
      operationId: GetControlMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: action
        in: query
        description: Action to MCI
        required: true
        schema:
          type: string
          enum:
          - suspend
          - resume
          - reboot
          - terminate
          - refine
          - continue
          - withdraw
      - name: force
        in: query
        description: Force control to skip checking controllable status
        schema:
          type: string
          enum:
          - "false"
          - "true"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/control/mci/{mciId}/vm/{vmId}:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: "Control the lifecycle of VM (suspend, resume, reboot, terminate)"
      description: "Control the lifecycle of VM (suspend, resume, reboot, terminate)"
      operationId: GetControlMciVm
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: action
        in: query
        description: Action to MCI
        required: true
        schema:
          type: string
          enum:
          - suspend
          - resume
          - reboot
          - terminate
      - name: force
        in: query
        description: Force control to skip checking controllable status
        schema:
          type: string
          enum:
          - "false"
          - "true"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/deregisterCspResource/vNet/{vNetId}:
    delete:
      tags:
      - "[Infra Resource] Network Management"
      summary: Deregister VNet (created in CSP)
      description: "Deregister the VNet, which was created in CSP"
      operationId: DeleteDeregisterVNet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      - name: withSubnets
        in: query
        description: Delete subnets as well
        schema:
          type: string
          enum:
          - "true"
          - "false"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VNetInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/deregisterCspResource/vNet/{vNetId}/subnet/{subnetId}:
    delete:
      tags:
      - "[Infra Resource] Network Management"
      summary: Deregister Subnet (created in CSP)
      description: "Deregister Subnet, which was created in CSP"
      operationId: DeleteDeregisterSubnet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      - name: subnetId
        in: path
        description: Subnet ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/installBenchmarkAgent/mci/{mciId}:
    post:
      tags:
      - "[MC-Infra] MCI Performance Benchmarking (WIP)"
      summary: Install the benchmark agent to specified MCI
      description: Install the benchmark agent to specified MCI
      operationId: PostInstallBenchmarkAgentToMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: option
        in: query
        description: Option for checking update
        schema:
          type: string
          enum:
          - update
      requestBody:
        description: MCI Command Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciCmdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciSshCmdResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciCmdReq
  /ns/{nsId}/k8sCluster:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: List all K8sClusters or K8sClusters' ID
      description: List all K8sClusters or K8sClusters' ID
      operationId: GetAllK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      - name: filterKey
        in: query
        description: "Field key for filtering (ex: cspResourceName)"
        schema:
          type: string
      - name: filterVal
        in: query
        description: "Field value for filtering (ex: default-alibaba-ap-northeast-2-vpc)"
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/resource.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/resource.RestGetAllK8sClusterResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Create K8sCluster
      description: Create K8sCluster<br>Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1614
      operationId: PostK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: "Option: [required params for register] connectionName, name,\
          \ cspResourceId"
        schema:
          type: string
          enum:
          - register
      requestBody:
        description: Details of the K8sCluster object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.K8sClusterReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: k8sClusterReq
    delete:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Delete all K8sClusters
      description: Delete all K8sClusters
      operationId: DeleteAllK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: match
        in: query
        description: Delete resources containing matched ID-substring only
        schema:
          type: string
      - name: option
        in: query
        description: Option for K8sCluster deletion
        schema:
          type: string
          enum:
          - force
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/k8sCluster/{k8sClusterId}:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Get K8sCluster
      description: Get K8sCluster
      operationId: GetK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Delete K8sCluster
      description: Delete K8sCluster
      operationId: DeleteK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      - name: option
        in: query
        description: Option for K8sCluster deletion
        schema:
          type: string
          enum:
          - force
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroup:
    post:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Add a K8sNodeGroup
      description: Add a K8sNodeGroup
      operationId: PostK8sNodeGroup
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      requestBody:
        description: Details of the K8sNodeGroup object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.K8sNodeGroupReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: k8sNodeGroupReq
  /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroup/{k8sNodeGroupName}:
    delete:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Remove a K8sNodeGroup
      description: Remove a K8sNodeGroup
      operationId: DeleteK8sNodeGroup
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      - name: k8sNodeGroupName
        in: path
        description: K8sNodeGroup Name
        required: true
        schema:
          type: string
          default: k8sng01
      - name: option
        in: query
        description: Option for K8sNodeGroup deletion
        schema:
          type: string
          enum:
          - force
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroup/{k8sNodeGroupName}/autoscaleSize:
    put:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Change a K8sNodeGroup's Autoscale Size
      description: Change a K8sNodeGroup's Autoscale Size
      operationId: PutChangeK8sNodeGroupAutoscaleSize
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      - name: k8sNodeGroupName
        in: path
        description: K8sNodeGroup Name
        required: true
        schema:
          type: string
          default: k8sng01
      requestBody:
        description: Details of the ChangeK8sNodeGroupAutoscaleSizeReq object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ChangeK8sNodeGroupAutoscaleSizeReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ChangeK8sNodeGroupAutoscaleSizeRes'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: changeK8sNodeGroupAutoscaleSizeReq
  /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroup/{k8sNodeGroupName}/onAutoscaling:
    put:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Set a K8sNodeGroup's Autoscaling On/Off
      description: Set a K8sNodeGroup's Autoscaling On/Off
      operationId: PutSetK8sNodeGroupAutoscaling
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      - name: k8sNodeGroupName
        in: path
        description: K8sNodeGroup Name
        required: true
        schema:
          type: string
          default: k8sng01
      requestBody:
        description: Details of the SetK8sNodeGroupAutoscalingReq object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SetK8sNodeGroupAutoscalingReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SetK8sNodeGroupAutoscalingRes'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: setK8sNodeGroupAutoscalingReq
  /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroupDynamic:
    post:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Create K8sNodeGroup Dynamically
      description: Create K8sNodeGroup Dynamically from common spec and image
      operationId: PostK8sNodeGroupDynamic
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      requestBody:
        description: "Request body to provision K8sNodeGroup dynamically. <br> Must\
          \ include specId and imageId info. <br> (ex: {name: k8sng01, imageId: azure+koreacentral+ubuntu22.04,\
          \ specId: azure+koreacentral+Standard_B2s}]}) <br> You can use /k8sClusterRecommendNode\
          \ and /k8sClusterDynamicCheckRequest to get it. <br> Check the guide: https://github.com/cloud-barista/cb-tumblebug/discussions/1913"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.K8sNodeGroupDynamicReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sNodeGroupInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: k8sNodeGroupDynamicReq
  /ns/{nsId}/k8sCluster/{k8sClusterId}/upgrade:
    put:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Upgrade a K8sCluster's version
      description: Upgrade a K8sCluster's version
      operationId: PutUpgradeK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      requestBody:
        description: Details of the UpgradeK8sClusterReq object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.UpgradeK8sClusterReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: upgradeK8sClusterReq
  /ns/{nsId}/k8sClusterDynamic:
    post:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Create K8sCluster Dynamically
      description: Create K8sCluster Dynamically from common spec and image
      operationId: PostK8sClusterDynamic
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option for K8sCluster creation
        schema:
          type: string
          enum:
          - hold
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      requestBody:
        description: "Request body to provision K8sCluster dynamically. <br> Must\
          \ include specId and imageId info. <br> (ex: {name: k8scluster01, imageId:\
          \ azure+koreacentral+ubuntu22.04, specId: azure+koreacentral+Standard_B2s}]})\
          \ <br> You can use /k8sClusterRecommendNode and /k8sClusterDynamicCheckRequest\
          \ to get it. <br> Check the guide: https://github.com/cloud-barista/cb-tumblebug/discussions/1913"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.K8sClusterDynamicReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: k8sClusterDyanmicReq
  /ns/{nsId}/mci:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: List all MCIs or MCIs' ID
      description: List all MCIs or MCIs' ID
      operationId: GetAllMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
          - simple
          - status
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/infra.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/infra.RestGetAllMciResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
                    '[SIMPLE]':
                      $ref: '#/components/schemas/infra.RestGetAllMciResponse'
                    '[STATUS]':
                      $ref: '#/components/schemas/infra.RestGetAllMciStatusResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Create MCI (Multi-Cloud Infrastructure)
      description: |-
        Create MCI with detailed VM specifications and resource configuration.
        This endpoint creates a complete multi-cloud infrastructure by:
        1. **VM Provisioning**: Creates VMs across multiple cloud providers using predefined specs and images
        2. **Resource Management**: Automatically handles VPC/VNet, security groups, SSH keys, and network configuration
        3. **Status Tracking**: Monitors VM creation progress and handles failures based on policy settings
        4. **Post-Deployment**: Optionally installs monitoring agents and executes custom commands

        **Key Features:**
        - Multi-cloud VM deployment with heterogeneous configurations
        - Automatic resource dependency management (VPC → Security Group → VM)
        - Built-in failure handling with configurable policies (continue/rollback/refine)
        - Optional CB-Dragonfly monitoring agent installation
        - Post-deployment command execution support
        - Real-time status updates and progress tracking

        **VM Lifecycle:**
        1. Creating → Running (successful deployment)
        2. Creating → Failed (deployment error, handled by failure policy)
        3. Running → Terminated (manual or policy-driven cleanup)

        **Failure Policies:**
        - `continue`: Keep successful VMs, mark failed ones for later refinement
        - `rollback`: Delete entire MCI if any VM fails (all-or-nothing)
        - `refine`: Automatically clean up failed VMs, keep successful ones

        **Resource Requirements:**
        - Valid VM specifications (must exist in system namespace)
        - Valid images (must be available in target CSP regions)
        - Sufficient CSP quotas and permissions
        - Network connectivity between components
      operationId: PostMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID for resource isolation
        required: true
        schema:
          type: string
          default: default
      requestBody:
        description: "MCI creation request with VM specifications, networking, and\
          \ deployment options"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciReq'
        required: true
      responses:
        "200":
          description: "Created MCI information with VM details, status, and resource\
            \ mapping"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciInfo'
        "400":
          description: Invalid request parameters or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Namespace not found or specified resources unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "409":
          description: MCI name already exists in namespace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal server error during MCI creation or CSP communication
            failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciReq
    delete:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Delete all MCIs
      description: Delete all MCIs
      operationId: DelAllMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: "Option for delete all MCIs (support force object delete, terminate\
          \ before delete)"
        schema:
          type: string
          enum:
          - force
          - terminate
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: "Get MCI object (option: status, accessInfo, vmId)"
      description: "Get MCI object (option: status, accessInfo, vmId)"
      operationId: GetMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - default
          - id
          - status
          - accessinfo
      - name: filterKey
        in: query
        description: "(For option=id) Field key for filtering (ex: connectionName)"
        schema:
          type: string
      - name: filterVal
        in: query
        description: "(For option=id) Field value for filtering (ex: aws-ap-northeast-2)"
        schema:
          type: string
      - name: accessInfoOption
        in: query
        description: (For option=accessinfo) accessInfoOption (showSshKey)
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given action param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/infra.JSONResult'
                - type: object
                  properties:
                    '[AccessInfo]':
                      $ref: '#/components/schemas/model.MciAccessInfo'
                    '[DEFAULT]':
                      $ref: '#/components/schemas/model.MciInfo'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
                    '[STATUS]':
                      $ref: '#/components/schemas/model.MciStatusInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Delete MCI
      description: Delete MCI
      operationId: DelMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: option
        in: query
        description: Option for delete MCI (support force delete)
        schema:
          type: string
          enum:
          - terminate
          - force
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/associatedResources:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Get associated resource ID list for a given MCI
      description: "Get associated resource ID list for a given MCI (VNet, Subnet,\
        \ SecurityGroup, SSHKey, etc.)"
      operationId: GetMciAssociatedResources
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciAssociatedResourceList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/associatedSecurityGroups:
    put:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Update all Security Groups associated with a given MCI (Synchronize
        Firewall Rules)
      description: |-
        Update all Security Groups associated with a given MCI. The firewall rules of all Security Groups will be synchronized to match the requested set.
        Update all Security Groups associated with a given MCI. The firewall rules of all associated Security Groups will be synchronized to match the requested set.

        This API will add missing rules and delete extra rules so that each Security Group's rules become identical to the requested set.
        Only firewall rules are updated; other metadata (name, description, etc.) is not changed.

        Usage:
        Use this API to update (synchronize) the firewall rules of all Security Groups associated with the specified MCI. The rules in the request body will become the only rules in each Security Group after the operation.
        - All existing rules not present in the request will be deleted.
        - All rules in the request that do not exist will be added.
        - If a rule exists but differs in CIDR or port range, it will be replaced.
        - Special protocols (ICMP, etc.) are handled in the same way.

        Notes:
        - "Ports" field supports single port ("22"), port range ("80-100"), and multiple ports/ranges ("22,80-100,443").
        - The valid port number range is 0 to 65535 (inclusive).
        - "Protocol" can be TCP, UDP, ICMP, etc. (as supported by the cloud provider).
        - "Direction" must be either "inbound" or "outbound".
        - "CIDR" is the allowed IP range.
        - All existing rules not in the request (including default ICMP, etc.) will be deleted.
        - Metadata (name, description, etc.) is not changed.
      operationId: PutMciAssociatedSecurityGroups
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      requestBody:
        description: Details for SecurityGroup update (only firewallRules field is
          used for update)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SecurityGroupUpdateReq'
        required: true
      responses:
        "200":
          description: Updated Security Group info list with synchronized firewall
            rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RestWrapperSecurityGroupUpdateResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: securityGroupInfo
  /ns/{nsId}/mci/{mciId}/bastion/{bastionVmId}:
    delete:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Remove a bastion VM from all vNets
      description: Remove a bastion VM from all vNets
      operationId: RemoveBastionNodes
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: bastionVmId
        in: path
        description: Bastion VM ID
        required: true
        schema:
          type: string
          default: g1-1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/handlingCount:
    get:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Get count of currently handling commands for all VMs in MCI
      description: Get the number of commands currently in 'Handling' status for all
        VMs in an MCI. Returns per-VM counts and total count.
      operationId: GetMciHandlingCommandCount
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciHandlingCommandCountResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/mcSwNlb:
    post:
      tags:
      - "[Infra Resource] NLB Management"
      summary: Create a special purpose MCI for NLB and depoly and setting SW NLB
      description: Create a special purpose MCI for NLB and depoly and setting SW
        NLB
      operationId: PostMcNLB
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      requestBody:
        description: Details of the NLB object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.NLBReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.McNlbInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: nlbReq
  /ns/{nsId}/mci/{mciId}/nlb:
    get:
      tags:
      - "[Infra Resource] NLB Management"
      summary: List all NLBs or NLBs' ID
      description: List all NLBs or NLBs' ID
      operationId: GetAllNLB
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      - name: filterKey
        in: query
        description: "Field key for filtering (ex: cspResourceName)"
        schema:
          type: string
      - name: filterVal
        in: query
        description: "Field value for filtering (ex: default-alibaba-ap-northeast-1-vpc)"
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/infra.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/infra.RestGetAllNLBResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] NLB Management"
      summary: Create NLB
      description: Create NLB
      operationId: PostNLB
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: option
        in: query
        description: "Option: [required params for register] connectionName, name,\
          \ cspResourceId"
        schema:
          type: string
          enum:
          - register
      requestBody:
        description: Details of the NLB object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.NLBReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.NLBInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: nlbReq
    delete:
      tags:
      - "[Infra Resource] NLB Management"
      summary: Delete all NLBs
      description: Delete all NLBs
      operationId: DelAllNLB
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: match
        in: query
        description: Delete resources containing matched ID-substring only
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/nlb/{nlbId}:
    get:
      tags:
      - "[Infra Resource] NLB Management"
      summary: Get NLB
      description: Get NLB
      operationId: GetNLB
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: nlbId
        in: path
        description: NLB ID
        required: true
        schema:
          type: string
          default: g1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.NLBInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Infra Resource] NLB Management"
      summary: Delete NLB
      description: Delete NLB
      operationId: DelNLB
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: nlbId
        in: path
        description: NLB ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/healthz:
    get:
      tags:
      - "[Infra Resource] NLB Management"
      summary: Get NLB Health
      description: Get NLB Health
      operationId: GetNLBHealth
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: nlbId
        in: path
        description: NLB ID
        required: true
        schema:
          type: string
          default: g1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.NLBInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/vm:
    post:
      tags:
      - "[Infra Resource] NLB Management (for developer)"
      summary: Add VMs to NLB
      description: Add VMs to NLB
      operationId: AddNLBVMs
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: nlbId
        in: path
        description: NLB ID
        required: true
        schema:
          type: string
          default: g1
      requestBody:
        description: VMs to add to NLB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.NLBAddRemoveVMReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.NLBInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: nlbAddRemoveVMReq
    delete:
      tags:
      - "[Infra Resource] NLB Management (for developer)"
      summary: Delete VMs from NLB
      description: Delete VMs from NLB
      operationId: RemoveNLBVMs
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: nlbId
        in: path
        description: NLB ID
        required: true
        schema:
          type: string
          default: g1
      requestBody:
        description: Select VMs to remove from NLB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.NLBAddRemoveVMReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: nlbAddRemoveVMReq
  /ns/{nsId}/mci/{mciId}/site:
    get:
      tags:
      - "[Infra Resource] Site-to-site VPN Management (under development)"
      summary: Get sites in MCI
      description: Get sites in MCI
      operationId: GetSitesInMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SitesInfo'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/snapshot:
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Create snapshots for all subgroups in MCI (one VM per subgroup in parallel)
      description: Create snapshots for the first running VM in each subgroup of an
        MCI in parallel
      operationId: PostMciSnapshot
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      requestBody:
        description: Request body to create MCI snapshots
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SnapshotReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciSnapshotResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: snapshotReq
  /ns/{nsId}/mci/{mciId}/subGroupDynamic:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Add VM Dynamically to Existing MCI
      description: |-
        Dynamically add new virtual machines to an existing MCI using common specifications and automated resource management.
        This endpoint provides elastic scaling capabilities for running MCIs:

        **Dynamic VM Addition Process:**
        1. **MCI Validation**: Verifies target MCI exists and is in a valid state for expansion
        2. **Resource Discovery**: Resolves common spec and image to provider-specific resources
        3. **Network Integration**: Automatically configures new VMs to use existing MCI network resources
        4. **Subgroup Management**: Creates new subgroups or expands existing ones based on configuration
        5. **Status Synchronization**: Updates MCI status and metadata to reflect new VM additions

        **Integration with Existing Infrastructure:**
        - **Network Reuse**: New VMs automatically join existing VNets and security groups
        - **SSH Key Sharing**: Uses existing SSH keys for consistent access management
        - **Monitoring Integration**: New VMs inherit monitoring configuration from parent MCI
        - **Label Propagation**: Applies MCI-level labels and policies to new VMs
        - **Resource Consistency**: Maintains naming conventions and resource organization

        **Scaling Scenarios:**
        - **Horizontal Scaling**: Add more instances to handle increased workload
        - **Multi-Region Expansion**: Deploy VMs in new regions while maintaining MCI cohesion
        - **Provider Diversification**: Add VMs from different cloud providers for redundancy
        - **Workload Specialization**: Deploy VMs with different specifications for specific tasks

        **Configuration Requirements:**
        - `specId`: Must specify valid VM specification from system namespace
        - `imageId`: Must specify valid image compatible with target provider/region
        - `name`: Becomes subgroup name; VMs will be named with sequential suffixes
        - `subGroupSize`: Number of identical VMs to create (default: 1)

        **Network and Security:**
        - New VMs automatically inherit security group rules from existing MCI
        - Network connectivity to existing VMs is established automatically
        - Firewall rules and access policies are applied consistently
        - SSH access is configured using existing key pairs

        **Example Use Cases:**
        - Scale out web tier during traffic spikes
        - Add GPU instances for machine learning workloads
        - Deploy edge nodes in additional geographic regions
        - Add specialized storage or database nodes to existing application stack

        **Post-Addition Operations:**
        - New VMs are immediately available for standard MCI operations
        - Can be individually managed or grouped with existing subgroups
        - Monitoring and logging are automatically configured
        - Application deployment and configuration management can proceed immediately
      operationId: PostMciSubGroupDynamic
      parameters:
      - name: nsId
        in: path
        description: Namespace ID containing the target MCI
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID to which new VMs will be added
        required: true
        schema:
          type: string
          default: mci01
      requestBody:
        description: "SubGroup dynamic request specifying specId, imageId, and scaling\
          \ parameters"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.CreateSubGroupDynamicReq'
        required: true
      responses:
        "200":
          description: Updated MCI information including newly added VMs and current
            status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciInfo'
        "400":
          description: Invalid VM request or incompatible configuration parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Target MCI not found or specified resources unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "409":
          description: Subgroup name conflicts or MCI in incompatible state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: VM creation failed or network integration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: vmReq
  /ns/{nsId}/mci/{mciId}/subGroupDynamicReview:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Review VM Dynamic Addition Request for Existing MCI
      description: |-
        Review and validate a VM dynamic addition request for an existing MCI before actual provisioning.
        This endpoint provides comprehensive validation for adding new VMs to existing MCIs without actually creating resources.
        It checks resource availability, validates specifications and images, estimates costs, and provides detailed recommendations.

        **Key Features:**
        - Validates VM specification and image against CSP availability
        - Checks compatibility with existing MCI configuration
        - Provides cost estimation for the new VM addition
        - Identifies potential configuration issues and warnings
        - Recommends optimization strategies
        - Non-invasive validation (no resources are created)

        **Review Status:**
        - `Ready`: VM can be added successfully
        - `Warning`: VM can be added but with configuration warnings
        - `Error`: Critical errors prevent VM addition

        **MCI Integration Validation:**
        - Ensures target MCI exists and is in a compatible state
        - Validates network integration possibilities
        - Checks resource naming conflicts
        - Verifies security group and SSH key compatibility

        **Use Cases:**
        - Pre-validation before expensive VM addition operations
        - Cost estimation for scaling decisions
        - Configuration optimization before deployment
        - Risk assessment for VM addition to existing infrastructure
      operationId: PostMciDynamicSubGroupVmReview
      parameters:
      - name: nsId
        in: path
        description: Namespace ID containing the target MCI
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID to which the VM will be added
        required: true
        schema:
          type: string
          default: mci01
      - name: x-request-id
        in: header
        description: Custom request ID for tracking
        schema:
          type: string
      requestBody:
        description: "Request body to review VM dynamic addition. Must include specId\
          \ and imageId info. (ex: {name: web-servers, specId: aws+ap-northeast-2+t2.small,\
          \ imageId: aws+ap-northeast-2+ubuntu22.04, subGroupSize: 2})"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.CreateSubGroupDynamicReq'
        required: true
      responses:
        "200":
          description: "Comprehensive VM addition review result with validation status,\
            \ cost estimation, and recommendations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ReviewSubGroupDynamicReqInfo'
        "400":
          description: Invalid request format or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Target MCI not found or namespace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal server error during validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: vmReq
  /ns/{nsId}/mci/{mciId}/subgroup:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: List SubGroup IDs in a specified MCI
      description: List SubGroup IDs in a specified MCI
      operationId: GetMciGroupIds
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/subgroup/{subgroupId}:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: List VMs with a SubGroup label in a specified MCI
      description: List VMs with a SubGroup label in a specified MCI
      operationId: GetMciGroupVms
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: subgroupId
        in: path
        description: subGroup ID
        required: true
        schema:
          type: string
          default: g1
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Scale Out Existing SubGroup in MCI
      description: |-
        Horizontally scale an existing VM subgroup by adding more identical instances for increased capacity.
        This endpoint provides elastic scaling capabilities for running application tiers:

        **Scale-Out Process:**
        1. **SubGroup Validation**: Verifies target subgroup exists and is in scalable state
        2. **Template Replication**: Uses existing VM configuration as template for new instances
        3. **Resource Allocation**: Ensures sufficient CSP quotas and network resources
        4. **Parallel Deployment**: Deploys multiple new VMs simultaneously for faster scaling
        5. **Integration**: Seamlessly integrates new VMs into existing subgroup and MCI

        **Configuration Inheritance:**
        - **VM Specifications**: New VMs inherit exact specifications from existing subgroup members
        - **Network Settings**: Automatically placed in same VNet, subnet, and security groups
        - **SSH Keys**: Use same SSH key pairs for consistent access management
        - **Monitoring**: Inherit monitoring agent configuration and policies
        - **Labels and Metadata**: Propagate all labels and metadata from parent subgroup

        **Scaling Scenarios:**
        - **Traffic Spikes**: Quickly add capacity during high-demand periods
        - **Seasonal Scaling**: Scale out for predictable demand increases
        - **Performance Optimization**: Add instances to reduce per-VM resource utilization
        - **Geographic Expansion**: Scale existing workloads to handle broader user base
        - **Fault Tolerance**: Increase redundancy by adding more instances

        **Intelligent Scaling:**
        - **Sequential Naming**: New VMs follow established naming pattern (e.g., web-4, web-5, web-6)
        - **Load Distribution**: New VMs are distributed optimally across availability zones
        - **Resource Efficiency**: Reuses existing network and security infrastructure
        - **Minimal Disruption**: Scaling occurs without affecting existing VM operations
        - **Consistent Configuration**: Ensures all VMs in subgroup remain homogeneous

        **Operational Benefits:**
        - **Zero Downtime**: Existing VMs continue running during scale-out operation
        - **Immediate Availability**: New VMs are ready for traffic as soon as deployment completes
        - **Unified Management**: All VMs (old and new) managed through single subgroup
        - **Policy Consistency**: All scaling and management policies apply uniformly
        - **Monitoring Integration**: New VMs automatically included in existing monitoring dashboards

        **Scale-Out Considerations:**
        - **CSP Quotas**: Verifies sufficient instance, network, and storage quotas
        - **Region Capacity**: Ensures target region has capacity for requested instance types
        - **Network Limits**: Validates that VNet can accommodate additional VMs
        - **Cost Impact**: Additional VMs incur proportional CSP billing costs
        - **Application Readiness**: Applications should be designed to handle additional instances

        **Post-Scale Operations:**
        - New VMs immediately participate in subgroup operations
        - Can be individually managed while maintaining subgroup membership
        - Support for further scaling operations (scale-out or scale-in)
        - Ready for application deployment and load balancer integration

        **Best Practices:**
        - Monitor application performance before and after scaling
        - Ensure load balancers are configured to include new instances
        - Verify application clustering and session management handle new instances
        - Consider database connection limits and other resource constraints
      operationId: PostMciSubGroupScaleOut
      parameters:
      - name: nsId
        in: path
        description: Namespace ID containing the target MCI and subgroup
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID containing the subgroup to scale
        required: true
        schema:
          type: string
          default: mci01
      - name: subgroupId
        in: path
        description: SubGroup ID to scale out (must exist and contain at least one
          VM)
        required: true
        schema:
          type: string
          default: g1
      requestBody:
        description: Scale-out request specifying the number of additional VMs to
          create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ScaleOutSubGroupReq'
        required: true
      responses:
        "200":
          description: Updated MCI information with scaled subgroup showing all VMs
            including newly added instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciInfo'
        "400":
          description: "Invalid scale-out request, insufficient quotas, or invalid\
            \ VM count"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: "Target MCI or subgroup not found, or namespace inaccessible"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "409":
          description: SubGroup in incompatible state for scaling or resource conflicts
            detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: "VM provisioning failed, network configuration error, or CSP\
            \ capacity limitations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: vmReq
  /ns/{nsId}/mci/{mciId}/vm:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Add Homogeneous VM SubGroup to Existing MCI
      description: |-
        Create and add a group of identical virtual machines (subgroup) to an existing MCI using detailed specifications.
        This endpoint provides precise control over VM configuration and placement within existing infrastructure:

        **SubGroup Creation Process:**
        1. **MCI Integration**: Validates target MCI exists and can accommodate new VMs
        2. **Resource Validation**: Verifies all specified resources (specs, images, networks) exist and are accessible
        3. **Homogeneous Deployment**: Creates multiple identical VMs with consistent configuration
        4. **Network Integration**: Integrates new VMs with existing MCI networking and security policies
        5. **Group Management**: Establishes subgroup for collective management and operations

        **Detailed Configuration Control:**
        - **Specific Resource References**: Uses exact resource IDs rather than common specifications
        - **Network Placement**: Precise control over VNet, subnet, and security group assignment
        - **Storage Configuration**: Detailed disk configuration including type, size, and performance tiers
        - **Instance Customization**: Full control over VM specifications, images, and metadata
        - **Security Settings**: Explicit security group and SSH key configuration

        **SubGroup Benefits:**
        - **Collective Operations**: Perform operations on entire subgroup simultaneously
        - **Homogeneous Scaling**: All VMs in subgroup share identical configuration
        - **Simplified Management**: Single configuration template for multiple VMs
        - **Consistent Naming**: Automatic sequential naming (e.g., web-1, web-2, web-3)
        - **Group Policies**: Apply scaling, monitoring, and lifecycle policies at subgroup level

        **Use Cases:**
        - **Application Tiers**: Deploy multiple instances of web servers, application servers, or databases
        - **Load Distribution**: Create multiple identical VMs for load balancing scenarios
        - **High Availability**: Deploy redundant instances across availability zones
        - **Batch Processing**: Create worker nodes for distributed computing workloads
        - **Development Environments**: Provision identical development or testing instances

        **Configuration Requirements:**
        - **Resource IDs**: Must specify exact resource identifiers (not common specs)
        - **Network Configuration**: VNet, subnet, and security group must exist and be compatible
        - **SSH Keys**: Must specify valid SSH key pairs for access management
        - **Image Compatibility**: Specified image must be available in target region
        - **Quota Validation**: Sufficient CSP quotas must be available for all requested VMs

        **SubGroup Size Considerations:**
        - **Small Groups (1-5 VMs)**: Fast deployment, minimal resource contention
        - **Medium Groups (6-20 VMs)**: Optimized parallel deployment with resource batching
        - **Large Groups (21+ VMs)**: Advanced deployment strategies to avoid CSP rate limits
        - **Resource Limits**: Respects CSP quotas and CB-Tumblebug configuration limits

        **Post-Deployment Integration:**
        - SubGroup becomes integral part of parent MCI
        - All VMs inherit MCI-level monitoring and management policies
        - Can be scaled out further or individual VMs can be managed separately
        - Supports all standard CB-Tumblebug VM lifecycle operations
      operationId: PostMciVm
      parameters:
      - name: nsId
        in: path
        description: Namespace ID containing the target MCI
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID to which the VM subgroup will be added
        required: true
        schema:
          type: string
          default: mci01
      requestBody:
        description: "Detailed VM subgroup specification including exact resource\
          \ IDs, networking, and scaling parameters"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.CreateSubGroupReq'
        required: true
      responses:
        "200":
          description: Updated MCI information including newly created VM subgroup
            with individual VM details and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciInfo'
        "400":
          description: "Invalid VM request, missing required resources, or configuration\
            \ conflicts"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: "Target MCI not found, specified resources unavailable, or\
            \ namespace inaccessible"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "409":
          description: "SubGroup name conflicts, resource allocation conflicts, or\
            \ MCI state incompatible with expansion"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: "VM provisioning failed, network configuration error, or CSP\
            \ API communication failure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: vmReq
  /ns/{nsId}/mci/{mciId}/vm/{targetVmId}/bastion:
    get:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Get bastion nodes for a VM
      description: Get bastion nodes for a VM
      operationId: GetBastionNodes
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: targetVmId
        in: path
        description: Target VM ID
        required: true
        schema:
          type: string
          default: g1-1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/model.BastionNode'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/vm/{targetVmId}/bastion/{bastionVmId}:
    put:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Set bastion nodes for a VM
      description: Set bastion nodes for a VM
      operationId: SetBastionNodes
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: targetVmId
        in: path
        description: Target VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: bastionVmId
        in: path
        description: Bastion VM ID
        required: true
        schema:
          type: string
          default: g1-1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Get VM in specified MCI
      description: Get VM in specified MCI
      operationId: GetMciVm
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: option
        in: query
        description: Option for MCI
        schema:
          type: string
          enum:
          - default
          - status
          - idsInDetail
          - accessinfo
      - name: accessInfoOption
        in: query
        description: (For option=accessinfo) accessInfoOption (showSshKey)
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/infra.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/model.VmInfo'
                    '[IDNAME]':
                      $ref: '#/components/schemas/model.IdNameInDetailInfo'
                    '[STATUS]':
                      $ref: '#/components/schemas/model.VmStatusInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Delete VM in specified MCI
      description: Delete VM in specified MCI
      operationId: DelMciVm
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: option
        in: query
        description: Option for delete VM (support force delete)
        schema:
          type: string
          enum:
          - force
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}/commandStatus:
    get:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: List command status records for a VM with filtering
      description: List command status records for a VM with various filtering options
      operationId: ListVmCommandStatus
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: status
        in: query
        description: Filter by command execution status (can specify multiple)
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - Queued
            - Handling
            - Completed
            - Failed
            - Timeout
      - name: xRequestId
        in: query
        description: Filter by X-Request-ID
        schema:
          type: string
      - name: commandContains
        in: query
        description: Filter commands containing this text
        schema:
          type: string
      - name: startTimeFrom
        in: query
        description: Filter commands started from this time (RFC3339 format)
        schema:
          type: string
      - name: startTimeTo
        in: query
        description: Filter commands started until this time (RFC3339 format)
        schema:
          type: string
      - name: indexFrom
        in: query
        description: Filter commands from this index (inclusive)
        schema:
          type: integer
      - name: indexTo
        in: query
        description: Filter commands to this index (inclusive)
        schema:
          type: integer
      - name: limit
        in: query
        description: Limit the number of results returned
        schema:
          type: integer
          default: 50
      - name: offset
        in: query
        description: Number of results to skip
        schema:
          type: integer
          default: 0
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.CommandStatusListResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Delete multiple command status records by criteria for a VM
      description: Delete multiple command status records for a VM based on filtering
        criteria
      operationId: DeleteVmCommandStatusByCriteria
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: status
        in: query
        description: Filter by command execution status (can specify multiple)
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - Queued
            - Handling
            - Completed
            - Failed
            - Timeout
      - name: xRequestId
        in: query
        description: Filter by X-Request-ID
        schema:
          type: string
      - name: commandContains
        in: query
        description: Filter commands containing this text
        schema:
          type: string
      - name: startTimeFrom
        in: query
        description: Filter commands started from this time (RFC3339 format)
        schema:
          type: string
      - name: startTimeTo
        in: query
        description: Filter commands started until this time (RFC3339 format)
        schema:
          type: string
      - name: indexFrom
        in: query
        description: Filter commands from this index (inclusive)
        schema:
          type: integer
      - name: indexTo
        in: query
        description: Filter commands to this index (inclusive)
        schema:
          type: integer
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}/commandStatus/{index}:
    get:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Get a specific command status by index for a VM
      description: Get a specific command status record by index for a VM
      operationId: GetVmCommandStatus
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: index
        in: path
        description: Command Index
        required: true
        schema:
          type: integer
          default: 1
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.CommandStatusInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Delete a specific command status by index for a VM
      description: Delete a specific command status record by index for a VM
      operationId: DeleteVmCommandStatus
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: index
        in: path
        description: Command Index
        required: true
        schema:
          type: integer
          default: 1
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}/commandStatusAll:
    delete:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Clear all command status records for a VM
      description: Delete all command status records for a VM
      operationId: ClearAllVmCommandStatus
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}/dataDisk:
    get:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: Get available dataDisks for a VM
      description: Get available dataDisks for a VM
      operationId: GetVmDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/resource.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/resource.RestGetAllDataDiskResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: Attach/Detach available dataDisk
      description: Attach/Detach available dataDisk
      operationId: PutVmDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: option
        in: query
        description: Option for MCI
        required: true
        schema:
          type: string
          enum:
          - attach
          - detach
      - name: force
        in: query
        description: Force to attach/detach even if VM info is not matched
        schema:
          type: string
          enum:
          - "true"
          - "false"
      requestBody:
        description: Request body to attach/detach dataDisk
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.AttachDetachDataDiskReq'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VmInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: attachDetachDataDiskReq
    post:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: Provisioning (Create and attach) dataDisk
      description: Provisioning (Create and attach) dataDisk
      operationId: PostVmDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      requestBody:
        description: Details for an Data Disk object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.DataDiskVmReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VmInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: dataDiskInfo
  /ns/{nsId}/mci/{mciId}/vm/{vmId}/handlingCount:
    get:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Get count of currently handling commands for a VM
      description: Get the number of commands currently in 'Handling' status for a
        specific VM. Optimized for frequent polling.
      operationId: GetVmHandlingCommandCount
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.HandlingCommandCountResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}/snapshot:
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Snapshot VM and create a Custom Image Object using the Snapshot
      description: Snapshot VM and create a Custom Image Object using the Snapshot
      operationId: PostMciVmSnapshot
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: g1-1
      requestBody:
        description: Request body to create VM snapshot
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SnapshotReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ImageInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: snapshotReq
  /ns/{nsId}/mci/{mciId}/vpn:
    get:
      tags:
      - "[Infra Resource] Site-to-site VPN Management (under development)"
      summary: Get all site-to-site VPNs
      description: Get all site-to-site VPNs
      operationId: GetAllSiteToSiteVpn
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: option
        in: query
        description: Option
        schema:
          type: string
          default: IdList
          enum:
          - InfoList
          - IdList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VpnIdList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] Site-to-site VPN Management (under development)"
      summary: Create a site-to-site VPN
      description: |-
        Create a site-to-site VPN

        The supported CSP sets are as follows:

        - AWS and one of CSPs in Azure, GCP, Alibaba, Tencent, and IBM

        - Note: It will take about `15 ~ 45 minutes`.
      operationId: PostSiteToSiteVpn
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: action
        in: query
        description: Action
        schema:
          type: string
          enum:
          - retry
      requestBody:
        description: Sites info for VPN configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.RestPostVpnRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "400":
          description: Bad Request
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: vpnReq
  /ns/{nsId}/mci/{mciId}/vpn/{vpnId}:
    get:
      tags:
      - "[Infra Resource] Site-to-site VPN Management (under development)"
      summary: Get resource info of a site-to-site VPN
      description: Get resource info of a site-to-site VPN
      operationId: GetSiteToSiteVpn
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vpnId
        in: path
        description: VPN ID
        required: true
        schema:
          type: string
          default: vpn01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VpnInfo'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Infra Resource] Site-to-site VPN Management (under development)"
      summary: Delete a site-to-site VPN
      description: Delete a site-to-site VPN
      operationId: DeleteSiteToSiteVpn
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vpnId
        in: path
        description: VPN ID
        required: true
        schema:
          type: string
          default: vpn01
      responses:
        "200":
          description: OK
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "400":
          description: Bad Request
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mci/{mciId}/vpn/{vpnId}/request/{requestId}:
    get:
      tags:
      - "[Infra Resource] Site-to-site VPN Management (under development)"
      summary: Check the status of a specific request by its ID
      description: Check the status of a specific request by its ID
      operationId: GetRequestStatusOfSiteToSiteVpn
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vpnId
        in: path
        description: VPN ID
        required: true
        schema:
          type: string
          default: vpn01
      - name: requestId
        in: path
        description: Request ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Response'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/mciDynamic:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Create MCI Dynamically with Intelligent Resource Selection
      description: |-
        Create multi-cloud infrastructure dynamically using common specifications and images with automatic resource discovery and optimization.
        This is the **recommended approach** for MCI creation, providing simplified configuration with powerful automation:

        **Dynamic Resource Creation:**
        1. **Automatic Resource Discovery**: Validates and selects optimal VM specifications and images from common namespace
        2. **Intelligent Network Setup**: Creates VNets, subnets, security groups, and SSH keys automatically per provider
        3. **Cross-Cloud Orchestration**: Coordinates VM provisioning across multiple cloud providers simultaneously
        4. **Dependency Management**: Handles resource creation order and inter-dependencies automatically
        5. **Failure Recovery**: Implements configurable failure policies for robust deployment

        **Key Advantages Over Static MCI:**
        - **Simplified Configuration**: Use common spec/image IDs instead of provider-specific resources
        - **Automatic Resource Management**: No need to pre-create VNets, security groups, or SSH keys
        - **Multi-Cloud Optimization**: Intelligent placement and configuration across providers
        - **Built-in Best Practices**: Security groups, network isolation, and access controls applied automatically
        - **Scalable Architecture**: Supports large-scale deployments with optimized resource utilization

        **Configuration Process:**
        1. **Resource Discovery**: Use `/recommendSpec` to find suitable VM specifications
        2. **Image Selection**: Use system namespace to discover compatible images
        3. **Request Validation**: Use `/mciDynamicCheckRequest` to validate configuration before deployment
        4. **Optional Preview**: Use `/mciDynamicReview` to estimate costs and review configuration
        5. **Deployment**: Submit MCI dynamic request with failure policy and deployment options

        **Failure Policies (PolicyOnPartialFailure):**
        - **`continue`** (default): Create MCI with successful VMs, failed VMs remain for manual refinement
        - **`rollback`**: Delete entire MCI if any VM fails (all-or-nothing deployment)
        - **`refine`**: Automatically clean up failed VMs, keep successful ones (recommended for large deployments)

        **Deployment Options:**
        - **`hold`**: Create MCI object but hold VM provisioning for manual approval
        - **Normal**: Proceed with immediate VM provisioning after resource creation

        **Multi-Cloud Example Configuration:**
        ```json
        {
        "name": "multi-cloud-web-tier",
        "description": "Web application across AWS, Azure, and GCP",
        "policyOnPartialFailure": "refine",
        "vm": [
        {
        "name": "aws-web-servers",
        "subGroupSize": "3",
        "specId": "aws+us-east-1+t3.medium",
        "imageId": "ami-0abcdef1234567890",
        "rootDiskSize": "100",
        "label": {"tier": "web", "provider": "aws"}
        },
        {
        "name": "azure-api-servers",
        "subGroupSize": "2",
        "specId": "azure+eastus+Standard_B2s",
        "imageId": "Canonical:0001-com-ubuntu-server-jammy:22_04-lts",
        "label": {"tier": "api", "provider": "azure"}
        }
        ]
        }
        ```

        **Performance Considerations:**
        - VM provisioning occurs in parallel across providers
        - Network resources are created concurrently where possible
        - Large deployments (>10 VMs) automatically use optimized batching
        - Built-in rate limiting prevents CSP API throttling

        **Monitoring and Post-Deployment:**
        - Optional CB-Dragonfly monitoring agent installation
        - Custom post-deployment command execution
        - Real-time status tracking and progress updates
        - Automatic resource labeling and metadata management
      operationId: PostMciDynamic
      parameters:
      - name: nsId
        in: path
        description: Namespace ID for resource organization and isolation
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: "Deployment option: 'hold' to create MCI without immediate VM\
          \ provisioning"
        schema:
          type: string
          enum:
          - hold
      - name: x-request-id
        in: header
        description: Custom request ID for tracking and correlation across API calls
        schema:
          type: string
      requestBody:
        description: Dynamic MCI request with common specifications. Must include
          specId and imageId for each VM group. See description for detailed example.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciDynamicReq'
        required: true
      responses:
        "200":
          description: "Successfully created MCI with VM deployment status, resource\
            \ mappings, and configuration details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciInfo'
        "400":
          description: "Invalid request format, missing required fields, or unsupported\
            \ configuration"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: "Namespace not found, specified specs/images unavailable, or\
            \ CSP resources inaccessible"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "409":
          description: MCI name already exists or resource naming conflicts detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: "Internal deployment error, CSP API failures, or resource creation\
            \ timeouts"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciReq
  /ns/{nsId}/mciDynamicReview:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Review and Validate MCI Dynamic Request
      description: |-
        Review and validate MCI dynamic request comprehensively before actual provisioning.
        This endpoint performs comprehensive validation of MCI dynamic creation requests without actually creating resources.
        It checks resource availability, validates specifications and images, estimates costs, and provides detailed recommendations.

        **Key Features:**
        - Validates all VM specifications and images against CSP availability
        - Provides cost estimation (including partial estimates when some costs are unknown)
        - Identifies potential configuration issues and warnings
        - Recommends optimization strategies
        - Shows provider and region distribution
        - Non-invasive validation (no resources are created)

        **Review Status:**
        - `Ready`: All VMs can be created successfully
        - `Warning`: VMs can be created but with configuration warnings
        - `Error`: Critical errors prevent MCI creation

        **Use Cases:**
        - Pre-validation before expensive MCI creation
        - Cost estimation and planning
        - Configuration optimization
        - Multi-cloud resource planning
      operationId: PostMciDynamicReview
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option for MCI creation review (same as actual creation)
        schema:
          type: string
          enum:
          - hold
      - name: x-request-id
        in: header
        description: Custom request ID for tracking
        schema:
          type: string
      requestBody:
        description: "Request body to review MCI dynamic provisioning. Must include\
          \ specId and imageId info of each VM request. Same format as /mciDynamic\
          \ endpoint. (ex: {name: mci01, vm: [{imageId: aws+ap-northeast-2+ubuntu22.04,\
          \ specId: aws+ap-northeast-2+t2.small}]})"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciDynamicReq'
        required: true
      responses:
        "200":
          description: "Comprehensive review result with validation status, cost estimation,\
            \ and recommendations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ReviewMciDynamicReqInfo'
        "400":
          description: Invalid request format or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Namespace not found or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal server error during validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciReq
  /ns/{nsId}/monitoring/install/mci/{mciId}:
    post:
      tags:
      - "[MC-Infra] MCI Resource Monitor (for developer)"
      summary: Install monitoring agent (CB-Dragonfly agent) to MCI
      description: Install monitoring agent (CB-Dragonfly agent) to MCI
      operationId: PostInstallMonitorAgentToMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      requestBody:
        description: Details for an MCI object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciCmdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.AgentInstallContentWrapper'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciInfo
  /ns/{nsId}/monitoring/mci/{mciId}/metric/{metric}:
    get:
      tags:
      - "[MC-Infra] MCI Resource Monitor (for developer)"
      summary: "Get monitoring data of specified MCI for specified monitoring metric\
        \ (cpu, memory, disk, network)"
      description: "Get monitoring data of specified MCI for specified monitoring\
        \ metric (cpu, memory, disk, network)"
      operationId: GetMonitorData
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: metric
        in: path
        description: "Metric type: cpu, memory, disk, network"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MonResultSimpleResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/monitoring/status/mci/{mciId}/vm/{vmId}:
    put:
      tags:
      - "[MC-Infra] MCI Resource Monitor (for developer)"
      summary: Set monitoring agent (CB-Dragonfly agent) installation status installed
        (for Windows VM only)
      description: Set monitoring agent (CB-Dragonfly agent) installation status installed
        (for Windows VM only)
      operationId: PutMonitorAgentStatusInstalled
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          default: vm01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VmInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/policy/mci:
    get:
      tags:
      - "[MC-Infra] MCI Orchestration Management (WIP)"
      summary: List all MCI policies
      description: List all MCI policies
      operationId: GetAllMciPolicy
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/infra.RestGetAllMciPolicyResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[MC-Infra] MCI Orchestration Management (WIP)"
      summary: Delete all MCI policies
      description: Delete all MCI policies
      operationId: DelAllMciPolicy
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/policy/mci/{mciId}:
    get:
      tags:
      - "[MC-Infra] MCI Orchestration Management (WIP)"
      summary: Get MCI Policy
      description: Get MCI Policy
      operationId: GetMciPolicy
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciPolicyInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[MC-Infra] MCI Orchestration Management (WIP)"
      summary: Create MCI Automation policy
      description: Create MCI Automation policy
      operationId: PostMciPolicy
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      requestBody:
        description: Details for an MCI automation policy request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciPolicyReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciPolicyInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciPolicyReq
    delete:
      tags:
      - "[MC-Infra] MCI Orchestration Management (WIP)"
      summary: Delete MCI Policy
      description: Delete MCI Policy
      operationId: DelMciPolicy
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/registerCspResource/vNet:
    post:
      tags:
      - "[Infra Resource] Network Management"
      summary: Register VNet (created in CSP)
      description: "Register the VNet, which was created in CSP"
      operationId: PostRegisterVNet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      requestBody:
        description: Inforamation required to register the VNet created externally
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.RegisterVNetReq'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VNetInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: vNetRegisterReq
  /ns/{nsId}/registerCspResource/vNet/{vNetId}/subnet:
    post:
      tags:
      - "[Infra Resource] Network Management"
      summary: Register Subnet (created in CSP)
      description: "Register Subnet, which was created in CSP"
      operationId: PostRegisterSubnet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      requestBody:
        description: Details for an Subnet object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.RegisterSubnetReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SubnetInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: subnetReq
  /ns/{nsId}/registerCspVm:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Register Existing CSP VMs into Cloud-Barista MCI
      description: |-
        Import and register pre-existing virtual machines from cloud service providers into CB-Tumblebug management.
        This endpoint allows you to bring existing CSP resources under CB-Tumblebug control without recreating them:

        **Registration Process:**
        1. **Discovery**: Validates that the specified VM exists in the target CSP
        2. **Metadata Import**: Retrieves VM configuration, network settings, and current status
        3. **Resource Mapping**: Creates CB-Tumblebug resource objects that reference the existing CSP resources
        4. **Status Synchronization**: Aligns CB-Tumblebug status with actual CSP VM state
        5. **Management Integration**: Enables CB-Tumblebug operations on the registered VMs

        **Supported VM States:**
        - Running VMs (most common use case)
        - Stopped VMs (will be registered with current state)
        - VMs with attached storage and network interfaces

        **Resource Compatibility:**
        - VM must exist in a supported CSP (AWS, Azure, GCP, etc.)
        - Network resources (VPC, subnets, security groups) will be discovered and mapped
        - Storage volumes and attached disks will be registered automatically
        - SSH keys and security configurations will be imported

        **Post-Registration Capabilities:**
        - Standard CB-Tumblebug VM lifecycle operations (start, stop, terminate)
        - Monitoring agent installation (if CB-Dragonfly is configured)
        - Command execution and automation
        - Integration with other CB-Tumblebug MCIs

        **Important Notes:**
        - Registration does not modify the existing VM configuration
        - Original CSP billing and resource management still applies
        - CB-Tumblebug provides additional management layer and automation
        - Ensure proper CSP credentials and permissions are configured
      operationId: PostRegisterCSPNativeVM
      parameters:
      - name: nsId
        in: path
        description: Namespace ID for organizing registered resources
        required: true
        schema:
          type: string
          default: default
      requestBody:
        description: MCI registration request containing existing CSP VM IDs and connection
          details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciReq'
        required: true
      responses:
        "200":
          description: Registered MCI information with imported VM details and current
            status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciInfo'
        "400":
          description: Invalid request format or missing required CSP VM identifiers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Specified VMs not found in target CSP or namespace doesn't
            exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "409":
          description: VM already registered or MCI name conflicts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: CSP communication error or registration process failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciReq
  /ns/{nsId}/resources/customImage:
    get:
      tags:
      - "[Infra Resource] Image Management"
      summary: List all customImages or customImages' ID
      description: List all customImages or customImages' ID
      operationId: GetAllCustomImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      - name: filterKey
        in: query
        description: Field key for filtering (ex:guestOS)
        schema:
          type: string
      - name: filterVal
        in: query
        description: "Field value for filtering (ex: Ubuntu18.04)"
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/resource.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/resource.RestGetAllCustomImageResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Register existing Custom Image in a CSP
      description: Register existing Custom Image in a CSP (option=register)
      operationId: PostCustomImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: "Option: "
        required: true
        schema:
          type: string
          enum:
          - register
      requestBody:
        description: Request to Register existing Custom Image in a CSP
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.CustomImageReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ImageInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: customImageRegisterReq
    delete:
      tags:
      - "[Infra Resource] Image Management"
      summary: Delete all customImages
      description: Delete all customImages
      operationId: DelAllCustomImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: match
        in: query
        description: Delete resources containing matched ID-substring only
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/customImage/{customImageId}:
    get:
      tags:
      - "[Infra Resource] Image Management"
      summary: Get customImage
      description: Get customImage
      operationId: GetCustomImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: customImageId
        in: path
        description: customImage ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ImageInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Infra Resource] Image Management"
      summary: Delete customImage
      description: Delete customImage
      operationId: DelCustomImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: customImageId
        in: path
        description: customImage ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/dataDisk:
    get:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: List all Data Disks or Data Disks' ID
      description: List all Data Disks or Data Disks' ID
      operationId: GetAllDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      - name: filterKey
        in: query
        description: "Field key for filtering (ex: systemLabel)"
        schema:
          type: string
      - name: filterVal
        in: query
        description: "Field value for filtering (ex: Registered from CSP resource)"
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/resource.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/resource.RestGetAllDataDiskResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: Create Data Disk
      description: Create Data Disk
      operationId: PostDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: "Option: "
        schema:
          type: string
          enum:
          - register
      requestBody:
        description: Details for an Data Disk object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.DataDiskReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.DataDiskInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: dataDiskInfo
    delete:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: Delete all Data Disks
      description: Delete all Data Disks
      operationId: DelAllDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: match
        in: query
        description: Delete resources containing matched ID-substring only
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/dataDisk/{dataDiskId}:
    get:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: Get Data Disk
      description: Get Data Disk
      operationId: GetDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: dataDiskId
        in: path
        description: Data Disk ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.DataDiskInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: Upsize Data Disk
      description: Upsize Data Disk
      operationId: PutDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: dataDiskId
        in: path
        description: DataDisk ID
        required: true
        schema:
          type: string
      requestBody:
        description: Request body to upsize the dataDisk
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.DataDiskUpsizeReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.DataDiskInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: dataDiskUpsizeReq
    delete:
      tags:
      - "[Infra Resource] Data Disk Management"
      summary: Delete Data Disk
      description: Delete Data Disk
      operationId: DelDataDisk
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: dataDiskId
        in: path
        description: Data Disk ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/filterSpecsByRange:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Filter specs by range
      description: "Filter specs by range. Use limit field to control the maximum\
        \ number of results. If limit is 0 or not specified, returns all matching\
        \ results."
      operationId: FilterSpecsByRange
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      requestBody:
        description: "Filter for range-filtering specs (limit: 0 for all results,\
          \ >0 for limited results)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.FilterSpecsByRangeRequest'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource.RestFilterSpecsResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: specRangeFilter
  /ns/{nsId}/resources/image:
    get:
      tags:
      - "[Infra Resource] Image Management"
      summary: List all images or images' ID
      description: List all images or images' ID
      operationId: GetAllImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      - name: filterKey
        in: query
        description: Field key for filtering (ex:guestOS)
        schema:
          type: string
      - name: filterVal
        in: query
        description: "Field value for filtering (ex: Ubuntu18.04)"
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/resource.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/model.SearchImageResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Register image
      description: Register image
      operationId: PostImage
      parameters:
      - name: action
        in: query
        description: registeringMethod
        required: true
        schema:
          type: string
          enum:
          - registerWithInfo
          - registerWithId
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: update
        in: query
        description: Force update to existing image object
        schema:
          type: boolean
          default: false
      requestBody:
        description: "Specify (name, connectionName, cspImageName) to register an\
          \ image object automatically"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ImageReq'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ImageInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: imageReq
    delete:
      tags:
      - "[Infra Resource] Image Management"
      summary: Delete all images
      description: Delete all images
      operationId: DelAllImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: match
        in: query
        description: Delete resources containing matched ID-substring only
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/image/{imageId}:
    get:
      tags:
      - "[Infra Resource] Image Management"
      summary: Get image
      description: GetImage returns an image object if there are matched images for
        the given namespace and imageKey(imageId)
      operationId: GetImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: imageId
        in: path
        description: "(Note: imageId param will be refined in next release, enabled\
          \ for temporal support) This param accepts several input forms: 1) provider+imageId,\
          \ 2) provider+region+imageId, 3) imageId. For exact matching, use provider+imageId\
          \ form."
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ImageInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Infra Resource] Image Management"
      summary: Update image
      description: Update image
      operationId: PutImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: imageId
        in: path
        description: "Image ID ({providerName}+{regionName}+{cspImageName})"
        required: true
        schema:
          type: string
      requestBody:
        description: Details for an image object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ImageInfo'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ImageInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: imageInfo
    delete:
      tags:
      - "[Infra Resource] Image Management"
      summary: Delete image
      description: Delete image
      operationId: DelImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: imageId
        in: path
        description: "Image ID ({providerName}+{regionName}+{cspImageName})"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/searchImage:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Search image
      description: Search image
      operationId: SearchImage
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: customImage
        in: query
        description: Search custom images (snapshots) only
        schema:
          type: boolean
          default: false
      requestBody:
        description: condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SearchImageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SearchImageResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: condition
  /ns/{nsId}/resources/searchImageOptions:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      description: Get all available options for image search fields
      operationId: SearchImageOptions
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SearchImageRequestOptions'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/securityGroup:
    get:
      tags:
      - "[Infra Resource] Security Group Management"
      summary: List all Security Groups or Security Groups' ID
      description: List all Security Groups or Security Groups' ID
      operationId: GetAllSecurityGroup
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      - name: filterKey
        in: query
        description: "Field key for filtering (ex: systemLabel)"
        schema:
          type: string
      - name: filterVal
        in: query
        description: "Field value for filtering (ex: Registered from CSP resource)"
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/resource.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/resource.RestGetAllSecurityGroupResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] Security Group Management"
      summary: Create Security Group
      description: Create Security Group
      operationId: PostSecurityGroup
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: "Option: [required params for register] connectionName, name,\
          \ vNetId, cspResourceId"
        schema:
          type: string
          enum:
          - register
      requestBody:
        description: Details for an securityGroup object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SecurityGroupReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SecurityGroupInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: securityGroupReq
    delete:
      tags:
      - "[Infra Resource] Security Group Management"
      summary: Delete all Security Groups
      description: Delete all Security Groups
      operationId: DelAllSecurityGroup
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: match
        in: query
        description: Delete resources containing matched ID-substring only
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/securityGroup/{securityGroupId}:
    get:
      tags:
      - "[Infra Resource] Security Group Management"
      summary: Get Security Group
      description: Get Security Group
      operationId: GetSecurityGroup
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: securityGroupId
        in: path
        description: Security Group ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SecurityGroupInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Infra Resource] Security Group Management"
      summary: Update Security Group (Synchronize Firewall Rules)
      description: |-
        Update Security Group: Synchronize the firewall rules of the specified Security Group to match the requested list exactly.
        This API will add missing rules and delete extra rules so that the Security Group's rules become identical to the requested set.
        Only firewall rules are updated; other metadata (name, description, etc.) is not changed.

        Usage:
        Use this API to update (synchronize) the firewall rules of a Security Group. The rules in the request body will become the only rules in the Security Group after the operation.
        - All existing rules not present in the request will be deleted.
        - All rules in the request that do not exist will be added.
        - If a rule exists but differs in CIDR or port range, it will be replaced.
        - Special protocols (ICMP, etc.) are handled in the same way.

        Notes:
        - "Ports" field supports single port ("22"), port range ("80-100"), and multiple ports/ranges ("22,80-100,443").
        - The valid port number range is 0 to 65535 (inclusive).
        - "Protocol" can be TCP, UDP, ICMP, etc. (as supported by the cloud provider).
        - "Direction" must be either "inbound" or "outbound".
        - "CIDR" is the allowed IP range.
        - All existing rules not in the request (including default ICMP, etc.) will be deleted.
        - Metadata (name, description, etc.) is not changed.
      operationId: PutSecurityGroup
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: securityGroupId
        in: path
        description: Security Group ID
        required: true
        schema:
          type: string
      requestBody:
        description: Details for an securityGroup object (only firewallRules field
          is used for update)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SecurityGroupUpdateReq'
        required: true
      responses:
        "200":
          description: Updated Security Group info with synchronized firewall rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SecurityGroupUpdateResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: securityGroupInfo
    delete:
      tags:
      - "[Infra Resource] Security Group Management"
      summary: Delete Security Group
      description: Delete Security Group
      operationId: DelSecurityGroup
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: securityGroupId
        in: path
        description: Security Group ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/securityGroup/{securityGroupId}/rules:
    post:
      tags:
      - "[Infra Resource] Security Group Management"
      summary: Add new FirewallRules to existing rules
      description: |-
        Add new FirewallRules: Add the provided firewall rules to the existing rules in the Security Group.
        This API will only add new rules without deleting or modifying existing ones.
        If a rule with identical properties already exists, it will be skipped to avoid duplicates.

        Usage:
        Use this API to add new firewall rules to a Security Group while preserving existing rules.
        - Only new rules that don't already exist will be added.
        - Existing rules remain unchanged.
        - If an identical rule already exists, it will be skipped.

        Notes:
        - "Ports" field supports single port ("22"), port range ("80-100"), and multiple ports/ranges ("22,80-100,443").
        - The valid port number range is 0 to 65535 (inclusive).
        - "Protocol" can be TCP, UDP, ICMP, ALL, etc. (as supported by the cloud provider).
        - "Direction" must be either "inbound" or "outbound".
        - "CIDR" is the allowed IP range.
      operationId: PostFirewallRules
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: securityGroupId
        in: path
        description: Security Group ID
        required: true
        schema:
          type: string
      requestBody:
        description: FirewallRules to add (only firewallRules field is used)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SecurityGroupUpdateReq'
        required: true
      responses:
        "200":
          description: Updated Security Group info with added firewall rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SecurityGroupUpdateResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: firewallRuleReq
    delete:
      tags:
      - "[Infra Resource] Security Group Management"
      summary: Delete specific FirewallRules (Replace with remaining rules)
      description: |-
        Delete specific FirewallRules: Remove specified rules from the Security Group while keeping other existing rules.
        This API will remove only the specified rules from the Security Group, leaving all other rules intact.

        Usage:
        Use this API to remove specific firewall rules from a Security Group. Only the rules matching the provided criteria will be deleted.
        - Rules that exactly match the provided Direction, Protocol, Port, and CIDR will be removed.
        - All other existing rules will remain unchanged.

        Notes:
        - "Ports" field supports single port ("22"), port range ("80-100"), and multiple ports/ranges ("22,80-100,443").
        - "Protocol" can be TCP, UDP, ICMP, ALL, etc. (as supported by the cloud provider).
        - "Direction" must be either "inbound" or "outbound".
        - "CIDR" is the allowed IP range.
      operationId: DelFirewallRules
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: securityGroupId
        in: path
        description: Security Group ID
        required: true
        schema:
          type: string
      requestBody:
        description: FirewallRules to delete (only firewallRules field is used)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SecurityGroupUpdateReq'
        required: true
      responses:
        "200":
          description: Updated Security Group info after rule deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SecurityGroupUpdateResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: firewallRuleReq
  /ns/{nsId}/resources/spec:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Register spec
      description: Register spec
      operationId: PostSpec
      parameters:
      - name: action
        in: query
        description: registeringMethod
        required: true
        schema:
          type: string
          enum:
          - registerWithInfo
          - registerWithCspResourceId
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: update
        in: query
        description: Force update to existing spec object
        schema:
          type: boolean
          default: false
      requestBody:
        description: "Specify n(ame, connectionName, cspSpecName) to register a spec\
          \ object automatically"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SpecReq'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpecInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: specReq
  /ns/{nsId}/resources/spec/{specId}:
    get:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Get spec
      description: Get spec
      operationId: GetSpec
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: specId
        in: path
        description: "Spec ID ({providerName}+{regionName}+{cspSpecName})"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpecInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Update spec
      description: Update spec
      operationId: PutSpec
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: specId
        in: path
        description: "Spec ID ({providerName}+{regionName}+{cspSpecName})"
        required: true
        schema:
          type: string
      requestBody:
        description: Details for an spec object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SpecInfo'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpecInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: specInfo
    delete:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Delete spec
      description: Delete spec
      operationId: DelSpec
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      - name: specId
        in: path
        description: "Spec ID ({providerName}+{regionName}+{cspSpecName})"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/sqlDb:
    get:
      tags:
      - "[Infra Resource] SQL Database Management (under development)"
      summary: Get all SQL Databases (TBD)
      description: Get all SQL Databases (TBD)
      operationId: GetAllSqlDb
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        schema:
          type: string
          default: IdList
          enum:
          - InfoList
          - IdList
      responses:
        "200":
          description: OK" /////////////
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VpnIdList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] SQL Database Management (under development)"
      summary: Create a SQL Databases
      description: |
        Create a SQL Databases

        Supported CSPs: AWS, Azure, GCP, NCP
        - Note - `connectionName` example: aws-ap-northeast-2, azure-koreacentral, gcp-asia-northeast3, ncp-kr

        - Note - Please check the `requiredCSPResource` property which includes CSP specific values.

        - Note - You can find the API usage examples on this link, https://github.com/cloud-barista/mc-terrarium/discussions/110
      operationId: PostSqlDb
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: action
        in: query
        description: Action
        schema:
          type: string
          enum:
          - retry
      requestBody:
        description: Request body to create a SQL database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.RestPostSqlDBRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SqlDBInfo'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: sqlDbReq
  /ns/{nsId}/resources/sqlDb/{sqlDbId}:
    get:
      tags:
      - "[Infra Resource] SQL Database Management (under development)"
      summary: Get resource info of a SQL datatbase
      description: Get resource info of a SQL datatbase
      operationId: GetSqlDb
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: sqlDbId
        in: path
        description: SQL DB ID
        required: true
        schema:
          type: string
          default: sqldb01
      - name: detail
        in: query
        description: "Resource info by detail (refined, raw)"
        schema:
          type: string
          default: refined
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SqlDBInfo'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Infra Resource] SQL Database Management (under development)"
      summary: Delete a SQL datatbase
      description: Delete a SQL datatbase
      operationId: DeleteSqlDb
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: sqlDbId
        in: path
        description: SQL DB ID
        required: true
        schema:
          type: string
          default: sqldb01
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/sshKey:
    get:
      tags:
      - "[Infra Resource] Access Key Management"
      summary: List all SSH Keys or SSH Keys' ID
      description: List all SSH Keys or SSH Keys' ID
      operationId: GetAllSshKey
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      - name: filterKey
        in: query
        description: "Field key for filtering (ex: systemLabel)"
        schema:
          type: string
      - name: filterVal
        in: query
        description: "Field value for filtering (ex: Registered from CSP resource)"
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/resource.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/resource.RestGetAllSshKeyResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] Access Key Management"
      summary: Create SSH Key
      description: Create SSH Key
      operationId: PostSshKey
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: "Option: [required params for register] connectionName, name,\
          \ cspResourceId, fingerprint, username, publicKey, privateKey"
        schema:
          type: string
          enum:
          - register
      requestBody:
        description: Details for an SSH Key object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SshKeyReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SshKeyInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: sshKeyInfo
    delete:
      tags:
      - "[Infra Resource] Access Key Management"
      summary: Delete all SSH Keys
      description: Delete all SSH Keys
      operationId: DelAllSshKey
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: match
        in: query
        description: Delete resources containing matched ID-substring only
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/sshKey/{sshKeyId}:
    get:
      tags:
      - "[Infra Resource] Access Key Management"
      summary: Get SSH Key
      description: Get SSH Key
      operationId: GetSshKey
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: sshKeyId
        in: path
        description: SSH Key ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SshKeyInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Infra Resource] Access Key Management"
      summary: Update SSH Key
      description: Update SSH Key
      operationId: PutSshKey
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: sshKeyId
        in: path
        description: SshKey ID
        required: true
        schema:
          type: string
      requestBody:
        description: Details for an SSH Key object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SshKeyInfo'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SshKeyInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: sshKeyInfo
    delete:
      tags:
      - "[Infra Resource] Access Key Management"
      summary: Delete SSH Key
      description: Delete SSH Key
      operationId: DelSshKey
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: sshKeyId
        in: path
        description: SSH Key ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/vNet:
    get:
      tags:
      - "[Infra Resource] Network Management"
      summary: List all VNets or VNets' ID
      description: List all VNets or VNets' ID
      operationId: GetAllVNet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        schema:
          type: string
          enum:
          - id
      - name: filterKey
        in: query
        description: "Field key for filtering (ex: cspResourceName)"
        schema:
          type: string
      - name: filterVal
        in: query
        description: "Field value for filtering (ex: default-alibaba-ap-northeast-1-vpc)"
        schema:
          type: string
      responses:
        "200":
          description: Different return structures by the given option param
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/resource.JSONResult'
                - type: object
                  properties:
                    '[DEFAULT]':
                      $ref: '#/components/schemas/resource.RestGetAllVNetResponse'
                    '[ID]':
                      $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] Network Management"
      summary: Create VNet
      description: Create a new VNet
      operationId: PostVNet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      requestBody:
        description: Details for an VNet object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.VNetReq'
        required: false
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VNetInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: vNetReq
    delete:
      tags:
      - "[Infra Resource] Network Management"
      summary: Delete all VNets
      description: Delete all VNets
      operationId: DelAllVNet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: match
        in: query
        description: Delete resources containing matched ID-substring only
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/vNet/{vNetId}:
    get:
      tags:
      - "[Infra Resource] Network Management"
      summary: Get VNet
      description: Get VNet
      operationId: GetVNet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.VNetInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Infra Resource] Network Management"
      summary: "Delete VNet (supporting actions: withsubnet, refine, force)"
      description: |-
        Delete VNet
        - withsubnets: delete VNet and its subnets
        - refine: delete information of VNet and its subnets if there's no info/resource in Spider/CSP
        - force: delete VNet and its subnets regardless of the status of info/resource in Spider/CSP
      operationId: DelVNet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      - name: action
        in: query
        description: Action
        schema:
          type: string
          enum:
          - withsubnets
          - refine
          - force
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/resources/vNet/{vNetId}/subnet:
    get:
      tags:
      - "[Infra Resource] Network Management"
      summary: List all subnets
      description: List all subnets
      operationId: GetAllSubnet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource.RestGetAllSubnetResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Infra Resource] Network Management"
      summary: Create Subnet
      description: Create Subnet
      operationId: PostSubnet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      requestBody:
        description: Details for an Subnet object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.SubnetReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SubnetInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: subnetReq
  /ns/{nsId}/resources/vNet/{vNetId}/subnet/{subnetId}:
    get:
      tags:
      - "[Infra Resource] Network Management"
      summary: Get Subnet
      description: Get Subnet
      operationId: GetSubnet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      - name: subnetId
        in: path
        description: Subnet ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SubnetInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Infra Resource] Network Management"
      summary: "Delete Subnet (supporting actions: refine, force)"
      description: |-
        Delete Subnet
        - refine: delete a subnet `object` if there's no resource on CSP or no inforamation on Spider
        - force: force: delete a subnet `resource` on a CSP regardless of the current resource status (e.g., attempt to delete even if in use)
      operationId: DelSubnet
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: vNetId
        in: path
        description: VNet ID
        required: true
        schema:
          type: string
      - name: subnetId
        in: path
        description: Subnet ID
        required: true
        schema:
          type: string
      - name: action
        in: query
        description: Action
        schema:
          type: string
          enum:
          - refine
          - force
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/sharedResource:
    post:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Create shared resources for MC-Infra
      description: Create shared resources for MC-Infra
      operationId: CreateSharedResource
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: option
        in: query
        description: Option
        required: true
        schema:
          type: string
          enum:
          - all
          - vnet
          - sg
          - sshkey
      - name: connectionName
        in: query
        description: connectionName of cloud for designated resource
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/sharedResources:
    delete:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Delete all Default Resource Objects in the given namespace
      description: Delete all Default Resource Objects in the given namespace
      operationId: DelAllSharedResources
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/transferFile/k8sCluster/{k8sClusterId}:
    post:
      tags:
      - "[Kubernetes] Cluster's Container Remote Command"
      summary: Transfer a file to specified Container in K8sCluster
      description: |-
        Transfer a file to specified Container in K8sCluster. The tar command is required in the container.
        [note] This feature is not intended for general use
        This API is provided as an exceptional and limited function for specific purposes such as migration.
        Kubernetes resource information required as input for this API is not currently provided, and its availability in the future is uncertain.
      operationId: PostFileToK8sCluster
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterId
        in: path
        description: K8sCluster ID
        required: true
        schema:
          type: string
          default: k8scluster01
      - name: k8sClusterNamespace
        in: query
        description: Namespace in K8sCluster to apply the command
        required: true
        schema:
          type: string
          default: default
      - name: k8sClusterPodName
        in: query
        description: Pod Name in K8sCluster to apply the command
        required: true
        schema:
          type: string
          default: mypod
      - name: k8sClusterContainerName
        in: query
        description: Container Name in K8sCluster to apply the command
        schema:
          type: string
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - file
              - path
              type: object
              properties:
                path:
                  type: string
                  description: Target path where the file will be stored
                  default: /tmp
                file:
                  type: string
                  description: The file to be uploaded (Max 10MB)
                  format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterContainerCmdResults'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/transferFile/mci/{mciId}:
    post:
      tags:
      - "[MC-Infra] MCI Remote Command"
      summary: Transfer a file to specified MCI
      description: |-
        Transfer a file to specified MCI to the specified path.
        The file size should be less than 10MB.
        Not for gerneral file transfer but for specific purpose (small configuration files).
      operationId: PostFileToMci
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: default
      - name: mciId
        in: path
        description: MCI ID
        required: true
        schema:
          type: string
          default: mci01
      - name: subGroupId
        in: query
        description: subGroupId to apply the file transfer only for VMs in subGroup
          of MCI
        schema:
          type: string
          default: g1
      - name: vmId
        in: query
        description: vmId to apply the file transfer only for a VM in MCI
        schema:
          type: string
          default: g1-1
      - name: x-request-id
        in: header
        description: Custom request ID
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              - path
              type: object
              properties:
                path:
                  type: string
                  description: Target path where the file will be stored
                  default: /home/cb-user/
                file:
                  type: string
                  description: The file to be uploaded (Max 10MB)
                  format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciSshCmdResultForAPI'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /ns/{nsId}/updateExistingSpecListByAvailableRegionZones:
    post:
      tags:
      - "[Infra Resource] Spec Management"
      summary: Clean up unavailable specs from database
      description: "Query all specs for a specific provider across all regions, check\
        \ their availability, and remove specs that are not available in their respective\
        \ regions"
      operationId: UpdateExistingSpecListByAvailableRegionZones
      parameters:
      - name: nsId
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          default: system
      requestBody:
        description: Spec cleanup request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.UpdateSpecListByAvailabilityRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SpecCleanupResult'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: cleanupReq
  /object:
    get:
      tags:
      - "[Admin] System Management"
      summary: Get value of an object
      description: Get value of an object
      operationId: GetObject
      parameters:
      - name: key
        in: query
        description: get object value by key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Admin] System Management"
      summary: Delete an object
      description: Delete an object
      operationId: DeleteObject
      parameters:
      - name: key
        in: query
        description: delete object value by key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /objects:
    get:
      tags:
      - "[Admin] System Management"
      summary: List all objects for a given key
      description: List all objects for a given key
      operationId: GetObjects
      parameters:
      - name: key
        in: query
        description: retrieve objects by key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Admin] System Management"
      summary: Delete child objects along with the given object
      description: Delete child objects along with the given object
      operationId: DeleteObjects
      parameters:
      - name: key
        in: query
        description: Delete child objects based on the given key string
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /provider:
    get:
      tags:
      - "[Admin] Multi-Cloud Information"
      summary: List all registered Providers
      description: List all registered Providers
      operationId: GetProviderList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.IdList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /provider/{providerName}/region:
    get:
      tags:
      - "[Admin] Multi-Cloud Information"
      summary: Get registered region info
      description: Get registered region info
      operationId: GetRegions
      parameters:
      - name: providerName
        in: path
        description: Name of the CSP to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RegionList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /provider/{providerName}/region/{regionName}:
    get:
      tags:
      - "[Admin] Multi-Cloud Information"
      summary: Get registered region info
      description: Get registered region info
      operationId: GetRegion
      parameters:
      - name: providerName
        in: path
        description: Name of the CSP to retrieve
        required: true
        schema:
          type: string
      - name: regionName
        in: path
        description: Name of region to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RegionDetail'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /provisioning/event:
    post:
      tags:
      - "[Admin] Provisioning History and Analytics"
      summary: Record Manual Provisioning Event
      description: |-
        Manually record a provisioning success or failure event for historical tracking and analysis.
        This endpoint allows external systems or manual processes to contribute to provisioning history:

        **Use Cases:**
        - **External Provisioning Tools**: Record events from non-CB-Tumblebug provisioning systems
        - **Manual Testing**: Log results from manual deployment tests
        - **Migration**: Import historical data from other systems
        - **Integration**: Connect with CI/CD pipelines for comprehensive tracking

        **Event Types:**
        - **Success Events**: Only recorded if previous failures exist for the spec
        - **Failure Events**: Always recorded to build failure pattern database

        **Data Quality:**
        - Provide accurate timestamps for proper chronological analysis
        - Include detailed error messages for failure events
        - Use consistent spec ID and image name formats

        **Impact on System:**
        - Contributes to risk analysis algorithms
        - Affects future MCI review recommendations
        - Builds historical baseline for reliability metrics
      operationId: RecordProvisioningEvent
      requestBody:
        description: Provisioning event details with success/failure information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ProvisioningEvent'
        required: true
      responses:
        "200":
          description: Provisioning event successfully recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "400":
          description: Invalid event data or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal server error while recording event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: provisioningEvent
  /provisioning/log/{specId}:
    get:
      tags:
      - "[Admin] Provisioning History and Analytics"
      summary: Get Provisioning History Log for VM Specification
      description: |-
        Retrieve detailed provisioning history for a specific VM specification including success/failure patterns and risk analysis.
        This endpoint provides comprehensive insights into provisioning reliability:

        **Historical Data Includes:**
        - Success and failure counts with timestamps
        - CSP-specific error messages and failure patterns
        - Image compatibility tracking across different attempts
        - Failure rate analysis and risk assessment
        - Regional and provider-specific reliability metrics

        **Use Cases:**
        - **Pre-deployment Risk Assessment**: Check if a spec has historical failures before creating MCI
        - **Troubleshooting**: Analyze failure patterns to identify root causes
        - **Capacity Planning**: Understand reliability patterns for different specs and regions
        - **Cost Optimization**: Avoid specs with high failure rates that waste resources

        **Response Details:**
        - `failureCount`: Total number of provisioning failures
        - `successCount`: Number of successes (only tracked after failures occur)
        - `failureImages`: List of CSP images that failed with this spec
        - `successImages`: List of CSP images that succeeded with this spec
        - `failureMessages`: Detailed error messages from CSP
        - `lastUpdated`: Timestamp of most recent provisioning attempt
      operationId: GetProvisioningLog
      parameters:
      - name: specId
        in: path
        description: "VM Specification ID (format: provider+region+spec_name, e.g.,\
          \ aws+ap-northeast-2+t2.micro)"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Provisioning history log with success/failure statistics and
            detailed analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ProvisioningLog'
        "204":
          description: No provisioning history found for the specified VM specification
          content: {}
        "400":
          description: Invalid specification ID format or missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal server error while retrieving provisioning history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Admin] Provisioning History and Analytics"
      summary: Delete Provisioning History Log
      description: |-
        Remove all provisioning history data for a specific VM specification.
        This operation permanently deletes historical failure and success records:

        **Warning**: This action is irreversible and will remove:
        - All failure and success statistics
        - Historical error messages and troubleshooting data
        - Risk analysis baseline for future deployments
        - Failure pattern analysis data

        **When to Use:**
        - **Data Cleanup**: Remove outdated or irrelevant provisioning history
        - **Fresh Start**: Clear history after infrastructure changes that resolve previous issues
        - **Privacy Compliance**: Remove logs containing sensitive error information
        - **Storage Management**: Clean up logs to manage kvstore space

        **Impact on System:**
        - Future risk analysis for this spec will have no historical baseline
        - MCI review process will not show historical warnings for this spec
        - Provisioning reliability metrics will be reset to zero
      operationId: DeleteProvisioningLog
      parameters:
      - name: specId
        in: path
        description: "VM Specification ID to delete history for (format: provider+region+spec_name)"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Provisioning history successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "204":
          description: No provisioning history found to delete
          content: {}
        "400":
          description: Invalid specification ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal server error while deleting provisioning history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /provisioning/risk/{specId}:
    get:
      tags:
      - "[Admin] Provisioning History and Analytics"
      summary: Analyze Provisioning Risk for Spec and Image Combination
      description: |-
        Evaluate the likelihood of provisioning failure based on historical data for a specific VM specification and image combination.
        This endpoint provides intelligent risk assessment to help prevent deployment failures:

        **Risk Analysis Factors:**
        - Historical failure rate for the VM specification
        - Image-specific compatibility with the spec
        - Recent failure patterns and trends
        - Cross-reference of spec+image combination success rates

        **Risk Levels:**
        - `high`: Very likely to fail (>80% failure rate or image-specific failures)
        - `medium`: Moderate risk (50-80% failure rate or mixed results)
        - `low`: Low risk (<50% failure rate or no previous failures)
        - `unknown`: Insufficient data for analysis

        **Recommended Actions by Risk Level:**
        - **High Risk**: Consider alternative specs or images, verify CSP quotas and permissions
        - **Medium Risk**: Proceed with caution, have backup plans ready
        - **Low Risk**: Safe to proceed with normal deployment

        **Integration Points:**
        - Automatically called during MCI review process
        - Can be used in CI/CD pipelines for deployment validation
        - Helpful for capacity planning and resource selection
      operationId: AnalyzeProvisioningRisk
      parameters:
      - name: specId
        in: path
        description: "VM Specification ID (format: provider+region+spec_name)"
        required: true
        schema:
          type: string
      - name: cspImageName
        in: query
        description: CSP-specific image name/ID to analyze compatibility
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "Risk analysis result with level, message, and detailed analysis"
          content:
            application/json:
              schema:
                type: object
                properties:
                  analysis:
                    type: object
                    properties: {}
                  riskLevel:
                    type: string
                  riskMessage:
                    type: string
        "400":
          description: Invalid parameters or missing required query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal server error during risk analysis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /readyz:
    get:
      tags:
      - "[Admin] System Management"
      summary: Check Tumblebug is ready
      description: Check Tumblebug is ready
      operationId: GetReadyz
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /recommendSpec:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Recommend specs for configuring an infrastructure (filter and priority)
      description: |-
        Recommend specs for configuring an infrastructure (filter and priority)
        Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1234
        Get available options by /recommendSpecOptions for filtering and prioritizing specs in RecommendSpec API
      operationId: RecommendSpec
      requestBody:
        description: Conditions for recommending specs (filter and priority)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.RecommendSpecReq'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/model.SpecInfo'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: recommendSpecReq
  /recommendSpecOptions:
    get:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Get options for RecommendSpec API
      description: Get available options for filtering and prioritizing specs in RecommendSpec
        API
      operationId: RecommendSpecOptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RecommendSpecRequestOptions'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /regionFromCsp:
    get:
      tags:
      - "[Admin] Multi-Cloud Information"
      summary: RetrieveR all region lists from CSPs
      description: RetrieveR all region lists from CSPs
      operationId: RetrieveRegionListFromCsp
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RetrievedRegionList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /registerCspResources:
    post:
      tags:
      - "[Admin] System Management"
      summary: "Register CSP Native Resources (vNet, securityGroup, sshKey, vm) to\
        \ CB-Tumblebug"
      description: |-
        Register CSP Native Resources (vNet, securityGroup, sshKey, vm) to CB-Tumblebug.

        **Behavior based on connectionName:**
        - If `connectionName` is specified: Registers resources from the specified connection only
        - If `connectionName` is empty or omitted: Registers resources from **all available connections**

        **Usage Examples:**
        - Single connection: `{"connectionName": "aws-ap-northeast-2", "nsId": "default", "mciNamePrefix": "mci-01"}`
        - All connections: `{"connectionName": "", "nsId": "default", "mciNamePrefix": "mci-all"}` or `{"nsId": "default", "mciNamePrefix": "mci-all"}`
      operationId: RegisterCspNativeResources
      parameters:
      - name: option
        in: query
        description: Option to specify resourceType
        schema:
          type: string
          enum:
          - onlyVm
          - exceptVm
      - name: mciFlag
        in: query
        description: "Flag to show VMs in a collective MCI form (y,n)"
        schema:
          type: string
          default: "y"
          enum:
          - "y"
          - "n"
      requestBody:
        description: "Specify connectionName (optional for all connections), NS Id,\
          \ and MCI Name Prefix"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/common.RestRegisterCspNativeResourcesRequest'
        required: true
      responses:
        "200":
          description: All connections result (when connectionName is empty)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RegisterResourceAllResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: Request
  /registerCspResources/schedule:
    get:
      tags:
      - "[Job Scheduler] (WIP) CSP Resource Registration"
      summary: List all scheduled CSP resource registration jobs
      description: Get a list of all scheduled CSP resource registration jobs (jobs
        are not scoped to namespaces)
      operationId: GetScheduleRegisterCspResourcesList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ScheduleJobListResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    post:
      tags:
      - "[Job Scheduler] (WIP) CSP Resource Registration"
      summary: Create scheduled CSP resource registration job
      description: |-
        Create a scheduled job to periodically register CSP-native resources (vNet, securityGroup, sshKey, vm) into CB-Tumblebug

        **Resource Registration Behavior:**
        This job registers CSP-native resources based on the `connectionName` field:
        - If `connectionName` is specified: Registers resources from the **specified connection only**
        - If `connectionName` is empty or omitted: Registers resources from **all available connections**

        **Usage Examples:**
        - Single connection: `{"jobType": "registerCspResources", "nsId": "default", "intervalSeconds": 60, "connectionName": "aws-ap-northeast-2", "mciNamePrefix": "mci-01"}`
        - All connections: `{"jobType": "registerCspResources", "nsId": "default", "intervalSeconds": 60, "connectionName": "", "mciNamePrefix": "mci-all"}` or `{"jobType": "registerCspResources", "nsId": "default", "intervalSeconds": 60, "mciNamePrefix": "mci-all"}`

        **Job Status Values:**
        - `Scheduled`: Job is scheduled and waiting for the next execution time
        - `Executing`: Job is currently running the task
        - `Stopped`: Job has been stopped and deleted

        **Job Lifecycle:**
        1. Create job (this API) → Status: `Scheduled`, **executes immediately**
        2. First execution starts → Status: `Executing`
        3. Execution completes → Status: `Scheduled` (waits for interval)
        4. After interval → Status: `Executing` (cycles back to step 3)
        5. Pause job → `enabled: false`, Status: `Scheduled` (no execution)
        6. Resume job → `enabled: true`, Status: `Scheduled` (resumes execution)
        7. Delete job → Status: `Stopped`, job removed permanently

        **Failure Handling:**
        - Tracks `successCount`, `failureCount`, `consecutiveFailures`
        - Auto-disables after 5 consecutive failures (`autoDisabled: true`)
        - Auto-recovers when next execution succeeds

        **Timeout Protection:**
        - Default execution timeout: 30 minutes
        - Jobs exceeding timeout are marked as failed
        - Server restart during execution marks job as interrupted

        **Duplicate Prevention:**
        - System checks for existing jobs with same configuration
        - Configuration uniqueness based on: jobType + nsId + connectionName + mciNamePrefix + option + mciFlag
        - Returns 409 Conflict if duplicate job exists with existing job ID
      operationId: PostScheduleRegisterCspResources
      requestBody:
        description: Schedule job request (nsId must be specified in request body)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ScheduleJobRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ScheduleJobStatus'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "409":
          description: Duplicate job already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: scheduleRequest
    delete:
      tags:
      - "[Job Scheduler] (WIP) CSP Resource Registration"
      summary: Delete ALL scheduled jobs
      description: |-
        ⚠️ **DANGER: This operation deletes ALL scheduled jobs in the system!**

        **⚠️ CRITICAL WARNINGS:**
        - This will PERMANENTLY DELETE **ALL** scheduled jobs across all namespaces
        - All job execution history will be lost
        - This operation is IRREVERSIBLE and cannot be undone
        - Use with EXTREME CAUTION in production environments

        **Use Cases:**
        - Cleaning up test/development environments
        - Emergency shutdown of all scheduled operations
        - System maintenance or reset

        **Safer Alternatives:**
        - Delete individual jobs: Use `DELETE /registerCspResources/schedule/{jobId}`
        - Temporarily stop all jobs: Pause each job individually via `/pause` endpoint
        - Disable without deleting: Update each job with `enabled: false`

        **Response Information:**
        - Returns the count of deleted jobs
        - Returns 200 even if no jobs were found (count will be 0)
      operationId: DeleteScheduleRegisterCspResourcesAll
      responses:
        "200":
          description: Successfully deleted all jobs (message includes count)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /registerCspResources/schedule/{jobId}:
    get:
      tags:
      - "[Job Scheduler] (WIP) CSP Resource Registration"
      summary: Get scheduled job status
      description: |-
        Get the current status of a specific scheduled CSP resource registration job

        **Response Fields Explanation:**
        - `status`: Current job state (Scheduled/Executing/Stopped)
        - `enabled`: Whether job is active (can be paused with false)
        - `executionCount`: Total number of executions attempted
        - `successCount`: Number of successful executions
        - `failureCount`: Number of failed executions
        - `consecutiveFailures`: Current streak of failures (resets on success)
        - `autoDisabled`: True if job was auto-disabled due to 5+ consecutive failures
        - `lastExecutedAt`: Timestamp of most recent execution
        - `nextExecutionAt`: Scheduled time for next execution
        - `lastError`: Error message from most recent failure (empty if success)
        - `lastResult`: Result message from most recent execution

        **Monitoring Recommendations:**
        - Check `consecutiveFailures` - alert if >= 3
        - Monitor `autoDisabled` - requires manual intervention if true
        - Compare `successCount` vs `failureCount` for reliability metrics
      operationId: GetScheduleRegisterCspResourcesStatus
      parameters:
      - name: jobId
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ScheduleJobStatus'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    put:
      tags:
      - "[Job Scheduler] (WIP) CSP Resource Registration"
      summary: Update scheduled job configuration
      description: |-
        Update the configuration of a scheduled CSP resource registration job (interval, enabled status)

        **Updatable Fields:**
        - `intervalSeconds`: Change execution frequency (minimum 10 seconds)
        - `enabled`: Enable (true) or disable (false) the job

        **Usage Examples:**
        - Change interval: `{"intervalSeconds": 30}` (30 seconds)
        - Pause job: `{"enabled": false}`
        - Resume job: `{"enabled": true}`
        - Change both: `{"intervalSeconds": 10, "enabled": true}`

        **Note:** For simpler pause/resume operations, consider using dedicated `/pause` and `/resume` endpoints
      operationId: PutScheduleRegisterCspResources
      parameters:
      - name: jobId
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      requestBody:
        description: Update schedule job request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.UpdateScheduleJobRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ScheduleJobStatus'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: updateRequest
    delete:
      tags:
      - "[Job Scheduler] (WIP) CSP Resource Registration"
      summary: Stop and delete scheduled job
      description: |-
        Stop and permanently delete a scheduled CSP resource registration job

        **Warning:** This operation is irreversible!
        - Job will be stopped immediately
        - All job data and execution history will be deleted
        - Cannot be recovered after deletion

        **Alternatives:**
        - To temporarily stop: Use `/pause` endpoint instead
        - To keep history: Set `enabled: false` via PUT endpoint
      operationId: DeleteScheduleRegisterCspResources
      parameters:
      - name: jobId
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /registerCspResources/schedule/{jobId}/pause:
    put:
      tags:
      - "[Job Scheduler] (WIP) CSP Resource Registration"
      summary: Pause a scheduled job
      description: |-
        Temporarily pause a scheduled job without deleting it. The job can be resumed later.
        This sets enabled=false and preserves all job state and execution history.
      operationId: PutScheduleRegisterCspResourcesPause
      parameters:
      - name: jobId
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ScheduleJobStatus'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /registerCspResources/schedule/{jobId}/resume:
    put:
      tags:
      - "[Job Scheduler] (WIP) CSP Resource Registration"
      summary: Resume a paused scheduled job
      description: |-
        Resume a previously paused scheduled job to continue periodic execution.
        This sets enabled=true and restarts the job scheduler.
      operationId: PutScheduleRegisterCspResourcesResume
      parameters:
      - name: jobId
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ScheduleJobStatus'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /registerCspResourcesAll:
    post:
      tags:
      - "[Admin] System Management"
      summary: "[Deprecated] Register CSP Native Resources from all connections"
      description: |-
        **DEPRECATED**: This endpoint is deprecated. Please use `/registerCspResources` with empty `connectionName` instead.

        This endpoint now redirects to `/registerCspResources` for unified API behavior.

        **Migration Guide:**
        - Old: `POST /registerCspResourcesAll` with `{"nsId": "default", "mciNamePrefix": "mci-all"}`
        - New: `POST /registerCspResources` with `{"connectionName": "", "nsId": "default", "mciNamePrefix": "mci-all"}`
      operationId: RegisterCspNativeResourcesAll
      parameters:
      - name: option
        in: query
        description: Option to specify resourceType
        schema:
          type: string
          enum:
          - onlyVm
          - exceptVm
      - name: mciFlag
        in: query
        description: "Flag to show VMs in a collective MCI form (y,n)"
        schema:
          type: string
          default: "y"
          enum:
          - "y"
          - "n"
      requestBody:
        description: Specify NS Id and MCI Name Prefix
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/common.RestRegisterCspNativeResourcesRequestAll'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RegisterResourceAllResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      deprecated: true
      x-codegen-request-body-name: Request
  /request/{reqId}:
    get:
      tags:
      - "[Admin] API Request Management"
      summary: Get request details
      description: Get details of a specific request
      operationId: GetRequest
      parameters:
      - name: reqId
        in: path
        description: Request ID acquired from X-Request-ID header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.RequestDetails'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
    delete:
      tags:
      - "[Admin] API Request Management"
      summary: Delete a specific request's details
      description: Delete details of a specific request
      operationId: DeleteRequest
      parameters:
      - name: reqId
        in: path
        description: Request ID to delete
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /requests:
    get:
      tags:
      - "[Admin] API Request Management"
      summary: Get all requests
      description: Get details of all requests with optional filters.
      operationId: GetAllRequests
      parameters:
      - name: status
        in: query
        description: "Filter by request status (Handling, Error, Success)"
        schema:
          type: string
          enum:
          - Handling
          - Error
          - Success
      - name: method
        in: query
        description: "Filter by HTTP method (GET, POST, PUT, DELETE, etc.)"
        schema:
          type: string
          enum:
          - GET
          - POST
          - PUT
          - DELETE
      - name: url
        in: query
        description: Filter by request URL
        schema:
          type: string
      - name: time
        in: query
        description: Filter by time in minutes from now (to get recent requests)
        schema:
          type: string
      - name: savefile
        in: query
        description: Option to save the results to a file (set 'true' to activate)
        schema:
          type: string
          default: "false"
          enum:
          - "true"
          - "false"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: '#/components/schemas/client.RequestDetails'
    delete:
      tags:
      - "[Admin] API Request Management"
      summary: Delete all requests' details
      description: Delete details of all requests
      operationId: DeleteAllRequests
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /requiredK8sSubnetCount:
    get:
      tags:
      - "[Kubernetes] Cluster Management"
      summary: Get the required subnet count to create a K8sCluster
      description: Get the required subnet count to create a K8sCluster
      operationId: GetRequiredK8sSubnetCount
      parameters:
      - name: providerName
        in: query
        description: Name of the CSP to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.K8sClusterRequiredSubnetCount'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /resources/{labelType}:
    get:
      tags:
      - "[Infra Resource] Common Utility"
      summary: Get resources by label selector
      description: |-
        Get resources based on a label selector. The label selector supports the following operators:
        - `=` : Selects resources where the label key equals the specified value (e.g., `env=production`).
        - `!=` : Selects resources where the label key does not equal the specified value (e.g., `tier!=frontend`).
        - `in` : Selects resources where the label key is in the specified set of values (e.g., `region in (us-west, us-east)`).
        - `notin` : Selects resources where the label key is not in the specified set of values (e.g., `env notin (production, staging)`).
        - `exists` : Selects resources where the label key exists (e.g., `env exists`).
        - `!exists` : Selects resources where the label key does not exist (e.g., `env !exists`).
      operationId: GetResourcesByLabelSelector
      parameters:
      - name: labelType
        in: path
        description: Label Type
        required: true
        schema:
          type: string
          enum:
          - ns
          - mci
          - subGroup
          - vm
          - k8s
          - vNet
          - subnet
          - vpn
          - securityGroup
          - sshKey
          - dataDisk
          - sqlDb
          - objectStorage
      - name: labelSelector
        in: query
        description: "Label selector query. Example: env=production,tier=backend"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Matched resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label.ResourcesResponse'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /resources/objectStorage:
    get:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: List object storages (buckets)
      description: |-
        Get the list of all object storages (buckets)

        **Important Notes:**
        - The actual response will be XML format with root element `ListAllMyBucketsResult`
        - The response includes xmlns attribute: `xmlns="http://s3.amazonaws.com/doc/2006-03-01/"`
        - Swagger UI may show `resource.ListAllMyBucketsResult` due to rendering limitations

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <Owner>
        <ID>aws-ap-northeast-2</ID>
        <DisplayName>aws-ap-northeast-2</DisplayName>
        </Owner>
        <Buckets>
        </Buckets>
        </ListAllMyBucketsResult>
        ```
      operationId: ListObjectStorages
      parameters:
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/resource.ListAllMyBucketsResult'
  /resources/objectStorage/{objectStorageName}:
    get:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Get details of an object storage (bucket)
      description: |-
        Get details of an object storage (bucket)

        **Important Notes:**
        - The actual response will be XML format with root element `ListBucketResult`

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <ListBucketResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <Name>spider-test-bucket</Name>
        <Prefix></Prefix>
        <Marker></Marker>
        <MaxKeys>1000</MaxKeys>
        <IsTruncated>false</IsTruncated>
        </ListBucketResult>
        ```
      operationId: GetObjectStorage
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/resource.ListBucketResult'
    put:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Create an object storage (bucket)
      description: |-
        Create an object storage (bucket)

        **Important Notes:**
        - The `objectStorageName` must be globally unique across all existing buckets in the S3 compatible storage.
        - The bucket namespace is shared by all users of the system.
      operationId: CreateObjectStorage
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content: {}
    post:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: '**Delete** multiple objects from a bucket'
      description: |-
        `Delete` multiple objects from a bucket

        **Important Notes:**
        - The request body must contain the list of objects to delete in XML format
        - The `delete` query parameter must be set to `true`

        **Request Body Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <Delete xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <Object>
        <Key>test-object1.txt</Key>
        </Object>
        <Object>
        <Key>test-object2.txt</Key>
        </Object>
        </Delete>
        ```

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <DeleteResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <Deleted>
        <Key>test-object1.txt</Key>
        </Deleted>
        <Deleted>
        <Key>test-object2.txt</Key>
        </Deleted>
        </DeleteResult>
        ```
      operationId: DeleteMultipleDataObjects
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: delete
        in: query
        description: Delete
        required: true
        schema:
          type: boolean
          default: true
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      requestBody:
        description: List of objects to delete
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/resource.Delete'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/resource.DeleteResult'
      x-codegen-request-body-name: reqBody
    delete:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Delete an object storage (bucket)
      description: Delete an object storage (bucket)
      operationId: DeleteObjectStorage
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "204":
          description: No Content
          content: {}
    head:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Check existence of an object storage (bucket)
      description: Check existence of an object storage (bucket)
      operationId: ExistObjectStorage
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content: {}
        "404":
          description: Not Found
          content: {}
  /resources/objectStorage/{objectStorageName}/{objectKey}:
    delete:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Delete an object from a bucket
      description: Delete an object from a bucket
      operationId: DeleteDataObject
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: objectKey
        in: path
        description: Object Name
        required: true
        schema:
          type: string
          default: test-object.txt
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "204":
          description: No Content
          content: {}
    head:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Get an object info from a bucket
      description: |-
        Get an object info from a bucket

        **Important Notes:**
        - The generated `Download file` link in Swagger UI may not work because this API get the object metadata only.
      operationId: GetObjectInfoGetDataObjectInfo
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: objectKey
        in: path
        description: Object Name
        required: true
        schema:
          type: string
          default: test-object.txt
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content: {}
  /resources/objectStorage/{objectStorageName}/cors:
    get:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Get CORS configuration of an object storage (bucket)
      description: |-
        Get CORS configuration of an object storage (bucket)

        **Important Notes:**
        - The actual response will be XML format with root element `CORSConfiguration`

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <CORSRule>
        <AllowedOrigin>*</AllowedOrigin>
        <AllowedMethod>GET</AllowedMethod>
        <AllowedMethod>PUT</AllowedMethod>
        <AllowedMethod>POST</AllowedMethod>
        <AllowedMethod>DELETE</AllowedMethod>
        <AllowedHeader>*</AllowedHeader>
        <ExposeHeader>ETag</ExposeHeader>
        <ExposeHeader>x-amz-server-side-encryption</ExposeHeader>
        <ExposeHeader>x-amz-request-id</ExposeHeader>
        <ExposeHeader>x-amz-id-2</ExposeHeader>
        <MaxAgeSeconds>3000</MaxAgeSeconds>
        </CORSRule>
        </CORSConfiguration>
        ```

        **Error Response Example (if CORS not configured):**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <Error>
        <Code>NoSuchCORSConfiguration</Code>
        <Message>The CORS configuration does not exist</Message>
        <Resource>/example-bucket</Resource>
        <RequestId>656c76696e6727732072657175657374</RequestId>
        </Error>
        ```
      operationId: GetObjectStorageCORS
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/resource.CORSConfiguration'
        "404":
          description: Not Found
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/resource.Error'
    put:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Set CORS configuration of an object storage (bucket)
      description: |-
        Set CORS configuration of an object storage (bucket)

        **Important Notes:**
        - The CORS configuration must be provided in the request body in XML format.
        - The actual request body should have root element `CORSConfiguration`

        **Actual XML Request Body Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <CORSConfiguration>
        <CORSRule>
        <AllowedOrigin>https://example.com</AllowedOrigin>
        <AllowedOrigin>https://app.example.com</AllowedOrigin>
        <AllowedMethod>GET</AllowedMethod>
        <AllowedMethod>PUT</AllowedMethod>
        <AllowedHeader>Content-Type</AllowedHeader>
        <AllowedHeader>Authorization</AllowedHeader>
        <ExposeHeader>ETag</ExposeHeader>
        <MaxAgeSeconds>1800</MaxAgeSeconds>
        </CORSRule>
        <CORSRule>
        <AllowedOrigin>*</AllowedOrigin>
        <AllowedMethod>GET</AllowedMethod>
        <MaxAgeSeconds>300</MaxAgeSeconds>
        </CORSRule>
        </CORSConfiguration>
        ```
      operationId: SetObjectStorageCORS
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      requestBody:
        description: CORS Configuration in XML format
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/resource.CORSConfiguration'
        required: true
      responses:
        "200":
          description: OK
          content: {}
      x-codegen-request-body-name: reqBody
    delete:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Delete CORS configuration of an object storage (bucket)
      description: Delete CORS configuration of an object storage (bucket)
      operationId: DeleteObjectStorageCORS
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "204":
          description: No Content
          content: {}
  /resources/objectStorage/{objectStorageName}/location:
    get:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Get the location of an object storage (bucket)
      description: |-
        Get the location of an object storage (bucket)

        **Important Notes:**
        - The actual response will be XML format with root element `LocationConstraint`

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <LocationConstraint xmlns="http://s3.amazonaws.com/doc/2006-03-01/">ap-northeast-2</LocationConstraint>
        ```
      operationId: GetObjectStorageLocation
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/resource.LocationConstraint'
  /resources/objectStorage/{objectStorageName}/versioning:
    get:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Get versioning status of an object storage (bucket)
      description: |-
        Get versioning status of an object storage (bucket)

        **Important Notes:**
        - The actual response will be XML format with root element `VersioningConfiguration`

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <VersioningConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <Status>Enabled</Status>
        </VersioningConfiguration>
        ```
      operationId: GetObjectStorageVersioning
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/resource.VersioningConfiguration'
    put:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Set versioning status of an object storage (bucket)
      description: |-
        Set versioning status of an object storage (bucket)

        **Important Notes:**
        - The request body must be XML format with root element `VersioningConfiguration`
        - The `Status` field can be either `Enabled` or `Suspended`

        **Request Body Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <VersioningConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <Status>Enabled</Status>
        </VersioningConfiguration>
        ```
      operationId: SetObjectStorageVersioning
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      requestBody:
        description: Versioning Configuration
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/resource.VersioningConfiguration'
        required: true
      responses:
        "200":
          description: OK
          content: {}
      x-codegen-request-body-name: reqBody
  /resources/objectStorage/{objectStorageName}/versions:
    get:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: List object versions in an object storage (bucket)
      description: |-
        List object versions in an object storage (bucket)

        **Important Notes:**
        - The actual response will be XML format with root element `ListVersionsResult`

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <ListVersionsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <Name>spider-test-bucket</Name>
        <Prefix></Prefix>
        <KeyMarker></KeyMarker>
        <VersionIdMarker></VersionIdMarker>
        <NextKeyMarker></NextKeyMarker>
        <NextVersionIdMarker></NextVersionIdMarker>
        <MaxKeys>1000</MaxKeys>
        <IsTruncated>false</IsTruncated>
        <Version>
        <Key>test-file.txt</Key>
        <VersionId>yb4PgjnFVD2LfRZHXBjjsHBkQRHlu.TZ</VersionId>
        <IsLatest>true</IsLatest>
        <LastModified>2025-09-04T04:24:12Z</LastModified>
        <ETag>23228a38faecd0591107818c7281cece</ETag>
        <Size>23</Size>
        <StorageClass>STANDARD</StorageClass>
        <Owner>
        <ID>aws-config01</ID>
        <DisplayName>aws-config01</DisplayName>
        </Owner>
        </Version>
        </ListVersionsResult>
        ```
      operationId: ListObjectVersions
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "200":
          description: OK
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/resource.ListVersionsResult'
  /resources/objectStorage/{objectStorageName}/versions/{objectKey}:
    delete:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Delete a specific version of an object in an object storage (bucket)
      description: Delete a specific version of an object in an object storage (bucket)
      operationId: DeleteVersionedObject
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: objectKey
        in: path
        description: Object Key
        required: true
        schema:
          type: string
          default: test-file.txt
      - name: versionId
        in: query
        description: Version ID
        required: true
        schema:
          type: string
          default: yb4PgjnFVD2LfRZHXBjjsHBkQRHlu.TZ
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      responses:
        "204":
          description: No Content
          content: {}
  /resources/objectStorage/presigned/download/{objectStorageName}/{objectKey}:
    get:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Generate a presigned URL for downloading an object from a bucket
      description: |-
        Generate a presigned URL for downloading an object from a bucket

        **Important Notes:**
        - The actual response will be XML format with root element `PresignedURLResult`
        - The `expires` query parameter specifies the expiration time in seconds for the presigned URL (default: 3600 seconds)
        - The generated presigned URL can be used to download the object directly without further authentication

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <PresignedURLResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <PresignedURL>https://globally-unique-bucket-hctdx3.s3.dualstack.ap-southeast-2.amazonaws.com/test-file.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA***EXAMPLE%2F20250904%2Fap-southeast-2%2Fs3%2Faws4_request&X-Amz-Date=20250904T061448Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=***-signature</PresignedURL>
        <Expires>3600</Expires>
        <Method>GET</Method>
        </PresignedURLResult>
        ```
      operationId: GeneratePresignedDownloadURL
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: objectKey
        in: path
        description: Object Name
        required: true
        schema:
          type: string
          default: test-object.txt
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      - name: expires
        in: query
        description: Expiration time in seconds for the presigned URL
        schema:
          type: integer
          default: 3600
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource.PresignedURLResult'
  /resources/objectStorage/presigned/upload/{objectStorageName}/{objectKey}:
    get:
      tags:
      - "[Infra Resource] Object Storage Management"
      summary: Generate a presigned URL for uploading an object to a bucket
      description: |-
        Generate a presigned URL for uploading an object to a bucket

        **Important Notes:**
        - The actual response will be XML format with root element `PresignedURLResult`
        - The `expires` query parameter specifies the expiration time in seconds for the presigned URL (default: 3600 seconds)
        - The generated presigned URL can be used to upload the object directly without further authentication

        **Actual XML Response Example:**
        ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <PresignedURLResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        <PresignedURL>https://globally-unique-bucket-hctdx3.s3.dualstack.ap-southeast-2.amazonaws.com/test-file.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA***EXAMPLE%2F20250904%2Fap-southeast-2%2Fs3%2Faws4_request&X-Amz-Date=20250904T061448Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=***-signature</PresignedURL>
        <Expires>3600</Expires>
        <Method>PUT</Method>
        </PresignedURLResult>
        ```
      operationId: GeneratePresignedUploadURL
      parameters:
      - name: objectStorageName
        in: path
        description: Object Storage Name
        required: true
        schema:
          type: string
          default: globally-unique-bucket-hctdx3
      - name: objectKey
        in: path
        description: Object Name
        required: true
        schema:
          type: string
          default: test-object.txt
      - name: credential
        in: header
        description: "This represents a credential or an access key ID. The required\
          \ format is `{csp-region}` (i.e., the connection name)."
        required: true
        schema:
          type: string
          default: aws-ap-northeast-2
      - name: expires
        in: query
        description: Expiration time in seconds for the presigned URL
        schema:
          type: integer
          default: 3600
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource.PresignedURLResult'
  /systemMci:
    post:
      tags:
      - "[MC-Infra] MCI Provisioning and Management"
      summary: Create System MCI for CB-Tumblebug Internal Operations
      description: |-
        Create specialized MCI instances for CB-Tumblebug system operations and infrastructure probing.
        This endpoint provisions system-level infrastructure that supports CB-Tumblebug's internal functions:

        **System MCI Types:**
        - `probe`: Creates lightweight VMs for network connectivity testing and CSP capability discovery
        - `monitor`: Deploys monitoring infrastructure for system health and performance tracking
        - `test`: Provisions test environments for validating CSP integrations and features

        **Probe MCI Features:**
        - **Connectivity Testing**: Validates network paths between different CSP regions
        - **Latency Measurement**: Measures inter-region and inter-provider network performance
        - **Feature Discovery**: Tests CSP-specific capabilities and service availability
        - **Resource Validation**: Verifies that CB-Tumblebug can successfully provision resources

        **System Namespace:**
        - All system MCIs are created in the special `system` namespace
        - Isolated from user workloads and regular MCI operations
        - Managed automatically by CB-Tumblebug internal processes
        - May be used for background maintenance and monitoring tasks

        **Automatic Configuration:**
        - Uses optimized VM specifications for system tasks (typically minimal resources)
        - Automatically selects appropriate regions and providers based on probe requirements
        - Configures necessary network access and security policies
        - Deploys with minimal attack surface and security hardening

        **Lifecycle Management:**
        - System MCIs may be automatically created, updated, or destroyed by CB-Tumblebug
        - Typically short-lived for specific system tasks
        - Resource cleanup is handled automatically
        - Status and results are logged for system administrators

        **Use Cases:**
        - Infrastructure health checks and validation
        - Performance benchmarking across cloud providers
        - Automated testing of new CSP integrations
        - Network topology discovery and optimization
      operationId: PostSystemMci
      parameters:
      - name: option
        in: query
        description: "System MCI type: 'probe' for connectivity testing, 'monitor'\
          \ for system monitoring"
        schema:
          type: string
          enum:
          - probe
          - monitor
          - test
      requestBody:
        description: "Optional MCI configuration. If not provided, system defaults\
          \ will be used"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.MciDynamicReq'
        required: false
      responses:
        "200":
          description: Created system MCI with specialized configuration and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.MciInfo'
        "400":
          description: Invalid system option or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "403":
          description: Insufficient permissions for system MCI creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: System MCI creation failed or CSP integration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: mciReq
  /testStreamResponse:
    post:
      tags:
      - "[Test] Stream Response"
      summary: Stream response of a number decrement
      description: Receives a number and streams the decrementing number every second
        until zero
      operationId: PostTestStreamResponse
      requestBody:
        description: Number input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/common.NumberRequest'
        required: true
      responses:
        "200":
          description: currentNumber
          content:
            application/x-json-stream:
              schema:
                type: object
                additionalProperties:
                  type: integer
        "400":
          description: Invalid input
          content:
            application/x-json-stream:
              schema:
                type: object
                additionalProperties:
                  type: string
        "500":
          description: Stream failed
          content:
            application/x-json-stream:
              schema:
                type: object
                additionalProperties:
                  type: string
      x-codegen-request-body-name: number
  /tumblebug/provisioning/risk/detailed:
    get:
      tags:
      - "[Admin] Provisioning History and Analytics"
      summary: Analyze Detailed Provisioning Risk with Spec and Image Breakdown
      description: |-
        Provides comprehensive risk analysis with separate assessments for VM specification and image risks, plus actionable recommendations.
        This endpoint offers enhanced risk analysis by separating spec-level and image-level risk factors:

        **Risk Analysis Breakdown:**
        - **Spec Risk**: Analyzes whether the VM specification itself has compatibility or resource issues
        - **Image Risk**: Evaluates the track record of the specific image with this spec
        - **Overall Risk**: Combines both factors to determine the primary risk source
        - **Recommendations**: Provides actionable guidance based on risk analysis

        **Spec Risk Factors:**
        - Number of different images that failed with this spec (indicates spec-level issues)
        - Overall failure rate across all images
        - Success/failure ratio with various images

        **Image Risk Factors:**
        - Previous success/failure history of this specific image with this spec
        - Whether this is a new, untested combination

        **Recommendation Types:**
        - Change VM specification (when spec is the primary risk factor)
        - Try different image (when image is the primary risk factor)
        - Monitor deployment closely (for new combinations or medium risk)
        - Proceed with confidence (for low-risk combinations)
      operationId: AnalyzeProvisioningRiskDetailed
      parameters:
      - name: specId
        in: query
        description: "VM specification ID (e.g., 'gcp+europe-north1+f1-micro')"
        required: true
        schema:
          type: string
      - name: cspImageName
        in: query
        description: "CSP-specific image name (e.g., 'ami-0c02fb55956c7d316' for AWS)"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "Detailed risk analysis with spec, image, and overall risk\
            \ assessments plus recommendations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RiskAnalysis'
        "400":
          description: Bad Request - Missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /updateImagesFromAsset:
    post:
      tags:
      - "[Infra Resource] Image Management"
      summary: Update images from cloudimage.csv asset file
      description: Update image information based on the cloudimage.csv asset file
      operationId: UpdateImagesFromAsset
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource.FetchImagesAsyncResult'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
  /util/net/design:
    post:
      tags:
      - "[Infra Resource] Network Management"
      summary: Design a multi-cloud network configuration
      description: Design a hierarchical network configuration of a VPC network or
        multi-cloud network consisting of multiple VPC networks
      operationId: PostUtilToDesignNetwork
      requestBody:
        description: A root/main network CIDR block and subnetting rules
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/netutil.RestPostUtilToDesignNetworkRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/netutil.RestPostUtilToDesignNetworkReponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: subnettingReq
  /util/net/validate:
    post:
      tags:
      - "[Infra Resource] Network Management"
      summary: Validate a multi-cloud network configuration
      description: Validate a hierarchical configuration of a VPC network or multi-cloud
        network consisting of multiple VPC networks
      operationId: PostUtilToValidateNetwork
      requestBody:
        description: A hierarchical network configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/netutil.RestPostUtilToValidateNetworkRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: subnettingReq
  /util/vNet/design:
    post:
      tags:
      - "[Infra Resource] Network Management"
      summary: Design VNet and subnets based on user-friendly properties
      description: Design VNet and subnets based on user-friendly properties
      operationId: PostUtilToDesignVNet
      requestBody:
        description: User-friendly properties to design VNet and subnets
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/netutil.RestPostUtilToDesignVNetRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/netutil.RestPostUtilToDesignVNetReponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SimpleMsg'
      x-codegen-request-body-name: vNetDesignReq
components:
  schemas:
    auth.AuthsInfo:
      type: object
      properties:
        authenticated:
          type: boolean
        expired-time:
          type: string
        name:
          type: string
        role:
          type: string
        token:
          type: string
    client.RequestDetails:
      type: object
      properties:
        endTime:
          type: string
          description: The time when the request was fully processed.
        errorResponse:
          type: string
          description: A message describing any error that occurred during request
            processing.
        requestInfo:
          type: object
          description: Extracted information about the request.
          allOf:
          - $ref: '#/components/schemas/client.RequestInfo'
        responseData:
          type: object
          description: The data sent back in response to the request.
        startTime:
          type: string
          description: The time when the request was received by the server.
        status:
          type: string
          description: "The current status of the request (e.g., \"Handling\", \"\
            Error\", \"Success\")."
    client.RequestInfo:
      type: object
      properties:
        body:
          type: object
          description: "Optional: request body"
        header:
          type: object
          additionalProperties:
            type: string
          description: Key-value pairs of the request headers.
        method:
          type: string
          description: "HTTP method (GET, POST, etc.), indicating the request's action\
            \ type."
        url:
          type: string
          description: The URL the request is made to.
    common.JSONResult:
      type: object
    common.NumberRequest:
      type: object
      properties:
        number:
          type: integer
          example: 100
    common.RestGetAllConfigResponse:
      type: object
      properties:
        config:
          type: array
          description: Name string     `json:"name"`
          items:
            $ref: '#/components/schemas/model.ConfigInfo'
    common.RestGetAllNsResponse:
      type: object
      properties:
        ns:
          type: array
          description: Name string     `json:"name"`
          items:
            $ref: '#/components/schemas/model.NsInfo'
    common.RestRegisterCspNativeResourcesRequest:
      type: object
      properties:
        connectionName:
          type: string
          description: "Optional: if empty or omitted, registers resources from all\
            \ connections"
          example: aws-ap-southeast-1
        mciNamePrefix:
          type: string
          example: csp
        nsId:
          type: string
          example: default
    common.RestRegisterCspNativeResourcesRequestAll:
      type: object
      properties:
        mciNamePrefix:
          type: string
          example: csp
        nsId:
          type: string
          example: default
    common.TbConnectionName:
      type: object
      properties:
        connectionName:
          type: string
    infra.JSONResult:
      type: object
    infra.RestGetAllBenchmarkRequest:
      type: object
      properties:
        host:
          type: string
    infra.RestGetAllMciPolicyResponse:
      type: object
      properties:
        mciPolicy:
          type: array
          items:
            $ref: '#/components/schemas/model.MciPolicyInfo'
    infra.RestGetAllMciResponse:
      type: object
      properties:
        mci:
          type: array
          items:
            $ref: '#/components/schemas/model.MciInfo'
    infra.RestGetAllMciStatusResponse:
      type: object
      properties:
        mci:
          type: array
          items:
            $ref: '#/components/schemas/model.MciStatusInfo'
    infra.RestGetAllNLBResponse:
      type: object
      properties:
        nlb:
          type: array
          items:
            $ref: '#/components/schemas/model.NLBInfo'
    infra.RestGetBenchmarkRequest:
      type: object
      properties:
        host:
          type: string
    label.ResourcesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
    model.AgentInstallContent:
      type: object
      properties:
        mciId:
          type: string
        result:
          type: string
        vmId:
          type: string
        vmIp:
          type: string
    model.AgentInstallContentWrapper:
      type: object
      properties:
        resultArray:
          type: array
          items:
            $ref: '#/components/schemas/model.AgentInstallContent'
    model.AlibabaSpecificProperty:
      type: object
      properties:
        bgpAsn:
          type: string
          example: "65532"
          default: "65532"
    model.AttachDetachDataDiskReq:
      required:
      - dataDiskId
      type: object
      properties:
        dataDiskId:
          type: string
    model.AutoAction:
      type: object
      properties:
        actionType:
          type: string
          example: ScaleOut
          enum:
          - ScaleOut
          - ScaleIn
        placementAlgo:
          type: string
          example: random
        postCommand:
          type: object
          description: PostCommand is field for providing command to VMs after its
            creation. example:"wget https://raw.githubusercontent.com/cloud-barista/cb-tumblebug/main/scripts/setweb.sh
            -O ~/setweb.sh; chmod +x ~/setweb.sh; sudo ~/setweb.sh"
          allOf:
          - $ref: '#/components/schemas/model.MciCmdReq'
        subGroupDynamicReq:
          $ref: '#/components/schemas/model.CreateSubGroupDynamicReq'
    model.AutoCondition:
      type: object
      properties:
        evaluationPeriod:
          type: string
          example: "10"
        evaluationValue:
          type: array
          items:
            type: string
        metric:
          type: string
          example: cpu
        operand:
          type: string
          example: "80"
        operator:
          type: string
          example: '>='
          enum:
          - <
          - <=
          - '>'
          - '>='
    model.AwsSpecificProperty:
      type: object
      properties:
        bgpAsn:
          type: string
          example: "64512"
          default: "64512"
    model.AzureSpecificProperty:
      type: object
      properties:
        bgpAsn:
          type: string
          example: "65531"
          default: "65531"
        gatewaySubnetCidr:
          type: string
          example: xxx.xxx.xxx.xxx/xx
        vpnSku:
          type: string
          example: VpnGw1AZ
          default: VpnGw1AZ
    model.BastionNode:
      type: object
      properties:
        mciId:
          type: string
        vmId:
          type: string
    model.BenchmarkInfo:
      type: object
      properties:
        desc:
          type: string
        elapsed:
          type: string
        regionName:
          type: string
        result:
          type: string
        resultarray:
          type: array
          description: struct-element cycle ?
          items:
            $ref: '#/components/schemas/model.BenchmarkInfo'
        specid:
          type: string
        unit:
          type: string
    model.BenchmarkInfoArray:
      type: object
      properties:
        resultarray:
          type: array
          items:
            $ref: '#/components/schemas/model.BenchmarkInfo'
    model.BuildAgnosticImageReq:
      required:
      - snapshotReq
      - sourceMciReq
      type: object
      properties:
        cleanupMciAfterSnapshot:
          type: boolean
          description: Whether to cleanup (terminate) MCI after snapshot creation
          example: true
          default: true
        snapshotReq:
          type: object
          description: Snapshot configuration for creating custom images
          allOf:
          - $ref: '#/components/schemas/model.SnapshotReq'
        sourceMciReq:
          type: object
          description: MCI configuration for creating the infrastructure
          allOf:
          - $ref: '#/components/schemas/model.MciDynamicReq'
    model.BuildAgnosticImageResult:
      type: object
      properties:
        mciCleanedUp:
          type: boolean
          example: true
        mciId:
          type: string
          description: MCI information
          example: mci01
        mciStatus:
          type: string
          example: Running
        message:
          type: string
          example: Successfully created 3 custom images from MCI
        namespace:
          type: string
          example: default
        snapshotResult:
          type: object
          description: Snapshot results
          allOf:
          - $ref: '#/components/schemas/model.MciSnapshotResult'
        totalDuration:
          type: string
          description: Overall summary
          example: 15m30s
    model.CSPDetail:
      type: object
      properties:
        description:
          type: string
        driver:
          type: string
        links:
          type: array
          items:
            type: string
        regions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/model.RegionDetail'
    model.ChangeK8sNodeGroupAutoscaleSizeReq:
      type: object
      properties:
        desiredNodeSize:
          type: string
          example: "1"
        maxNodeSize:
          type: string
          example: "3"
        minNodeSize:
          type: string
          example: "1"
    model.ChangeK8sNodeGroupAutoscaleSizeRes:
      type: object
      properties:
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        desiredNodeSize:
          type: integer
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        imageId:
          type: string
        k8sNodes:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sNodeInfo'
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        maxNodeSize:
          type: integer
        minNodeSize:
          type: integer
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        onAutoScaling:
          type: boolean
        rootDiskSize:
          type: string
        rootDiskType:
          type: string
        specId:
          type: string
        spiderViewK8sNodeGroupDetail:
          $ref: '#/components/schemas/model.SpiderNodeGroupInfo'
        sshKeyId:
          type: string
        status:
          type: object
          description: "Creating, Active, Inactive, Updating, Deleting"
          example: Active
          allOf:
          - $ref: '#/components/schemas/model.K8sNodeGroupStatus'
    model.CheckK8sClusterDynamicReqInfo:
      required:
      - reqCheck
      type: object
      properties:
        reqCheck:
          type: array
          items:
            $ref: '#/components/schemas/model.CheckNodeDynamicReqInfo'
    model.CheckMciDynamicReqInfo:
      required:
      - reqCheck
      type: object
      properties:
        reqCheck:
          type: array
          items:
            $ref: '#/components/schemas/model.CheckSubGroupDynamicReqInfo'
    model.CheckNodeDynamicReqInfo:
      type: object
      properties:
        connectionConfigCandidates:
          type: array
          description: ConnectionConfigCandidates will provide ConnectionConfig options
          items:
            type: string
        image:
          type: array
          items:
            $ref: '#/components/schemas/model.ImageInfo'
        region:
          $ref: '#/components/schemas/model.RegionDetail'
        spec:
          $ref: '#/components/schemas/model.SpecInfo'
        systemMessage:
          type: string
          description: Latest system message such as error message
          example: Failed because ...
    model.CheckSubGroupDynamicReqInfo:
      type: object
      properties:
        connectionConfigCandidates:
          type: array
          description: ConnectionConfigCandidates will provide ConnectionConfig options
          items:
            type: string
        image:
          type: array
          items:
            $ref: '#/components/schemas/model.ImageInfo'
        region:
          $ref: '#/components/schemas/model.RegionDetail'
        spec:
          $ref: '#/components/schemas/model.SpecInfo'
        systemMessage:
          type: string
          description: Latest system message such as error message
          example: Failed because ...
    model.CloudInfo:
      type: object
      properties:
        csps:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/model.CSPDetail'
    model.CommandExecutionStatus:
      type: string
      enum:
      - Queued
      - Handling
      - Completed
      - Failed
      - Timeout
      x-enum-varnames:
      - CommandStatusQueued
      - CommandStatusHandling
      - CommandStatusCompleted
      - CommandStatusFailed
      - CommandStatusTimeout
    model.CommandStatusInfo:
      type: object
      properties:
        commandExecuted:
          type: string
          description: CommandExecuted is the actual SSH command executed on the VM
            (may be adjusted)
          example: ls -la
        commandRequested:
          type: string
          description: CommandRequested is the original command as requested by the
            user
          example: ls -la
        completedTime:
          type: string
          description: CompletedTime is when the command execution completed (success
            or failure)
          example: 2024-01-15 10:30:05
        elapsedTime:
          type: integer
          description: ElapsedTime is the duration of command execution in milliseconds
          example: 5000
        errorMessage:
          type: string
          description: ErrorMessage contains error details if the execution failed
          example: SSH connection failed
        index:
          type: integer
          description: "Index is sequential identifier for this command execution\
            \ (1, 2, 3, ...)"
          example: 1
        resultSummary:
          type: string
          description: ResultSummary provides a brief summary of the execution result
          example: Command executed successfully
        startedTime:
          type: string
          description: StartedTime is when the command execution started
          example: 2024-01-15 10:30:00
        status:
          type: object
          description: Status represents the current status of the command execution
          example: Completed
          allOf:
          - $ref: '#/components/schemas/model.CommandExecutionStatus'
        stderr:
          type: string
          description: Stderr contains the standard error from command execution (truncated
            for history)
          example: ""
        stdout:
          type: string
          description: Stdout contains the standard output from command execution
            (truncated for history)
          example: |-
            total 8
            drwxr-xr-x 2 user user 4096 Jan 15 10:30 .
        xRequestId:
          type: string
          description: XRequestId is the request ID from X-Request-ID header when
            the command was executed
          example: req-12345678-abcd-1234-efgh-123456789012
    model.CommandStatusListResponse:
      type: object
      properties:
        commands:
          type: array
          description: Commands is the list of command status info matching the filter
            criteria
          items:
            $ref: '#/components/schemas/model.CommandStatusInfo'
        limit:
          type: integer
          description: Limit is the limit applied to the query
          example: 50
        offset:
          type: integer
          description: Offset is the offset applied to the query
          example: 0
        total:
          type: integer
          description: Total is the total number of commands matching the criteria
            (before limit/offset)
          example: 25
    model.ConfigInfo:
      type: object
      properties:
        id:
          type: string
          example: TB_SPIDER_REST_URL
        name:
          type: string
          example: TB_SPIDER_REST_URL
        value:
          type: string
          example: http://localhost:1024/spider
    model.ConfigReq:
      type: object
      properties:
        name:
          type: string
          example: TB_SPIDER_REST_URL
        value:
          type: string
          example: http://localhost:1024/spider
    model.ConnConfig:
      type: object
      properties:
        configName:
          type: string
        credentialHolder:
          type: string
        credentialName:
          type: string
        driverName:
          type: string
        providerName:
          type: string
        regionDetail:
          $ref: '#/components/schemas/model.RegionDetail'
        regionRepresentative:
          type: boolean
        regionZoneInfo:
          $ref: '#/components/schemas/model.RegionZoneInfo'
        regionZoneInfoName:
          type: string
        verified:
          type: boolean
    model.ConnConfigList:
      type: object
      properties:
        connectionconfig:
          type: array
          items:
            $ref: '#/components/schemas/model.ConnConfig'
    model.CreateSubGroupDynamicReq:
      required:
      - imageId
      - specId
      type: object
      properties:
        connectionName:
          type: string
          description: |-
            if ConnectionName is given, the VM tries to use associtated credential.
            if not, it will use predefined ConnectionName in Spec objects
          example: aws-ap-northeast-2
        description:
          type: string
          example: Created via CB-Tumblebug
        imageId:
          type: string
          description: ImageId is field for id of a image in common namespace
          example: ami-01f71f215b23ba262
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
          example:
            '"env"': "\"test\"}"
            '{"role"': '"worker"'
        name:
          type: string
          description: "SubGroup name, actual VM name will be generated with -N postfix."
          example: g1
        rootDiskSize:
          type: string
          description: "\"default\", Integer (GB): [\"50\", ..., \"1000\"]"
          example: "50"
          default: default
        rootDiskType:
          type: string
          description: "\"\", \"default\", \"TYPE1\", AWS: [\"standard\", \"gp2\"\
            , \"gp3\"], Azure: [\"PremiumSSD\", \"StandardSSD\", \"StandardHDD\"],\
            \ GCP: [\"pd-standard\", \"pd-balanced\", \"pd-ssd\", \"pd-extreme\"],\
            \ ALIBABA: [\"cloud_efficiency\", \"cloud\", \"cloud_essd\"], TENCENT:\
            \ [\"CLOUD_PREMIUM\", \"CLOUD_SSD\"]"
          example: gp3
          default: default
        specId:
          type: string
          description: SpecId is field for id of a spec in common namespace
          example: aws+ap-northeast-2+t3.nano
        subGroupSize:
          type: string
          description: "if subGroupSize is (not empty) && (> 0), subGroup will be\
            \ generated. VMs will be created accordingly."
          example: "3"
          default: "1"
        vmUserPassword:
          type: string
          example: ""
    model.CreateSubGroupReq:
      required:
      - connectionName
      - imageId
      - name
      - securityGroupIds
      - specId
      - sshKeyId
      - subnetId
      - vNetId
      type: object
      properties:
        connectionName:
          type: string
          example: testcloud01-seoul
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP (required
            for option=register)
          example: i-014fa6ede6ada0b2c
        dataDiskIds:
          type: array
          items:
            type: string
        description:
          type: string
          example: Description
        imageId:
          type: string
          description: ImageType        string   `json:"imageType"`
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        name:
          type: string
          description: SubGroup name of VMs. Actual VM name will be generated with
            -N postfix.
          example: g1-1
        rootDiskSize:
          type: string
          description: "\"default\", Integer (GB): [\"50\", ..., \"1000\"]"
          example: "default, 30, 42, ..."
        rootDiskType:
          type: string
          description: "\"\", \"default\", \"TYPE1\", AWS: [\"standard\", \"gp2\"\
            , \"gp3\"], Azure: [\"PremiumSSD\", \"StandardSSD\", \"StandardHDD\"],\
            \ GCP: [\"pd-standard\", \"pd-balanced\", \"pd-ssd\", \"pd-extreme\"],\
            \ ALIBABA: [\"cloud_efficiency\", \"cloud\", \"cloud_ssd\"], TENCENT:\
            \ [\"CLOUD_PREMIUM\", \"CLOUD_SSD\"]"
          example: "default, TYPE1, ..."
        securityGroupIds:
          type: array
          items:
            type: string
        specId:
          type: string
        sshKeyId:
          type: string
        subGroupSize:
          type: string
          description: "if subGroupSize is (not empty) && (> 0), subGroup will be\
            \ generated. VMs will be created accordingly."
          example: "3"
        subnetId:
          type: string
        vNetId:
          type: string
        vmUserName:
          type: string
        vmUserPassword:
          type: string
    model.CredentialInfo:
      type: object
      properties:
        allConnections:
          $ref: '#/components/schemas/model.ConnConfigList'
        credentialHolder:
          type: string
        credentialName:
          type: string
        keyValueInfoList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        providerName:
          type: string
    model.CredentialReq:
      type: object
      properties:
        credentialHolder:
          type: string
          description: CredentialHolder is the entity or user that holds the credential.
          example: admin
        credentialKeyValueList:
          type: array
          description: CredentialKeyValueList contains key-(encrypted)value pairs
            that include the sensitive credential data.
          items:
            $ref: '#/components/schemas/model.KeyWithEncryptedValue'
        encryptedClientAesKeyByPublicKey:
          type: string
          description: EncryptedClientAesKeyByPublicKey is the client temporary AES
            key encrypted with the RSA public key.
          example: ZzXL27hbAUDT0ohglf2Gwr60sAqdPw3+CnCsn0RJXeiZxXnHfW03mFx5RaSfbwtPYCq1h6wwv7XsiWzfFmr02...
        providerName:
          type: string
          description: "ProviderName specifies the cloud provider associated with\
            \ the credential (e.g., AWS, GCP)."
          example: aws
        publicKeyTokenId:
          type: string
          description: PublicKeyTokenId is the unique token ID used to retrieve the
            corresponding private key for decryption.
          example: cr31av30uphc738d7h0g
      description: "CredentialReq contains the necessary information to register a\
        \ credential. This includes the AES key encrypted with the RSA public key,\
        \ which is then used to decrypt the AES key on the server side."
    model.CspSpecificProperty:
      type: object
      properties:
        alibaba:
          $ref: '#/components/schemas/model.AlibabaSpecificProperty'
        aws:
          $ref: '#/components/schemas/model.AwsSpecificProperty'
        azure:
          $ref: '#/components/schemas/model.AzureSpecificProperty'
        gcp:
          $ref: '#/components/schemas/model.GcpSpecificProperty'
    model.CustomImageReq:
      required:
      - name
      type: object
      properties:
        connectionName:
          type: string
        cspResourceId:
          type: string
          description: This field is for 'Register existing custom image'
        description:
          type: string
        name:
          type: string
        sourceVmId:
          type: string
    model.DataDiskInfo:
      type: object
      properties:
        associatedObjectList:
          type: array
          example:
          - /ns/default/mci/mci01/vm/aws-ap-southeast-1-1
          items:
            type: string
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
          example: aws-ap-southeast-1
        createdTime:
          type: string
          example: 2022-10-12T05:09:51.05Z
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        description:
          type: string
          example: Available
        diskSize:
          type: string
          example: "77"
        diskType:
          type: string
          example: standard
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        isAutoGenerated:
          type: boolean
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        status:
          type: object
          description: "Available, Unavailable, Attached, ..."
          example: Available
          allOf:
          - $ref: '#/components/schemas/model.DiskStatus'
        systemLabel:
          type: string
          description: SystemLabel is for describing the Resource in a keyword (any
            string can be used) for special System purpose
          example: Managed by CB-Tumblebug
        systemMessage:
          type: string
          description: Latest system message such as error message
          example: Failed because ...
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
    model.DataDiskReq:
      required:
      - connectionName
      - diskSize
      - name
      type: object
      properties:
        connectionName:
          type: string
          example: aws-ap-southeast-1
        cspResourceId:
          type: string
          description: |-
            Fields for "Register existing dataDisk" feature
            CspResourceId is required to register object from CSP (option=register)
        description:
          type: string
        diskSize:
          type: string
          example: "77"
          default: "100"
        diskType:
          type: string
          example: default
        name:
          type: string
          example: aws-ap-southeast-1-datadisk
    model.DataDiskUpsizeReq:
      required:
      - diskSize
      type: object
      properties:
        description:
          type: string
        diskSize:
          type: string
    model.DataDiskVmReq:
      required:
      - diskSize
      - name
      type: object
      properties:
        description:
          type: string
        diskSize:
          type: string
          example: "77"
          default: "100"
        diskType:
          type: string
          example: default
        name:
          type: string
          example: aws-ap-southeast-1-datadisk
    model.DiskStatus:
      type: string
      enum:
      - Creating
      - Available
      - Attached
      - Deleting
      - Error
      x-enum-varnames:
      - DiskCreating
      - DiskAvailable
      - DiskAttached
      - DiskDeleting
      - DiskError
    model.FilterAvailableValues:
      type: object
      properties:
        acceleratorModel:
          type: array
          description: Accelerator information
          items:
            type: string
        acceleratorType:
          type: array
          items:
            type: string
        architecture:
          type: array
          items:
            type: string
        connectionName:
          type: array
          items:
            type: string
        cspSpecName:
          type: array
          items:
            type: string
        description:
          type: array
          description: Additional fields
          items:
            type: string
        evaluationStatus:
          type: array
          items:
            type: string
        id:
          type: array
          description: Basic identification fields
          items:
            type: string
        infraType:
          type: array
          description: Infrastructure specifications
          items:
            type: string
        name:
          type: array
          items:
            type: string
        osType:
          type: array
          items:
            type: string
        providerName:
          type: array
          description: Provider and region information
          items:
            type: string
        regionName:
          type: array
          items:
            type: string
    model.FilterCondition:
      type: object
      properties:
        condition:
          type: array
          items:
            $ref: '#/components/schemas/model.Operation'
        metric:
          type: string
          example: vCPU
          enum:
          - vCPU
          - memoryGiB
          - costPerHour
    model.FilterConditionExample:
      type: object
      properties:
        condition:
          type: array
          items:
            $ref: '#/components/schemas/model.OperationExample'
        description:
          type: string
          example: Filter specs with 2-8 vCPUs
        metric:
          type: string
          example: vCPU
    model.FilterInfo:
      type: object
      properties:
        policy:
          type: array
          items:
            $ref: '#/components/schemas/model.FilterCondition'
    model.FilterOptionsInfo:
      type: object
      properties:
        availableMetrics:
          type: array
          description: Available metrics for filtering
          example:
          - vCPU
          - memoryGiB
          - costPerHour
          - providerName
          - regionName
          - architecture
          items:
            type: string
        availableValues:
          type: object
          description: Available values for each metric (for select fields)
          allOf:
          - $ref: '#/components/schemas/model.FilterAvailableValues'
        examplePolicies:
          type: array
          description: Example filter policies
          items:
            $ref: '#/components/schemas/model.FilterConditionExample'
        limitExamples:
          type: array
          description: Example limit values for performance optimization
          example:
          - "0"
          - "50"
          - "100"
          - "200"
          - "500"
          items:
            type: string
    model.FilterSpecsByRangeRequest:
      type: object
      properties:
        acceleratorCount:
          $ref: '#/components/schemas/model.Range'
        acceleratorMemoryGB:
          $ref: '#/components/schemas/model.Range'
        acceleratorModel:
          type: string
        acceleratorType:
          type: string
        architecture:
          type: string
        connectionName:
          type: string
        costPerHour:
          $ref: '#/components/schemas/model.Range'
        cspSpecName:
          type: string
        description:
          type: string
        diskSizeGB:
          $ref: '#/components/schemas/model.Range'
        evaluationScore01:
          $ref: '#/components/schemas/model.Range'
        evaluationScore02:
          $ref: '#/components/schemas/model.Range'
        evaluationScore03:
          $ref: '#/components/schemas/model.Range'
        evaluationScore04:
          $ref: '#/components/schemas/model.Range'
        evaluationScore05:
          $ref: '#/components/schemas/model.Range'
        evaluationScore06:
          $ref: '#/components/schemas/model.Range'
        evaluationScore07:
          $ref: '#/components/schemas/model.Range'
        evaluationScore08:
          $ref: '#/components/schemas/model.Range'
        evaluationScore09:
          $ref: '#/components/schemas/model.Range'
        evaluationScore10:
          $ref: '#/components/schemas/model.Range'
        evaluationStatus:
          type: string
        id:
          type: string
        infraType:
          type: string
        limit:
          type: integer
          example: 0
        maxTotalStorageTiB:
          $ref: '#/components/schemas/model.Range'
        memoryGiB:
          $ref: '#/components/schemas/model.Range'
        name:
          type: string
        netBwGbps:
          $ref: '#/components/schemas/model.Range'
        osType:
          type: string
        providerName:
          type: string
        regionLatitude:
          type: number
        regionLongitude:
          type: number
        regionName:
          type: string
        vCPU:
          $ref: '#/components/schemas/model.Range'
    model.FirewallRuleInfo:
      required:
      - Direction
      - Protocol
      type: object
      properties:
        CIDR:
          type: string
          description: "CIDR is the allowed IP range (e.g. 0.0.0.0/0, 10.0.0/8)"
          example: 0.0.0.0/0
        Direction:
          type: string
          description: Direction is the direction of the rule (inbound or outbound)
          example: inbound
          enum:
          - inbound
          - outbound
        Port:
          type: string
          description: Port is the single port (e.g. "22") or port range (e.g. "1-65535")
            for the rule
          example: 1-65535
        Protocol:
          type: string
          description: "Protocol is the protocol type for the rule (TCP, UDP, ICMP,\
            \ ALL)"
          example: TCP
          enum:
          - TCP
          - UDP
          - ICMP
          - ALL
    model.FirewallRuleReq:
      required:
      - Direction
      - Protocol
      type: object
      properties:
        CIDR:
          type: string
          description: "CIDR is the allowed IP range (e.g. 0.0.0.0/0, 10.0.0/8)"
          example: 0.0.0.0/0
        Direction:
          type: string
          description: Direction is the direction of the rule (inbound or outbound)
          example: inbound
          enum:
          - inbound
          - outbound
        Ports:
          type: string
          description: |-
            Ports is to get multiple ports or port ranges as a string (e.g. "22,900-1000,2000-3000")
            This allows flexibility in specifying single ports or ranges in a comma-separated format.
            This field is used to handle both single ports and port ranges in a unified way.
            It can accept a single port (e.g. "22"), a range (e.g. "900-1000"), or multiple ports/ranges (e.g. "22,900-1000,2000-3000").
          example: "22,900-1000,2000-3000"
        Protocol:
          type: string
          description: "Protocol is the protocol type for the rule (TCP, UDP, ICMP).\
            \ Don't use ALL here."
          example: TCP
          enum:
          - TCP
          - UDP
          - ICMP
    model.GcpSpecificProperty:
      type: object
      properties:
        bgpAsn:
          type: string
          example: "65530"
          default: "65530"
    model.GetAvailableRegionZonesListRequest:
      required:
      - cspSpecNames
      - provider
      type: object
      properties:
        cspSpecNames:
          type: array
          example:
          - ecs.t5.large
          - ecs.t5.medium
          items:
            type: string
        provider:
          type: string
          example: alibaba
    model.GetAvailableRegionZonesRequest:
      required:
      - cspSpecName
      - provider
      type: object
      properties:
        cspSpecName:
          type: string
          example: ecs.t5.large
        provider:
          type: string
          example: alibaba
    model.HandlingCommandCountResponse:
      type: object
      properties:
        handlingCount:
          type: integer
          description: HandlingCount is the number of commands currently in 'Handling'
            status
          example: 3
        vmId:
          type: string
          description: VmId is the VM identifier
          example: g1-1
    model.IID:
      required:
      - NameId
      - SystemId
      type: object
      properties:
        NameId:
          type: string
          example: user-defined-name
        SystemId:
          type: string
          example: csp-defined-id
    model.IdList:
      type: object
      properties:
        output:
          type: array
          items:
            type: string
    model.IdNameInDetailInfo:
      type: object
      properties:
        idInCsp:
          type: string
        idInSp:
          type: string
        idInTb:
          type: string
        nameInCsp:
          type: string
    model.ImageFetchOption:
      type: object
      properties:
        excludedProviders:
          type: array
          description: "providers need to be excluded from the image fetching operation\
            \ (ex: [\"azure\"])"
          example:
          - azure
          items:
            type: string
        regionAgnosticProviders:
          type: array
          description: "providers that are not region-specific (ex: [\"gcp\"])"
          example:
          - gcp
          - tencent
          items:
            type: string
    model.ImageInfo:
      type: object
      properties:
        commandHistory:
          type: array
          description: CommandHistory stores the status and history of remote commands
            executed on this VM
          items:
            $ref: '#/components/schemas/model.ImageSourceCommandHistory'
        connectionName:
          type: string
        creationDate:
          type: string
        cspImageId:
          type: string
          description: CspImageId is resource identifier managed by CSP
          example: ami-0d399fba46a30a310
        cspImageName:
          type: string
          example: csp-06eb41e14121c550a
        description:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        fetchedTime:
          type: string
        id:
          type: string
          example: aws-ap-southeast-1
        imageStatus:
          type: object
          description: "Available, Deprecated, NA"
          example: Available
          allOf:
          - $ref: '#/components/schemas/model.ImageStatus'
        infraType:
          type: string
          description: "vm|k8s|kubernetes|container, etc."
        isBasicImage:
          type: boolean
          default: false
        isGPUImage:
          type: boolean
          default: false
        isKubernetesImage:
          type: boolean
          default: false
        name:
          type: string
          example: aws-ap-southeast-1
        namespace:
          type: string
          description: Composite primary key
          example: default
        osArchitecture:
          type: object
          description: "arm64, x86_64 etc."
          example: x86_64
          allOf:
          - $ref: '#/components/schemas/model.OSArchitecture'
        osDiskSizeGB:
          type: number
          description: "10, 50, 100 etc."
          example: 50.0
        osDiskType:
          type: string
          description: "ebs, HDD, etc."
          example: HDD
        osDistribution:
          type: string
          description: "Ubuntu 22.04~, CentOS 8 etc."
          example: Ubuntu 22.04~
        osPlatform:
          type: object
          description: "Linux/UNIX, Windows, NA"
          example: Linux/UNIX
          allOf:
          - $ref: '#/components/schemas/model.OSPlatform'
        osType:
          type: string
          example: ubuntu 22.04
        providerName:
          type: string
        regionList:
          type: array
          description: Array field for supporting multiple regions
          items:
            type: string
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        sourceCspImageName:
          type: string
          description: SourceCspImageName is the name of the source CSP image from
            which this image was created
          example: csp-06eb41e14121c550a
        sourceVmUid:
          type: string
          description: SourceVmUid is the UID of the source VM from which this image
            was created
          example: wef12awefadf1221edcf
        systemLabel:
          type: string
          example: Managed by CB-Tumblebug
        uid:
          type: string
          example: wef12awefadf1221edcf
    model.ImageReq:
      required:
      - connectionName
      - cspImageName
      - name
      type: object
      properties:
        connectionName:
          type: string
        cspImageName:
          type: string
        description:
          type: string
        name:
          type: string
    model.ImageRiskInfo:
      type: object
      properties:
        hasFailedWithSpec:
          type: boolean
          description: HasFailedWithSpec indicates if this image has failed with this
            spec before
        hasSucceededWithSpec:
          type: boolean
          description: HasSucceededWithSpec indicates if this image has succeeded
            with this spec before
        isNewCombination:
          type: boolean
          description: IsNewCombination indicates if this spec+image combination has
            never been tried
        level:
          type: string
          description: "Level is the risk level: \"low\", \"medium\", \"high\""
        message:
          type: string
          description: Message explains the image-specific risk reasoning
    model.ImageSourceCommandHistory:
      type: object
      properties:
        commandExecuted:
          type: string
          description: CommandExecuted is the actual SSH command executed on the VM
            (may be adjusted)
          example: ls -la
        index:
          type: integer
          description: "Index is sequential identifier for this command execution\
            \ (1, 2, 3, ...)"
          example: 1
    model.ImageStatus:
      type: string
      enum:
      - Available
      - Unavailable
      - Deprecated
      - NA
      x-enum-varnames:
      - ImageAvailable
      - ImageUnavailable
      - ImageDeprecated
      - ImageNA
    model.InspectResource:
      type: object
      properties:
        connectionName:
          type: string
        resourceOverview:
          $ref: '#/components/schemas/model.ResourceCountOverview'
        resourceType:
          type: string
        resources:
          $ref: '#/components/schemas/model.ResourcesByManageType'
        systemMessage:
          type: string
    model.InspectResourceAllResult:
      type: object
      properties:
        availableConnection:
          type: integer
        cspOnlyOverview:
          $ref: '#/components/schemas/model.inspectOverview'
        elapsedTime:
          type: integer
        inspectResult:
          type: array
          items:
            $ref: '#/components/schemas/model.InspectResourceResult'
        registeredConnection:
          type: integer
        tumblebugOverview:
          $ref: '#/components/schemas/model.inspectOverview'
    model.InspectResourceResult:
      type: object
      properties:
        connectionName:
          type: string
        cspOnlyOverview:
          $ref: '#/components/schemas/model.inspectOverview'
        elapsedTime:
          type: integer
        systemMessage:
          type: string
        tumblebugOverview:
          $ref: '#/components/schemas/model.inspectOverview'
    model.InspectResourcesRequest:
      type: object
      properties:
        connectionName:
          type: string
          example: aws-ap-southeast-1
        resourceType:
          type: string
          example: vNet
          enum:
          - vNet
          - subnet
          - securityGroup
          - sshKey
          - vm
    model.K8sAccessInfo:
      type: object
      properties:
        endpoint:
          type: string
          example: http://1.2.3.4:6443
        kubeconfig:
          type: string
          example: |-
            apiVersion: v1
            clusters:
            - cluster:
             certificate-authority-data: LS0...
    model.K8sAddonsInfo:
      type: object
      properties:
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
    model.K8sClusterAssetInfo:
      type: object
      properties:
        k8s_cluster:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/model.K8sClusterDetail'
    model.K8sClusterConnectionConfigCandidatesReq:
      required:
      - specId
      type: object
      properties:
        specId:
          type: array
          description: SpecId is field for id of a spec in common namespace
          example:
          - tencent+ap-seoul+S2.MEDIUM4
          items:
            type: string
    model.K8sClusterContainerCmdReq:
      required:
      - command
      type: object
      properties:
        command:
          type: array
          example:
          - echo hello
          items:
            type: string
    model.K8sClusterContainerCmdResult:
      type: object
      properties:
        command:
          type: string
        err:
          type: object
        stderr:
          type: string
        stdout:
          type: string
    model.K8sClusterContainerCmdResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sClusterContainerCmdResult'
    model.K8sClusterDetail:
      type: object
      properties:
        node_image_designation:
          type: boolean
        node_images:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sClusterNodeImageDetail'
        nodegroup_naming_rule:
          type: string
        nodegroups_on_creation:
          type: boolean
        required_subnet_count:
          type: integer
        root_disks:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sClusterRootDiskDetail'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sClusterVersionDetail'
    model.K8sClusterDynamicReq:
      required:
      - imageId
      - name
      - specId
      type: object
      properties:
        connectionName:
          type: string
          description: |-
            if ConnectionName is given, the VM tries to use associtated credential.
            if not, it will use predefined ConnectionName in Spec objects
          default: tencent-ap-seoul
        description:
          type: string
          example: Description
        desiredNodeSize:
          type: string
          example: "1"
          default: "1"
        imageId:
          type: string
          description: ImageId is field for id of a image in common namespace
          example: "default, tencent+ap-seoul+ubuntu20.04"
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        maxNodeSize:
          type: string
          example: "3"
          default: "2"
        minNodeSize:
          type: string
          example: "1"
          default: "1"
        name:
          type: string
          description: K8sCluster name if it is not empty.
          example: k8scluster01
        nodeGroupName:
          type: string
          description: NodeGroup name if it is not empty
          example: k8sng01
        onAutoScaling:
          type: string
          example: "true"
          default: "true"
        rootDiskSize:
          type: string
          description: "\"default\", Integer (GB): [\"50\", ..., \"1000\"]"
          example: "default, 30, 42, ..."
          default: default
        rootDiskType:
          type: string
          description: "\"\", \"default\", \"TYPE1\", AWS: [\"standard\", \"gp2\"\
            , \"gp3\"], Azure: [\"PremiumSSD\", \"StandardSSD\", \"StandardHDD\"],\
            \ GCP: [\"pd-standard\", \"pd-balanced\", \"pd-ssd\", \"pd-extreme\"],\
            \ ALIBABA: [\"cloud_efficiency\", \"cloud\", \"cloud_essd\"], TENCENT:\
            \ [\"CLOUD_PREMIUM\", \"CLOUD_SSD\"]"
          example: "default, TYPE1, ..."
          default: default
        specId:
          type: string
          description: SpecId is field for id of a spec in common namespace
          example: tencent+ap-seoul+S2.MEDIUM4
        version:
          type: string
          description: K8s Clsuter version
          example: "1.29"
    model.K8sClusterInfo:
      type: object
      properties:
        accessInfo:
          $ref: '#/components/schemas/model.K8sAccessInfo'
        addons:
          $ref: '#/components/schemas/model.K8sAddonsInfo'
        connectionConfig:
          type: object
          description: ConnectionConfig shows connection info to cloud service provider
          allOf:
          - $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
          example: alibaba-ap-northeast-2
        createdTime:
          type: string
          example: 1970-01-01T00:00:00.00Z
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        description:
          type: string
          example: My K8sCluster
        id:
          type: string
          description: "Id is unique identifier for the object, same as Name"
          example: k8scluster01
        k8sNodeGroupList:
          type: array
          description: K8sNodeGroupList is for describing network information about
            the cluster
          items:
            $ref: '#/components/schemas/model.K8sNodeGroupInfo'
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: k8scluster01
        network:
          type: object
          description: Network is for describing network information about the cluster
          allOf:
          - $ref: '#/components/schemas/model.K8sClusterNetworkInfo'
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        spiderViewK8sClusterDetail:
          $ref: '#/components/schemas/model.SpiderClusterInfo'
        status:
          type: object
          description: "Creating, Active, Inactive, Updating, Deleting"
          example: Active
          allOf:
          - $ref: '#/components/schemas/model.K8sClusterStatus'
        systemLabel:
          type: string
          description: SystemLabel is for describing the Resource in a keyword (any
            string can be used) for special System purpose
          example: Managed by CB-Tumblebug
        systemMessage:
          type: string
          description: Latest system message such as error message
          example: Failed because ...
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
        version:
          type: string
          description: Version is for kubernetes version
          example: 1.30.1
    model.K8sClusterNetworkInfo:
      type: object
      properties:
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        securityGroupIds:
          type: array
          example:
          - sg-01
          items:
            type: string
        subnetIds:
          type: array
          example:
          - subnet-01
          items:
            type: string
        vNetId:
          type: string
          example: vpc-01
    model.K8sClusterNodeGroupsOnCreation:
      type: object
      properties:
        result:
          type: string
          example: "true"
    model.K8sClusterNodeImageDesignation:
      type: object
      properties:
        result:
          type: string
          example: "true"
    model.K8sClusterNodeImageDetail:
      type: object
      properties:
        availables:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sClusterNodeImageDetailAvailable'
        region:
          type: array
          items:
            type: string
    model.K8sClusterNodeImageDetailAvailable:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    model.K8sClusterReq:
      required:
      - connectionName
      - name
      - securityGroupIds
      - subnetIds
      - vNetId
      type: object
      properties:
        connectionName:
          type: string
          description: Namespace      string `json:"namespace" validate:"required"
            example:"default"`
          example: alibaba-ap-northeast-2
        cspResourceId:
          type: string
          description: |-
            Fields for "Register existing K8sCluster" feature
            @description CspResourceId is required to register a k8s cluster from CSP (option=register)
          example: required when option is register
        description:
          type: string
          example: My K8sCluster
        k8sNodeGroupList:
          type: array
          description: (3) NodeGroupInfo List
          items:
            $ref: '#/components/schemas/model.K8sNodeGroupReq'
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        name:
          type: string
          description: (1) K8sCluster Info
          example: k8scluster01
        securityGroupIds:
          type: array
          example:
          - sg-01
          items:
            type: string
        subnetIds:
          type: array
          example:
          - subnet-01
          items:
            type: string
        systemLabel:
          type: string
          description: SystemLabel is for describing the k8scluster in a keyword (any
            string can be used) for special System purpose
          example: ""
        vNetId:
          type: string
          description: (2) Network Info
          example: vpc-01
        version:
          type: string
          example: 1.30.1-aliyun.1
    model.K8sClusterRequiredSubnetCount:
      type: object
      properties:
        result:
          type: string
          example: "1"
    model.K8sClusterRootDiskDetail:
      type: object
      properties:
        region:
          type: array
          items:
            type: string
        size:
          $ref: '#/components/schemas/model.K8sClusterRootDiskDetailSize'
        type:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sClusterRootDiskDetailType'
    model.K8sClusterRootDiskDetailSize:
      type: object
      properties:
        max:
          type: integer
        min:
          type: integer
    model.K8sClusterRootDiskDetailType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    model.K8sClusterStatus:
      type: string
      enum:
      - Creating
      - Active
      - Inactive
      - Updating
      - Deleting
      x-enum-varnames:
      - K8sClusterCreating
      - K8sClusterActive
      - K8sClusterInactive
      - K8sClusterUpdating
      - K8sClusterDeleting
    model.K8sClusterVersionDetail:
      type: object
      properties:
        availables:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sClusterVersionDetailAvailable'
        region:
          type: array
          items:
            type: string
    model.K8sClusterVersionDetailAvailable:
      type: object
      properties:
        id:
          type: string
          example: 1.30.1-aliyun.1
        name:
          type: string
          example: "1.30"
    model.K8sNodeGroupDynamicReq:
      required:
      - imageId
      - name
      - specId
      type: object
      properties:
        description:
          type: string
          example: Description
        desiredNodeSize:
          type: string
          example: "1"
          default: "1"
        imageId:
          type: string
          description: ImageId is field for id of a image in common namespace
          example: "default, tencent+ap-seoul+ubuntu20.04"
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        maxNodeSize:
          type: string
          example: "3"
          default: "2"
        minNodeSize:
          type: string
          example: "1"
          default: "1"
        name:
          type: string
          description: K8sNodeGroup name if it is not empty.
          example: k8sng01
        onAutoScaling:
          type: string
          example: "true"
          default: "true"
        rootDiskSize:
          type: string
          description: "\"default\", Integer (GB): [\"50\", ..., \"1000\"]"
          example: "default, 30, 42, ..."
          default: default
        rootDiskType:
          type: string
          description: "\"\", \"default\", \"TYPE1\", AWS: [\"standard\", \"gp2\"\
            , \"gp3\"], Azure: [\"PremiumSSD\", \"StandardSSD\", \"StandardHDD\"],\
            \ GCP: [\"pd-standard\", \"pd-balanced\", \"pd-ssd\", \"pd-extreme\"],\
            \ ALIBABA: [\"cloud_efficiency\", \"cloud\", \"cloud_essd\"], TENCENT:\
            \ [\"CLOUD_PREMIUM\", \"CLOUD_SSD\"]"
          example: "default, TYPE1, ..."
          default: default
        specId:
          type: string
          description: SpecId is field for id of a spec in common namespace
          example: tencent+ap-seoul+S2.MEDIUM4
    model.K8sNodeGroupInfo:
      type: object
      properties:
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        desiredNodeSize:
          type: integer
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        imageId:
          type: string
        k8sNodes:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sNodeInfo'
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        maxNodeSize:
          type: integer
        minNodeSize:
          type: integer
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        onAutoScaling:
          type: boolean
        rootDiskSize:
          type: string
        rootDiskType:
          type: string
        specId:
          type: string
        spiderViewK8sNodeGroupDetail:
          $ref: '#/components/schemas/model.SpiderNodeGroupInfo'
        sshKeyId:
          type: string
        status:
          type: object
          description: "Creating, Active, Inactive, Updating, Deleting"
          example: Active
          allOf:
          - $ref: '#/components/schemas/model.K8sNodeGroupStatus'
    model.K8sNodeGroupReq:
      type: object
      properties:
        description:
          type: string
          example: Description
        desiredNodeSize:
          type: string
          example: "1"
        imageId:
          type: string
          example: image-01
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        maxNodeSize:
          type: string
          example: "3"
        minNodeSize:
          type: string
          example: "1"
        name:
          type: string
          example: k8sng01
        onAutoScaling:
          type: string
          description: autoscale config.
          example: "true"
        rootDiskSize:
          type: string
          description: "\"default\", Integer (GB): [\"50\", ..., \"1000\"]"
          example: "40"
        rootDiskType:
          type: string
          description: "\"\", \"default\", \"TYPE1\", AWS: [\"standard\", \"gp2\"\
            , \"gp3\"], Azure: [\"PremiumSSD\", \"StandardSSD\", \"StandardHDD\"],\
            \ GCP: [\"pd-standard\", \"pd-balanced\", \"pd-ssd\", \"pd-extreme\"],\
            \ ALIBABA: [\"cloud_efficiency\", \"cloud\", \"cloud_ssd\"], TENCENT:\
            \ [\"CLOUD_PREMIUM\", \"CLOUD_SSD\"]"
          example: cloud_essd
        specId:
          type: string
          example: spec-01
        sshKeyId:
          type: string
          example: sshkey-01
    model.K8sNodeGroupStatus:
      type: string
      enum:
      - Creating
      - Active
      - Inactive
      - Updating
      - Deleting
      x-enum-varnames:
      - K8sNodeGroupCreating
      - K8sNodeGroupActive
      - K8sNodeGroupInactive
      - K8sNodeGroupUpdating
      - K8sNodeGroupDeleting
    model.K8sNodeInfo:
      type: object
      properties:
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
    model.KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    model.KeyWithEncryptedValue:
      type: object
      properties:
        key:
          type: string
          description: Key for the value
        value:
          type: string
          description: Should be encrypted by the public key issued by GET /credential/publicKey
    model.Label:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
    model.LabelInfo:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
        resourceKey:
          type: string
    model.Location:
      type: object
      properties:
        display:
          type: string
        latitude:
          type: number
        longitude:
          type: number
    model.McNetConfigurationDetails:
      type: object
      properties:
        csp:
          type: string
        regions:
          type: array
          items:
            $ref: '#/components/schemas/model.RegionDetails'
    model.McNlbInfo:
      type: object
      properties:
        deploymentLog:
          $ref: '#/components/schemas/model.MciSshCmdResult'
        mcNlbHostInfo:
          $ref: '#/components/schemas/model.MciInfo'
        mciAccessInfo:
          $ref: '#/components/schemas/model.MciAccessInfo'
    model.MciAccessInfo:
      type: object
      properties:
        mciId:
          type: string
        mciNlbListener:
          $ref: '#/components/schemas/model.MciAccessInfo'
        mciSubGroupAccessInfo:
          type: array
          items:
            $ref: '#/components/schemas/model.MciSubGroupAccessInfo'
    model.MciAssociatedResourceList:
      type: object
      properties:
        connectionNames:
          type: array
          items:
            type: string
        cspSubnetIds:
          type: array
          items:
            type: string
        cspVNetIds:
          type: array
          items:
            type: string
        cspVmIds:
          type: array
          items:
            type: string
        cspVmNames:
          type: array
          items:
            type: string
        dataDiskIds:
          type: array
          items:
            type: string
        imageIds:
          type: array
          items:
            type: string
        providerNames:
          type: array
          items:
            type: string
        securityGroupIds:
          type: array
          items:
            type: string
        specIds:
          type: array
          items:
            type: string
        sshKeyIds:
          type: array
          items:
            type: string
        subGroupIds:
          type: array
          items:
            type: string
        subnetIds:
          type: array
          items:
            type: string
        vNetIds:
          type: array
          items:
            type: string
        vmIds:
          type: array
          items:
            type: string
    model.MciCmdReq:
      required:
      - command
      type: object
      properties:
        command:
          type: array
          example:
          - "client_ip=$(echo $SSH_CLIENT | awk '{print $1}'); echo SSH client IP\
            \ is: $client_ip"
          items:
            type: string
        userName:
          type: string
          example: cb-user
    model.MciConnectionConfigCandidatesReq:
      required:
      - specId
      type: object
      properties:
        specId:
          type: array
          description: SpecId is field for id of a spec in common namespace
          example:
          - aws+ap-northeast-2+t2.small
          - gcp+us-west1+g1-small
          items:
            type: string
    model.MciCreationErrors:
      type: object
      properties:
        failedVmCount:
          type: integer
          description: FailedVmCount is the number of VMs that failed to be created
        failureHandlingStrategy:
          type: string
          description: FailureHandlingStrategy indicates how failures were handled
        successfulVmCount:
          type: integer
          description: SuccessfulVmCount is the number of VMs that were successfully
            created
        totalVmCount:
          type: integer
          description: TotalVmCount is the total number of VMs that were supposed
            to be created
        vmCreationErrors:
          type: array
          description: VmCreationErrors contains errors from actual VM creation phase
          items:
            $ref: '#/components/schemas/model.VmCreationError'
        vmObjectCreationErrors:
          type: array
          description: VmObjectCreationErrors contains errors from VM object creation
            phase
          items:
            $ref: '#/components/schemas/model.VmCreationError'
    model.MciDynamicReq:
      required:
      - name
      - subGroups
      type: object
      properties:
        description:
          type: string
          example: Made in CB-TB
        installMonAgent:
          type: string
          description: "InstallMonAgent Option for CB-Dragonfly agent installation\
            \ ([yes/no] default:no)"
          example: "no"
          default: "no"
          enum:
          - "yes"
          - "no"
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        name:
          type: string
          example: mci01
        policyOnPartialFailure:
          type: string
          description: |-
            PolicyOnPartialFailure determines how to handle VM creation failures
            - "continue": Continue with partial MCI creation (default)
            - "rollback": Cleanup entire MCI when any VM fails
            - "refine": Mark failed VMs for refinement
          example: continue
          default: continue
          enum:
          - continue
          - rollback
          - refine
        postCommand:
          type: object
          description: PostCommand is for the command to bootstrap the VMs
          allOf:
          - $ref: '#/components/schemas/model.MciCmdReq'
        subGroups:
          type: array
          description: |-
            SubGroups is array of VM requests for multi-cloud infrastructure
            Example: Multiple VM groups across different CSPs
            [
              {
                "name": "aws-group",
                "subGroupSize": "3",
                "specId": "aws+ap-northeast-2+t3.nano",
                "imageId": "ami-01f71f215b23ba262",
                "rootDiskSize": "50",
                "label": {"role": "worker", "csp": "aws"}
              },
              {
                "name": "azure-group",
                "subGroupSize": "2",
                "specId": "azure+koreasouth+standard_b1s",
                "imageId": "Canonical:0001-com-ubuntu-server-jammy:22_04-lts:22.04.202505210",
                "rootDiskSize": "50",
                "label": {"role": "head", "csp": "azure"}
              },
              {
                "name": "gcp-group",
                "subGroupSize": "1",
                "specId": "gcp+asia-northeast3+g1-small",
                "imageId": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20250712",
                "rootDiskSize": "50",
                "label": {"role": "test", "csp": "gcp"}
              }
            ]
          items:
            $ref: '#/components/schemas/model.CreateSubGroupDynamicReq'
        systemLabel:
          type: string
          description: SystemLabel is for describing the mci in a keyword (any string
            can be used) for special System purpose
          example: ""
    model.MciHandlingCommandCountResponse:
      type: object
      properties:
        mciId:
          type: string
          description: MciId is the MCI identifier
          example: mci01
        totalHandlingCount:
          type: integer
          description: TotalHandlingCount is the total number of handling commands
            across all VMs in the MCI
          example: 3
        vmHandlingCounts:
          type: object
          additionalProperties:
            type: integer
          description: VmHandlingCounts is a map of VM ID to handling command count
    model.MciInfo:
      type: object
      properties:
        configureCloudAdaptiveNetwork:
          type: string
          description: "ConfigureCloudAdaptiveNetwork is an option to configure Cloud\
            \ Adaptive Network (CLADNet) ([yes/no] default:yes)"
          example: "yes"
          default: "no"
          enum:
          - "yes"
          - "no"
        creationErrors:
          type: object
          description: CreationErrors contains information about VM creation failures
            (if any)
          allOf:
          - $ref: '#/components/schemas/model.MciCreationErrors'
        description:
          type: string
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        installMonAgent:
          type: string
          description: "InstallMonAgent Option for CB-Dragonfly agent installation\
            \ ([yes/no] default:no)"
          example: "no"
          default: "no"
          enum:
          - "yes"
          - "no"
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        newVmList:
          type: array
          description: List of IDs for new VMs. Return IDs if the VMs are newly added.
            This field should be used for return body only.
          items:
            type: string
        placementAlgo:
          type: string
        postCommand:
          type: object
          description: PostCommand is for the command to bootstrap the VMs
          allOf:
          - $ref: '#/components/schemas/model.MciCmdReq'
        postCommandResult:
          type: object
          description: PostCommandResult is the result of the command for bootstraping
            the VMs
          allOf:
          - $ref: '#/components/schemas/model.MciSshCmdResult'
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        status:
          type: string
        statusCount:
          $ref: '#/components/schemas/model.StatusCountInfo'
        systemLabel:
          type: string
          description: SystemLabel is for describing the mci in a keyword (any string
            can be used) for special System purpose
          example: Managed by CB-Tumblebug
        systemMessage:
          type: array
          description: Latest system message such as error message
          items:
            type: string
        targetAction:
          type: string
        targetStatus:
          type: string
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
        vm:
          type: array
          items:
            $ref: '#/components/schemas/model.VmInfo'
    model.MciPolicyInfo:
      type: object
      properties:
        Id:
          type: string
          description: MCI Id (generated ID by the Name)
        Name:
          type: string
          description: MCI Name (for request)
        actionLog:
          type: string
        description:
          type: string
          example: Description
        policy:
          type: array
          items:
            $ref: '#/components/schemas/model.Policy'
    model.MciPolicyReq:
      type: object
      properties:
        description:
          type: string
          example: Description
        policy:
          type: array
          items:
            $ref: '#/components/schemas/model.Policy'
    model.MciReq:
      required:
      - name
      - subGroups
      type: object
      properties:
        description:
          type: string
          example: Made in CB-TB
        installMonAgent:
          type: string
          description: "InstallMonAgent Option for CB-Dragonfly agent installation\
            \ ([yes/no] default:yes)"
          example: "no"
          default: "no"
          enum:
          - "yes"
          - "no"
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        name:
          type: string
          example: mci01
        placementAlgo:
          type: string
        policyOnPartialFailure:
          type: string
          description: |-
            PolicyOnPartialFailure determines how to handle VM creation failures
            - "continue": Continue with partial MCI creation (default)
            - "rollback": Cleanup entire MCI when any VM fails
            - "refine": Mark failed VMs for refinement
          example: continue
          default: continue
          enum:
          - continue
          - rollback
          - refine
        postCommand:
          type: object
          description: PostCommand is for the command to bootstrap the VMs
          allOf:
          - $ref: '#/components/schemas/model.MciCmdReq'
        subGroups:
          type: array
          items:
            $ref: '#/components/schemas/model.CreateSubGroupReq'
        systemLabel:
          type: string
          description: SystemLabel is for describing the mci in a keyword (any string
            can be used) for special System purpose
          example: ""
    model.MciSnapshotResult:
      type: object
      properties:
        failCount:
          type: integer
          example: 0
        mciId:
          type: string
          example: mci01
        namespace:
          type: string
          example: default
        results:
          type: array
          items:
            $ref: '#/components/schemas/model.VmSnapshotResult'
        successCount:
          type: integer
          example: 3
    model.MciSshCmdResult:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/model.SshCmdResult'
    model.MciSshCmdResultForAPI:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/model.SshCmdResultForAPI'
    model.MciStatusInfo:
      type: object
      properties:
        id:
          type: string
        installMonAgent:
          type: string
          description: "InstallMonAgent Option for CB-Dragonfly agent installation\
            \ ([yes/no] default:yes)"
          example: "[yes, no]"
        label:
          type: object
          additionalProperties:
            type: string
          description: Label is for describing the object by keywords
        masterIp:
          type: string
          example: 32.201.134.113
        masterSSHPort:
          type: string
        masterVmId:
          type: string
          example: vm-asiaeast1-cb-01
        name:
          type: string
        status:
          type: string
        statusCount:
          $ref: '#/components/schemas/model.StatusCountInfo'
        systemLabel:
          type: string
          description: SystemLabel is for describing the mci in a keyword (any string
            can be used) for special System purpose
          example: Managed by CB-Tumblebug
        targetAction:
          type: string
        targetStatus:
          type: string
        vm:
          type: array
          items:
            $ref: '#/components/schemas/model.VmStatusInfo'
    model.MciSubGroupAccessInfo:
      type: object
      properties:
        bastionVmId:
          type: string
        mciVmAccessInfo:
          type: array
          items:
            $ref: '#/components/schemas/model.MciVmAccessInfo'
        nlbListener:
          $ref: '#/components/schemas/model.NLBListenerInfo'
        subGroupId:
          type: string
    model.MciVmAccessInfo:
      type: object
      properties:
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        privateIP:
          type: string
        privateKey:
          type: string
        publicIP:
          type: string
        sshPort:
          type: string
        vmId:
          type: string
        vmUserName:
          type: string
        vmUserPassword:
          type: string
    model.MonResultSimple:
      type: object
      properties:
        err:
          type: string
        metric:
          type: string
        value:
          type: string
        vmId:
          type: string
    model.MonResultSimpleResponse:
      type: object
      properties:
        mciId:
          type: string
        mciMonitoring:
          type: array
          items:
            $ref: '#/components/schemas/model.MonResultSimple'
        nsId:
          type: string
    model.NLBAddRemoveVMReq:
      type: object
      properties:
        targetGroup:
          $ref: '#/components/schemas/model.NLBTargetGroupInfo'
    model.NLBHealthCheckerInfo:
      type: object
      properties:
        interval:
          type: integer
          description: "secs, Interval time between health checks."
          example: 10
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        port:
          type: string
          description: Listener Port or 1-65535
          example: "22"
        protocol:
          type: string
          description: TCP|HTTP|HTTPS
          example: TCP
        threshold:
          type: integer
          description: "num, The number of continuous health checks to change the\
            \ VM status."
          example: 3
        timeout:
          type: integer
          description: "secs, Waiting time to decide an unhealthy VM when no response."
          example: 10
    model.NLBHealthCheckerReq:
      type: object
      properties:
        interval:
          type: string
          description: "secs, Interval time between health checks."
          example: default
        threshold:
          type: string
          description: "num, The number of continuous health checks to change the\
            \ VM status."
          example: default
        timeout:
          type: string
          description: "secs, Waiting time to decide an unhealthy VM when no response."
          example: default
    model.NLBInfo:
      type: object
      properties:
        associatedObjectList:
          type: array
          items:
            type: string
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
        createdTime:
          type: string
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        description:
          type: string
        healthChecker:
          $ref: '#/components/schemas/model.NLBHealthCheckerInfo'
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        isAutoGenerated:
          type: boolean
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        listener:
          $ref: '#/components/schemas/model.NLBListenerInfo'
        location:
          $ref: '#/components/schemas/model.Location'
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        scope:
          type: string
          description: REGION(V) | GLOBAL
        status:
          type: string
        systemLabel:
          type: string
          description: SystemLabel is for describing the Resource in a keyword (any
            string can be used) for special System purpose
          example: Managed by CB-Tumblebug
        targetGroup:
          $ref: '#/components/schemas/model.NLBTargetGroupInfo'
        type:
          type: string
          description: PUBLIC(V) | INTERNAL
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
    model.NLBListenerInfo:
      type: object
      properties:
        dnsName:
          type: string
          description: "Optional, Auto Generated and attached"
          example: default-group-cd3.elb.ap-northeast-2.amazonaws.com
        ip:
          type: string
          description: Auto Generated and attached
          example: x.x.x.x
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        port:
          type: string
          description: 1-65535
          example: "80"
        protocol:
          type: string
          description: TCP|UDP
          example: TCP
    model.NLBListenerReq:
      type: object
      properties:
        port:
          type: string
          description: 1-65535
          example: "80"
        protocol:
          type: string
          description: TCP|UDP
          example: TCP
    model.NLBReq:
      required:
      - healthChecker
      - listener
      - scope
      - targetGroup
      - type
      type: object
      properties:
        cspResourceId:
          type: string
          description: Existing NLB (used only for option=register)
        description:
          type: string
        healthChecker:
          type: object
          description: HealthChecker
          allOf:
          - $ref: '#/components/schemas/model.NLBHealthCheckerReq'
        listener:
          type: object
          description: Frontend
          allOf:
          - $ref: '#/components/schemas/model.NLBListenerReq'
        scope:
          type: string
          description: REGION(V) | GLOBAL
          example: REGION
          enum:
          - REGION
          - GLOBAL
        targetGroup:
          type: object
          description: Backend
          allOf:
          - $ref: '#/components/schemas/model.NLBTargetGroupReq'
        type:
          type: string
          description: PUBLIC(V) | INTERNAL
          example: PUBLIC
          enum:
          - PUBLIC
          - INTERNAL
    model.NLBTargetGroupInfo:
      type: object
      properties:
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        port:
          type: string
          description: Listener Port or 1-65535
          example: "80"
        protocol:
          type: string
          description: TCP|HTTP|HTTPS
          example: TCP
        subGroupId:
          type: string
          example: g1
        vms:
          type: array
          items:
            type: string
    model.NLBTargetGroupReq:
      type: object
      properties:
        port:
          type: string
          description: Listener Port or 1-65535
          example: "80"
        protocol:
          type: string
          description: TCP|HTTP|HTTPS
          example: TCP
        subGroupId:
          type: string
          example: g1
    model.NsInfo:
      type: object
      properties:
        description:
          type: string
          example: Description for this namespace
        id:
          type: string
          description: Id is unique identifier for the object
          example: default
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: default
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
    model.NsReq:
      type: object
      properties:
        description:
          type: string
          example: Description for this namespace
        name:
          type: string
          example: default
    model.OSArchitecture:
      type: string
      enum:
      - arm32
      - arm64
      - arm64_mac
      - x86_32
      - x86_64
      - x86_32_mac
      - x86_64_mac
      - s390x
      - NA
      - ""
      x-enum-varnames:
      - ARM32
      - ARM64
      - ARM64_MAC
      - X86_32
      - X86_64
      - X86_32_MAC
      - X86_64_MAC
      - S390X
      - ArchitectureNA
      - ArchitectureUnknown
    model.OSPlatform:
      type: string
      enum:
      - Linux/UNIX
      - Windows
      - NA
      x-enum-varnames:
      - Linux_UNIX
      - Windows
      - PlatformNA
    model.Operation:
      type: object
      properties:
        operand:
          type: string
          description: "10, 70, 80, 98, ..."
          example: "4"
          enum:
          - "4"
          - "8"
          - ..
        operator:
          type: string
          description: ">=, <=, =="
          example: <=
          enum:
          - '>='
          - <=
          - ==
    model.OperationExample:
      type: object
      properties:
        operand:
          type: string
          example: "2"
        operator:
          type: string
          example: '>='
    model.OverallRiskInfo:
      type: object
      properties:
        level:
          type: string
          description: "Level is the overall risk level: \"low\", \"medium\", \"high\""
        message:
          type: string
          description: Message explains the overall risk reasoning
        primaryRiskFactor:
          type: string
          description: "PrimaryRiskFactor indicates what the main risk factor is:\
            \ \"spec\", \"image\", \"combination\", \"none\""
    model.ParameterKeyVal:
      type: object
      properties:
        key:
          type: string
          description: coordinate
          example: coordinateClose
          enum:
          - coordinateClose
          - coordinateWithin
          - coordinateFair
        val:
          type: array
          description: "[\"Latitude,Longitude\",\"12,543\",..,\"31,433\"]"
          example:
          - 44.146838/-116.411403
          items:
            type: string
    model.ParameterKeyValExample:
      type: object
      properties:
        description:
          type: string
          example: Find specs closest to given coordinate
        key:
          type: string
          example: coordinateClose
        val:
          type: array
          example:
          - 37.5665/126.9780
          items:
            type: string
    model.ParameterOptionDetail:
      type: object
      properties:
        description:
          type: string
          example: Find specs closest to given coordinate (latitude/longitude)
        example:
          type: array
          example:
          - 37.5665/126.9780
          - 35.6762/139.6503
          items:
            type: string
        format:
          type: string
          example: latitude/longitude
        key:
          type: string
          example: coordinateClose
    model.ParameterOptionsInfo:
      type: object
      properties:
        latencyParameters:
          type: array
          items:
            $ref: '#/components/schemas/model.ParameterOptionDetail'
        locationParameters:
          type: array
          items:
            $ref: '#/components/schemas/model.ParameterOptionDetail'
    model.Policy:
      type: object
      properties:
        autoAction:
          $ref: '#/components/schemas/model.AutoAction'
        autoCondition:
          $ref: '#/components/schemas/model.AutoCondition'
        status:
          type: string
    model.PriorityCondition:
      type: object
      properties:
        metric:
          type: string
          example: location
          enum:
          - location
          - cost
          - random
          - performance
          - latency
        parameter:
          type: array
          items:
            $ref: '#/components/schemas/model.ParameterKeyVal'
        weight:
          type: string
          example: "0.3"
          enum:
          - "0.1"
          - "0.2"
          - '...'
    model.PriorityConditionExample:
      type: object
      properties:
        description:
          type: string
          example: Prioritize by lowest cost
        metric:
          type: string
          example: cost
        parameter:
          type: array
          items:
            $ref: '#/components/schemas/model.ParameterKeyValExample'
        weight:
          type: string
          example: "1.0"
    model.PriorityInfo:
      type: object
      properties:
        policy:
          type: array
          items:
            $ref: '#/components/schemas/model.PriorityCondition'
    model.PriorityOptionsInfo:
      type: object
      properties:
        availableMetrics:
          type: array
          description: Available metrics for prioritization
          example:
          - cost
          - performance
          - location
          - latency
          - random
          items:
            type: string
        examplePolicies:
          type: array
          description: Example priority policies
          items:
            $ref: '#/components/schemas/model.PriorityConditionExample'
        parameterOptions:
          type: object
          description: Parameter options for location and latency metrics
          allOf:
          - $ref: '#/components/schemas/model.ParameterOptionsInfo'
    model.ProvisioningEvent:
      type: object
      properties:
        cspImageName:
          type: string
          description: CspImageName is the CSP-specific image name used in this provisioning
            attempt
        errorMessage:
          type: string
          description: ErrorMessage contains the error message if provisioning failed
        isSuccess:
          type: boolean
          description: IsSuccess indicates if the provisioning was successful
        mciId:
          type: string
          description: MciId is the MCI ID that this VM belongs to
        specId:
          type: string
          description: SpecId is the VM specification ID
        timestamp:
          type: string
          description: Timestamp is when this provisioning event occurred
        vmName:
          type: string
          description: VmName is the name of the VM that was being provisioned
    model.ProvisioningLog:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: AdditionalInfo contains any additional information about the
            provisioning attempts
        connectionName:
          type: string
          description: ConnectionName is the connection configuration name
        failureCount:
          type: integer
          description: FailureCount is the total number of provisioning failures
        failureImages:
          type: array
          description: FailureImages contains list of CSP image names that failed
            with this spec
          items:
            type: string
        failureMessages:
          type: array
          description: FailureMessages contains list of failure error messages
          items:
            type: string
        failureTimestamps:
          type: array
          description: FailureTimestamps contains list of failure timestamps
          items:
            type: string
        lastUpdated:
          type: string
          description: LastUpdated is the timestamp of the last log update
        providerName:
          type: string
          description: ProviderName is the cloud service provider name
        regionName:
          type: string
          description: RegionName is the region name
        specId:
          type: string
          description: SpecId is the VM specification ID
        successCount:
          type: integer
          description: SuccessCount is the total number of provisioning successes
            (only recorded if there were previous failures)
        successImages:
          type: array
          description: SuccessImages contains list of CSP image names that succeeded
            with this spec (only recorded if there were previous failures)
          items:
            type: string
        successTimestamps:
          type: array
          description: SuccessTimestamps contains list of success timestamps (only
            recorded if there were previous failures)
          items:
            type: string
    model.PublicKeyResponse:
      type: object
      properties:
        publicKey:
          type: string
        publicKeyTokenId:
          type: string
    model.Range:
      type: object
      properties:
        max:
          type: number
        min:
          type: number
    model.RecommendSpecReq:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/model.FilterInfo'
        limit:
          type: string
          example: "5"
          enum:
          - "1"
          - "2"
          - "30"
        priority:
          $ref: '#/components/schemas/model.PriorityInfo'
    model.RecommendSpecRequestOptions:
      type: object
      properties:
        filter:
          type: object
          description: Filter options - available filtering fields and their example
            values
          allOf:
          - $ref: '#/components/schemas/model.FilterOptionsInfo'
        limit:
          type: array
          description: Limit options - example limit values
          example:
          - "5"
          - "10"
          - "20"
          - "50"
          items:
            type: string
        priority:
          type: object
          description: Priority options - available prioritization metrics and parameters
          allOf:
          - $ref: '#/components/schemas/model.PriorityOptionsInfo'
    model.RegionDetail:
      type: object
      properties:
        description:
          type: string
        location:
          $ref: '#/components/schemas/model.Location'
        regionId:
          type: string
        regionName:
          type: string
        zones:
          type: array
          items:
            type: string
    model.RegionDetails:
      type: object
      properties:
        name:
          type: string
        vNets:
          type: array
          items:
            $ref: '#/components/schemas/model.VNetDetails'
    model.RegionInfo:
      type: object
      properties:
        region:
          type: string
        zone:
          type: string
    model.RegionList:
      type: object
      properties:
        regions:
          type: array
          items:
            $ref: '#/components/schemas/model.RegionDetail'
    model.RegionZoneInfo:
      type: object
      properties:
        assignedRegion:
          type: string
        assignedZone:
          type: string
    model.RegisterResourceAllResult:
      type: object
      properties:
        availableConnection:
          type: integer
        elapsedTime:
          type: integer
        registerationOverview:
          $ref: '#/components/schemas/model.RegisterationOverview'
        registerationResult:
          type: array
          items:
            $ref: '#/components/schemas/model.RegisterResourceResult'
        registeredConnection:
          type: integer
    model.RegisterResourceResult:
      type: object
      properties:
        connectionName:
          type: string
        elapsedTime:
          type: integer
        registerationOutputs:
          $ref: '#/components/schemas/model.IdList'
        registerationOverview:
          $ref: '#/components/schemas/model.RegisterationOverview'
        systemMessage:
          type: string
    model.RegisterSubnetReq:
      required:
      - connectionName
      - cspResourceId
      - name
      type: object
      properties:
        connectionName:
          type: string
        cspResourceId:
          type: string
        description:
          type: string
        name:
          type: string
        zone:
          type: string
    model.RegisterVNetReq:
      required:
      - connectionName
      - cspResourceId
      - name
      type: object
      properties:
        connectionName:
          type: string
        cspResourceId:
          type: string
        description:
          type: string
        name:
          type: string
    model.RegisterationOverview:
      type: object
      properties:
        customImage:
          type: integer
        dataDisk:
          type: integer
        failed:
          type: integer
        nlb:
          type: integer
        securityGroup:
          type: integer
        sshKey:
          type: integer
        vNet:
          type: integer
        vm:
          type: integer
    model.RequiredAWSResourceForSqlDB:
      type: object
      properties:
        subnet1ID:
          type: string
          example: subnet-xxxx
        subnet2ID:
          type: string
          example: subnet-xxxx in different AZ
        vNetID:
          type: string
          example: vpc-xxxxx
    model.RequiredAzureResourceForSqlDB:
      type: object
      properties:
        resourceGroup:
          type: string
          example: koreacentral
    model.RequiredCSPResourceForSqlDB:
      type: object
      properties:
        aws:
          $ref: '#/components/schemas/model.RequiredAWSResourceForSqlDB'
        azure:
          $ref: '#/components/schemas/model.RequiredAzureResourceForSqlDB'
        ncp:
          $ref: '#/components/schemas/model.RequiredNCPResourceForSqlDB'
    model.RequiredNCPResourceForSqlDB:
      type: object
      properties:
        subnetID:
          type: string
          example: "123456"
    model.ResourceCountOverview:
      type: object
      properties:
        onCspOnly:
          type: integer
        onCspTotal:
          type: integer
        onSpider:
          type: integer
        onTumblebug:
          type: integer
    model.ResourceDetail:
      type: object
      properties:
        cspResourceDetail:
          type: object
          description: CspResourceDetail is the detailed information of the resource
            provided from the terrarium.
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        status:
          type: string
    model.ResourceOnCsp:
      type: object
      properties:
        count:
          type: integer
        info:
          type: array
          items:
            $ref: '#/components/schemas/model.ResourceOnCspInfo'
    model.ResourceOnCspInfo:
      type: object
      properties:
        cspResourceId:
          type: string
        refNameOrId:
          type: string
    model.ResourceOnSpider:
      type: object
      properties:
        count:
          type: integer
        info:
          type: array
          items:
            $ref: '#/components/schemas/model.ResourceOnSpiderInfo'
    model.ResourceOnSpiderInfo:
      type: object
      properties:
        cspResourceId:
          type: string
        idBySp:
          type: string
    model.ResourceOnTumblebug:
      type: object
      properties:
        count:
          type: integer
        info:
          type: array
          items:
            $ref: '#/components/schemas/model.ResourceOnTumblebugInfo'
    model.ResourceOnTumblebugInfo:
      type: object
      properties:
        cspResourceId:
          type: string
        idByTb:
          type: string
        mciId:
          type: string
        nsId:
          type: string
        objectKey:
          type: string
    model.ResourcesByManageType:
      type: object
      properties:
        onCspOnly:
          $ref: '#/components/schemas/model.ResourceOnCsp'
        onCspTotal:
          $ref: '#/components/schemas/model.ResourceOnCsp'
        onSpider:
          $ref: '#/components/schemas/model.ResourceOnSpider'
        onTumblebug:
          $ref: '#/components/schemas/model.ResourceOnTumblebug'
    model.Response:
      type: object
      properties:
        details:
          type: string
          example: Any details
        list:
          type: array
          items:
            type: object
        message:
          type: string
          example: Any message
        object:
          type: object
          additionalProperties: true
        status:
          type: integer
          example: 200
        success:
          type: boolean
          example: true
    model.RestPostSqlDBRequest:
      required:
      - connectionName
      - csp
      - dbAdminPassword
      - dbAdminUsername
      - dbEnginePort
      - dbEngineVersion
      - dbInstanceSpec
      - name
      - region
      type: object
      properties:
        connectionName:
          type: string
          example: aws-ap-northeast-2
        csp:
          type: string
          example: aws
        dbAdminPassword:
          type: string
          example: Password1234!
        dbAdminUsername:
          type: string
          example: mydbadmin
        dbEnginePort:
          type: integer
          example: 3306
        dbEngineVersion:
          type: string
          example: 8.0.39
        dbInstanceSpec:
          type: string
          example: db.t3.micro
        name:
          type: string
          example: sqldb01
        region:
          type: string
          example: ap-northeast-2
        requiredCSPResource:
          $ref: '#/components/schemas/model.RequiredCSPResourceForSqlDB'
    model.RestPostVpnRequest:
      required:
      - name
      - site1
      - site2
      type: object
      properties:
        name:
          type: string
          example: vpn01
        site1:
          $ref: '#/components/schemas/model.SiteProperty'
        site2:
          $ref: '#/components/schemas/model.SiteProperty'
    model.RestWrapperSecurityGroupUpdateResponse:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/model.SecurityGroupUpdateResponse'
        summary:
          $ref: '#/components/schemas/model.UpdateSummary'
    model.RetrievedRegionList:
      type: object
      properties:
        region:
          type: array
          items:
            $ref: '#/components/schemas/model.SpiderRegionZoneInfo'
    model.ReviewMciDynamicReqInfo:
      type: object
      properties:
        creationViable:
          type: boolean
        estimatedCost:
          type: string
          example: $0.50/hour
        mciName:
          type: string
          description: MCI-level information
        overallMessage:
          type: string
          example: All VMs can be created successfully
        overallStatus:
          type: string
          description: Overall assessment of the MCI request
          example: Ready/Warning/Error
        policyDescription:
          type: string
          example: "If some VMs fail during creation, MCI will be created with successfully\
            \ provisioned VMs only"
        policyOnPartialFailure:
          type: string
          description: Failure policy analysis
          example: continue
        policyRecommendation:
          type: string
          example: Consider 'refine' policy for automatic cleanup of failed VMs
        recommendations:
          type: array
          description: Recommendations for improvement
          items:
            type: string
        resourceSummary:
          type: object
          description: Resource availability summary
          allOf:
          - $ref: '#/components/schemas/model.ReviewResourceSummary'
        totalVmCount:
          type: integer
        vmReviews:
          type: array
          description: VM-level validation results
          items:
            $ref: '#/components/schemas/model.ReviewSubGroupDynamicReqInfo'
    model.ReviewResourceSummary:
      type: object
      properties:
        availableImages:
          type: integer
        availableSpecs:
          type: integer
          description: Resource availability counts
        connectionNames:
          type: array
          items:
            type: string
        providerNames:
          type: array
          description: Provider and region details
          items:
            type: string
        regionNames:
          type: array
          items:
            type: string
        totalProviders:
          type: integer
        totalRegions:
          type: integer
        unavailableImages:
          type: integer
        unavailableSpecs:
          type: integer
        uniqueImages:
          type: array
          items:
            type: string
        uniqueSpecs:
          type: array
          items:
            type: string
    model.ReviewResourceValidation:
      type: object
      properties:
        cspResourceId:
          type: string
        isAvailable:
          type: boolean
        message:
          type: string
        resourceId:
          type: string
        resourceName:
          type: string
        status:
          type: string
          example: Available/Unavailable/Unknown
    model.ReviewSubGroupDynamicReqInfo:
      type: object
      properties:
        canCreate:
          type: boolean
        connectionName:
          type: string
          description: Connection and region info
        errors:
          type: array
          items:
            type: string
        estimatedCost:
          type: string
          description: Cost estimation
          example: $0.10/hour
        imageValidation:
          $ref: '#/components/schemas/model.ReviewResourceValidation'
        info:
          type: array
          description: General information and configuration notes
          items:
            type: string
        message:
          type: string
          example: VM can be created successfully
        providerName:
          type: string
        regionName:
          type: string
        specValidation:
          type: object
          description: Resource validation details
          allOf:
          - $ref: '#/components/schemas/model.ReviewResourceValidation'
        status:
          type: string
          description: Validation status
          example: Ready/Warning/Error
        subGroupSize:
          type: string
        vmName:
          type: string
          description: VM request information
        warnings:
          type: array
          description: Warnings and errors
          items:
            type: string
    model.RiskAnalysis:
      type: object
      properties:
        imageRisk:
          type: object
          description: ImageRisk contains image-specific risk analysis
          allOf:
          - $ref: '#/components/schemas/model.ImageRiskInfo'
        overallRisk:
          type: object
          description: OverallRisk contains overall combined risk assessment
          allOf:
          - $ref: '#/components/schemas/model.OverallRiskInfo'
        recentFailureMessages:
          type: array
          description: "RecentFailureMessages contains recent failure messages for\
            \ context (up to 5 most recent, unique messages)"
          items:
            type: string
        recommendations:
          type: array
          description: Recommendations provides actionable guidance for users
          items:
            type: string
        specRisk:
          type: object
          description: SpecRisk contains spec-specific risk analysis
          allOf:
          - $ref: '#/components/schemas/model.SpecRiskInfo'
    model.ScaleOutSubGroupReq:
      required:
      - numVMsToAdd
      type: object
      properties:
        numVMsToAdd:
          type: string
          description: Define addtional VMs to scaleOut
          example: "2"
    model.ScheduleJobListResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/model.ScheduleJobStatus'
    model.ScheduleJobRequest:
      required:
      - intervalSeconds
      - jobType
      - nsId
      type: object
      properties:
        connectionName:
          type: string
          description: Job-specific parameters (for registerCspResources)
          example: aws-ap-northeast-2
        intervalSeconds:
          minimum: 10
          type: integer
          description: Execution interval in seconds
          example: 60
        jobType:
          type: string
          description: "Job type: registerCspResources, registerCspResourcesAll"
          example: registerCspResources
        mciFlag:
          type: string
          description: "MCI flag: y or n"
          example: "y"
        mciNamePrefix:
          type: string
          description: MCI name prefix
          example: mci-01
        nsId:
          type: string
          description: Namespace ID
          example: default
        option:
          type: string
          description: "Options: onlyVm, exceptVm, or empty for all"
          example: ""
    model.ScheduleJobStatus:
      type: object
      properties:
        autoDisabled:
          type: boolean
          description: Whether job was auto-disabled due to failures
          example: false
        connectionName:
          type: string
          description: Job-specific parameters
          example: aws-ap-northeast-2
        consecutiveFailures:
          type: integer
          description: Current consecutive failures
          example: 0
        createdAt:
          type: string
          example: 2023-10-27T10:30:00Z
        enabled:
          type: boolean
          example: true
        executionCount:
          type: integer
          example: 5
        failureCount:
          type: integer
          description: Total failed executions
          example: 1
        intervalSeconds:
          type: integer
          example: 60
        jobId:
          type: string
          example: registerCspResources-default-1698765432
        jobType:
          type: string
          example: registerCspResources
        lastError:
          type: string
          example: ""
        lastExecutedAt:
          type: string
          example: 2023-10-27T11:30:00Z
        lastResult:
          type: string
          example: "Success (execution #5)"
        mciFlag:
          type: string
          example: "y"
        mciNamePrefix:
          type: string
          example: mci-01
        nextExecutionAt:
          type: string
          example: 2023-10-27T12:30:00Z
        nsId:
          type: string
          example: default
        option:
          type: string
          example: ""
        status:
          type: string
          example: Scheduled
        successCount:
          type: integer
          description: Total successful executions
          example: 4
    model.SearchImageRequest:
      type: object
      properties:
        detailSearchKeys:
          type: array
          description: |-
            Keywords for searching images in detail.
            Space-separated for AND condition (ex: "sql 2022", "ubuntu 22.04", etc.).
            Used for if the user wants to search images with specific keywords in their details.
          example:
          - tensorflow
          - "2.17"
          items:
            type: string
        includeBasicImageOnly:
          type: boolean
          description: |-
            IncludeBasicImageOnly is to return basic OS distribution only without additional applications.
            If true, the search results will include only the basic OS distribution without additional applications.
            If false or not specified, the search results will include images with additional applications installed.
          example: false
        includeDeprecatedImage:
          type: boolean
          description: |-
            Whether the search results should include deprecated images or not.
            If not specified, deprecated images will not be included in the search results.
            In usual, deprecated images are not recommended to use, but they can be used if necessary.
          example: false
        isGPUImage:
          type: boolean
          description: |-
            Whether the image is ready for GPU usage or not.
            In usual, true means the image is ready for GPU usage with GPU drivers and libraries installed.
            If not specified, both true and false images will be included in the search results.
            Even if the image is not ready for GPU usage, it can be used with GPU by installing GPU drivers and libraries manually.
          example: false
        isKubernetesImage:
          type: boolean
          description: |-
            Whether the image is specialized image only for Kubernetes nodes.
            If not specified, both true and false images will be included in the search results.
            Images that are not specialized for Kubernetes also can be used as Kubernetes nodes. It depends on CSPs.
          example: false
        isRegisteredByAsset:
          type: boolean
          description: Whether the image is registered by CB-Tumblebug asset file
            or not.
          example: false
        matchedSpecId:
          type: string
          description: |-
            MatchedSpecId is the ID of the matched spec.
            If specified, only the images that match this spec will be returned.
            This is useful when the user wants to search images that match a specific spec.
          example: aws+ap-northeast-2+t2.small
        maxResults:
          type: integer
          description: |-
            MaxResults is the maximum number of images to be returned in the search results.
            If not specified, all images will be returned.
            If specified, the number of images returned will be limited to the specified value.
          example: 100
        osArchitecture:
          type: object
          description: "The architecture of the operating system of the image. (ex:\
            \ \"x86_64\", \"arm64\", etc.)"
          example: x86_64
          allOf:
          - $ref: '#/components/schemas/model.OSArchitecture'
        osType:
          type: string
          description: "Simplified OS name and version string. Space-separated for\
            \ AND condition (ex: \"ubuntu 22.04\", \"windows 10\", etc.)."
          example: ubuntu 22.04
        providerName:
          type: string
          description: "Cloud Service Provider (ex: \"aws\", \"azure\", \"gcp\", etc.).\
            \ Use GET /provider to get the list of available providers."
          example: aws
        regionName:
          type: string
          description: "Cloud Service Provider Region (ex: \"us-east-1\", \"us-west-2\"\
            , etc.). Use GET /provider/{providerName}/region to get the list of available\
            \ regions."
          example: us-east-1
    model.SearchImageRequestOptions:
      type: object
      properties:
        detailSearchKeys:
          type: array
          description: |-
            Keywords for searching images in detail.
            Space-separated for AND condition (ex: "sql 2022", "ubuntu 22.04", etc.).
            Used for if the user wants to search images with specific keywords in their details.
          items:
            type: array
            items:
              type: string
        includeDeprecatedImage:
          type: array
          description: |-
            Whether the search results should include deprecated images or not.
            If not specified, deprecated images will not be included in the search results.
            In usual, deprecated images are not recommended to use, but they can be used if necessary.
          items:
            type: boolean
        isGPUImage:
          type: array
          description: |-
            Whether the image is ready for GPU usage or not.
            In usual, true means the image is ready for GPU usage with GPU drivers and libraries installed.
            If not specified, both true and false images will be included in the search results.
            Even if the image is not ready for GPU usage, it can be used with GPU by installing GPU drivers and libraries manually.
          items:
            type: boolean
        isKubernetesImage:
          type: array
          description: |-
            Whether the image is specialized image only for Kubernetes nodes.
            If not specified, both true and false images will be included in the search results.
            Images that are not specialized for Kubernetes also can be used as Kubernetes nodes. It depends on CSPs.
          items:
            type: boolean
        isRegisteredByAsset:
          type: array
          description: Whether the image is registered by CB-Tumblebug asset file
            or not.
          items:
            type: boolean
        matchedSpecId:
          type: array
          description: |-
            MatchedSpecId is the ID of the matched spec.
            If specified, only the images that match this spec will be returned.
            This is useful when the user wants to search images that match a specific spec.
          example:
          - aws+ap-northeast-2+t2.small
          items:
            type: string
        maxResults:
          type: array
          description: |-
            MaxResults is the maximum number of images to be returned in the search results.
            If not specified, all images will be returned.
            If specified, the number of images returned will be limited to the specified value.
          example:
          - 100
          items:
            type: integer
        osArchitecture:
          type: array
          description: "The architecture of the operating system of the image. (ex:\
            \ \"x86_64\", \"arm64\", etc.)"
          items:
            type: string
        osType:
          type: array
          description: "Simplified OS name and version string. Space-separated for\
            \ AND condition (ex: \"ubuntu 22.04\", \"windows 10\", etc.)."
          items:
            type: string
        providerName:
          type: array
          description: "Cloud Service Provider (ex: \"aws\", \"azure\", \"gcp\", etc.).\
            \ Use GET /provider to get the list of available providers."
          items:
            type: string
        regionName:
          type: array
          description: "Cloud Service Provider Region (ex: \"us-east-1\", \"us-west-2\"\
            , etc.). Use GET /provider/{providerName}/region to get the list of available\
            \ regions."
          items:
            type: string
    model.SearchImageResponse:
      type: object
      properties:
        imageCount:
          type: integer
        imageList:
          type: array
          items:
            $ref: '#/components/schemas/model.ImageInfo'
    model.SecurityGroupInfo:
      type: object
      properties:
        associatedObjectList:
          type: array
          items:
            type: string
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        description:
          type: string
        firewallRules:
          type: array
          items:
            $ref: '#/components/schemas/model.FirewallRuleInfo'
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        isAutoGenerated:
          type: boolean
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        systemLabel:
          type: string
          description: SystemLabel is for describing the Resource in a keyword (any
            string can be used) for special System purpose
          example: Managed by CB-Tumblebug
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
        vNetId:
          type: string
    model.SecurityGroupReq:
      required:
      - connectionName
      - name
      - vNetId
      type: object
      properties:
        connectionName:
          type: string
        cspResourceId:
          type: string
          description: CspResourceId is required to register object from CSP (option=register)
          example: "required for option=register only. ex: csp-06eb41e14121c550a"
        description:
          type: string
        firewallRules:
          type: array
          description: validate:"required"`
          items:
            $ref: '#/components/schemas/model.FirewallRuleReq'
        name:
          type: string
        vNetId:
          type: string
    model.SecurityGroupUpdateReq:
      type: object
      properties:
        firewallRules:
          type: array
          items:
            $ref: '#/components/schemas/model.FirewallRuleReq'
    model.SecurityGroupUpdateResponse:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        name:
          type: string
        previous:
          $ref: '#/components/schemas/model.SecurityGroupInfo'
        success:
          type: boolean
        updated:
          $ref: '#/components/schemas/model.SecurityGroupInfo'
    model.SetK8sNodeGroupAutoscalingReq:
      type: object
      properties:
        onAutoScaling:
          type: string
          example: "true"
    model.SetK8sNodeGroupAutoscalingRes:
      type: object
      properties:
        result:
          type: string
          example: "true"
    model.SimpleMsg:
      type: object
      properties:
        message:
          type: string
          example: Any message
    model.SiteDetail:
      type: object
      properties:
        connectionName:
          type: string
          example: aws-ap-northeast-2
        csp:
          type: string
          example: aws
        gatewaySubnetCidr:
          type: string
          description: "SubnetId          string `json:\"subnet,omitempty\" example:\"\
            subnet-xxxxx\"`"
          example: xxx.xxx.xxx.xxx/xx
        region:
          type: string
          example: ap-northeast-2
        resourceGroup:
          type: string
          example: rg-xxxxx
        vnet:
          type: string
          description: "Zone              string `json:\"zone,omitempty\" example:\"\
            ap-northeast-2a\"`"
          example: vpc-xxxxx
    model.SiteProperty:
      type: object
      properties:
        cspSpecificProperty:
          $ref: '#/components/schemas/model.CspSpecificProperty'
        vNetId:
          type: string
          example: vnet01
    model.SitesInfo:
      type: object
      properties:
        count:
          type: integer
          example: 3
        mciId:
          type: string
          example: mci-01
        nsId:
          type: string
          example: ns-01
        sites:
          $ref: '#/components/schemas/model.sites'
    model.SnapshotReq:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          example: Description about this custom image
        name:
          type: string
          example: custom-image01
    model.SpecAvailabilityBatchResult:
      type: object
      properties:
        averageQueryMs:
          type: integer
          example: 1250
        failedQueries:
          type: integer
          example: 2
        fastestQueryMs:
          type: integer
          example: 850
        provider:
          type: string
          example: alibaba
        slowestQueryMs:
          type: integer
          example: 2100
        specResults:
          type: array
          items:
            $ref: '#/components/schemas/model.SpecAvailabilityInfo'
        successfulQueries:
          type: integer
          example: 8
        totalDurationMs:
          type: integer
          example: 12500
        totalSpecs:
          type: integer
          example: 10
    model.SpecAvailabilityInfo:
      type: object
      properties:
        availableRegions:
          type: array
          items:
            $ref: '#/components/schemas/model.SpecRegionZoneInfo'
        cspSpecName:
          type: string
          example: ecs.t5.large
        errorMessage:
          type: string
          example: Spec not available
        provider:
          type: string
          example: alibaba
        queryDurationMs:
          type: integer
          example: 1250
        success:
          type: boolean
          example: true
    model.SpecCleanupResult:
      type: object
      properties:
        availabilityCheckMs:
          type: integer
          example: 12500
        availabilityResults:
          $ref: '#/components/schemas/model.SpecAvailabilityBatchResult'
        cleanupDurationMs:
          type: integer
          example: 15000
        failedDeletions:
          type: array
          example:
          - ecs.t5.large
          items:
            type: string
        provider:
          type: string
          example: alibaba
        region:
          type: string
          example: ap-northeast-1
        specsDeleted:
          type: integer
          example: 5
        specsToDelete:
          type: integer
          example: 5
        specsToIgnoreInfo:
          type: object
          description: Detailed information about specs that were identified for deletion
          allOf:
          - $ref: '#/components/schemas/model.SpecsToIgnoreData'
        totalSpecsChecked:
          type: integer
          example: 50
    model.SpecFetchOption:
      type: object
      properties:
        excludedProviders:
          type: array
          description: "providers need to be excluded from the spec fetching operation\
            \ (ex: [\"azure\"])"
          example:
          - azure
          items:
            type: string
        regionAgnosticProviders:
          type: array
          description: "providers that are not region-specific (ex: [\"gcp\"])"
          example:
          - gcp
          - tencent
          items:
            type: string
    model.SpecInfo:
      type: object
      properties:
        acceleratorCount:
          type: integer
        acceleratorMemoryGB:
          type: number
        acceleratorModel:
          type: string
        acceleratorType:
          type: string
        architecture:
          type: string
          example: x86_64
        associatedObjectList:
          type: array
          items:
            type: string
        connectionName:
          type: string
        costPerHour:
          type: number
        cspSpecName:
          type: string
          description: CspSpecName is name of the spec given by CSP
          example: csp-06eb41e14121c550a
        description:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        diskSizeGB:
          type: number
        evaluationScore01:
          type: number
        evaluationScore02:
          type: number
        evaluationScore03:
          type: number
        evaluationScore04:
          type: number
        evaluationScore05:
          type: number
        evaluationScore06:
          type: number
        evaluationScore07:
          type: number
        evaluationScore08:
          type: number
        evaluationScore09:
          type: number
        evaluationScore10:
          type: number
        evaluationStatus:
          type: string
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws+ap-southeast+csp-06eb41e14121c550a
        infraType:
          type: string
          description: "InfraType can be one of vm|k8s|kubernetes|container, etc."
        isAutoGenerated:
          type: boolean
        maxTotalStorageTiB:
          type: integer
        memoryGiB:
          type: number
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        namespace:
          type: string
          example: default
        netBwGbps:
          type: integer
        orderInFilteredResult:
          type: integer
        osType:
          type: string
        providerName:
          type: string
        regionLatitude:
          type: number
        regionLongitude:
          type: number
        regionName:
          type: string
        rootDiskSize:
          type: string
        rootDiskType:
          type: string
        systemLabel:
          type: string
          description: SystemLabel is for describing the Resource in a keyword (any
            string can be used) for special System purpose
          example: Managed by CB-Tumblebug
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
        vCPU:
          type: integer
    model.SpecRegionZoneInfo:
      type: object
      properties:
        regionName:
          type: string
          example: ap-northeast-1
        zones:
          type: array
          example:
          - ap-northeast-1a
          - ap-northeast-1b
          items:
            type: string
    model.SpecReq:
      required:
      - connectionName
      - cspSpecName
      - name
      type: object
      properties:
        connectionName:
          type: string
        cspSpecName:
          type: string
          description: CspSpecName is name of the spec given by CSP
        description:
          type: string
        name:
          type: string
          description: "Name is human-readable string to represent the object, used\
            \ to generate Id"
    model.SpecRiskInfo:
      type: object
      properties:
        failedImageCount:
          type: integer
          description: FailedImageCount is the number of different images that failed
            with this spec
        failureRate:
          type: number
          description: FailureRate is the overall failure rate for this spec (0.0
            to 1.0)
        level:
          type: string
          description: "Level is the risk level: \"low\", \"medium\", \"high\""
        message:
          type: string
          description: Message explains the spec-specific risk reasoning
        succeededImageCount:
          type: integer
          description: SucceededImageCount is the number of different images that
            succeeded with this spec
        totalFailures:
          type: integer
          description: TotalFailures is the total number of failures for this spec
        totalSuccesses:
          type: integer
          description: TotalSuccesses is the total number of successes for this spec
    model.SpecsToIgnoreData:
      type: object
      properties:
        description:
          type: string
        global_ignore_specs:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        last_updated:
          type: string
        region_specific_ignore:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
    model.SpiderAccessInfo:
      type: object
      properties:
        endpoint:
          type: string
          description: ex) https://1.2.3.4:6443
        kubeconfig:
          type: string
    model.SpiderAddonsInfo:
      type: object
      properties:
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
    model.SpiderClusterInfo:
      type: object
      properties:
        accessInfo:
          $ref: '#/components/schemas/model.SpiderAccessInfo'
        addons:
          $ref: '#/components/schemas/model.SpiderAddonsInfo'
        createdTime:
          type: string
        iid:
          type: object
          description: "{NameId, SystemId}"
          allOf:
          - $ref: '#/components/schemas/model.IID'
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        network:
          $ref: '#/components/schemas/model.SpiderNetworkInfo'
        nodeGroupList:
          type: array
          items:
            $ref: '#/components/schemas/model.SpiderNodeGroupInfo'
        status:
          $ref: '#/components/schemas/model.SpiderClusterStatus'
        version:
          type: string
          description: "Kubernetes Version, ex) 1.23.3"
    model.SpiderClusterStatus:
      type: string
      enum:
      - Creating
      - Active
      - Inactive
      - Updating
      - Deleting
      x-enum-varnames:
      - SpiderClusterCreating
      - SpiderClusterActive
      - SpiderClusterInactive
      - SpiderClusterUpdating
      - SpiderClusterDeleting
    model.SpiderGpuInfo:
      required:
      - Count
      type: object
      properties:
        Count:
          type: string
          description: "Number of GPUs, \"-1\" when not applicable"
          example: "2"
        MemSizeGB:
          type: string
          description: "Memory size of the GPU in GB, \"-1\" when not applicable"
          example: "12"
        Mfr:
          type: string
          description: "Manufacturer of the GPU, NA when not applicable"
          example: NVIDIA
        Model:
          type: string
          description: "Model of the GPU, NA when not applicable"
          example: Tesla K80
        TotalMemSizeGB:
          type: string
          description: "Total Memory size of the GPU in GB, \"-1\" when not applicable"
          example: "24"
    model.SpiderImageInfo:
      type: object
      properties:
        IId:
          type: object
          description: "{NameId, SystemId}, {ami-00aa5a103ddf4509f, ami-00aa5a103ddf4509f}"
          allOf:
          - $ref: '#/components/schemas/model.IID'
        ImageStatus:
          type: object
          description: "Available, Unavailable"
          example: Available
          allOf:
          - $ref: '#/components/schemas/model.ImageStatus'
        KeyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        Name:
          type: string
          description: ami-00aa5a103ddf4509f
          example: ami-00aa5a103ddf4509f
        OSArchitecture:
          type: object
          description: "arm64, x86_64 etc."
          example: x86_64
          allOf:
          - $ref: '#/components/schemas/model.OSArchitecture'
        OSDiskSizeGB:
          type: string
          description: "10, 50, 100 etc."
          example: "50"
        OSDiskType:
          type: string
          description: "ebs, HDD, etc."
          example: HDD
        OSDistribution:
          type: string
          description: "Ubuntu 22.04~, CentOS 8 etc."
          example: Ubuntu 22.04~
        OSPlatform:
          type: object
          description: "Linux/UNIX, Windows, NA"
          example: Linux/UNIX
          allOf:
          - $ref: '#/components/schemas/model.OSPlatform'
    model.SpiderImageList:
      type: object
      properties:
        image:
          type: array
          items:
            $ref: '#/components/schemas/model.SpiderImageInfo'
    model.SpiderNetworkInfo:
      type: object
      properties:
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        securityGroupIIDs:
          type: array
          items:
            $ref: '#/components/schemas/model.IID'
        subnetIIDs:
          type: array
          items:
            $ref: '#/components/schemas/model.IID'
        vpcIID:
          type: object
          description: "{NameId, SystemId}"
          allOf:
          - $ref: '#/components/schemas/model.IID'
    model.SpiderNodeGroupInfo:
      required:
      - DesiredNodeSize
      - IId
      - ImageIID
      - KeyPairIID
      - MaxNodeSize
      - MinNodeSize
      - OnAutoScaling
      - Status
      - VMSpecName
      type: object
      properties:
        DesiredNodeSize:
          type: integer
          example: 2
        IId:
          type: object
          description: "{NameId, SystemId}"
          allOf:
          - $ref: '#/components/schemas/model.IID'
        ImageIID:
          type: object
          description: VM config.
          allOf:
          - $ref: '#/components/schemas/model.IID'
        KeyPairIID:
          $ref: '#/components/schemas/model.IID'
        KeyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        MaxNodeSize:
          type: integer
          example: 3
        MinNodeSize:
          type: integer
          example: 1
        Nodes:
          type: array
          items:
            $ref: '#/components/schemas/model.IID'
        OnAutoScaling:
          type: boolean
          description: Scaling config.
          example: true
        RootDiskSize:
          type: string
          description: "\"\", \"default\", \"50\", \"1000\" (GB)"
          example: "50"
        RootDiskType:
          type: string
          description: "\"SSD(gp2)\", \"Premium SSD\", ..."
        Status:
          type: object
          example: Active
          allOf:
          - $ref: '#/components/schemas/model.SpiderNodeGroupStatus'
        VMSpecName:
          type: string
          example: t3.medium
    model.SpiderNodeGroupStatus:
      type: string
      enum:
      - Creating
      - Active
      - Inactive
      - Updating
      - Deleting
      x-enum-varnames:
      - SpiderNodeGroupCreating
      - SpiderNodeGroupActive
      - SpiderNodeGroupInactive
      - SpiderNodeGroupUpdating
      - SpiderNodeGroupDeleting
    model.SpiderRegionZoneInfo:
      type: object
      properties:
        availableZoneList:
          type: array
          items:
            type: string
        keyValueInfoList:
          type: array
          description: "ex) { {region, us-east1}, {zone, us-east1-c} }"
          items:
            $ref: '#/components/schemas/model.KeyValue'
        providerName:
          type: string
          description: ex) "GCP"
        regionName:
          type: string
          description: ex) "region01"
    model.SpiderSpecInfo:
      required:
      - DiskSizeGB
      - MemSizeMib
      - Name
      - Region
      - VCpu
      type: object
      properties:
        DiskSizeGB:
          type: string
          description: "Disk size in GB, \"-1\" when not applicable"
          example: "8"
        Gpu:
          type: array
          description: GPU details if available
          items:
            $ref: '#/components/schemas/model.SpiderGpuInfo'
        KeyValueList:
          type: array
          description: Additional key-value pairs for the VM spec
          items:
            $ref: '#/components/schemas/model.KeyValue'
        MemSizeMib:
          type: string
          description: Memory size in MiB
          example: "1024"
        Name:
          type: string
          description: Name of the VM spec
          example: t2.micro
        Region:
          type: string
          description: Region where the VM spec is available
          example: us-east-1
        VCpu:
          type: object
          description: CPU details of the VM spec
          allOf:
          - $ref: '#/components/schemas/model.SpiderVCpuInfo'
    model.SpiderSpecList:
      type: object
      properties:
        vmspec:
          type: array
          items:
            $ref: '#/components/schemas/model.SpiderSpecInfo'
    model.SpiderVCpuInfo:
      required:
      - Count
      type: object
      properties:
        ClockGHz:
          type: string
          description: "Clock speed in GHz, \"-1\" when not applicable"
          example: "2.5"
        Count:
          type: string
          description: "Number of VCpu, \"-1\" when not applicable"
          example: "2"
    model.SqlDBInfo:
      type: object
      properties:
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        description:
          type: string
        details:
          type: object
        id:
          type: string
          description: Id is unique identifier for the object
          example: sqldb01
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: sqldb01
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        status:
          type: string
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
    model.SshCmdResult:
      type: object
      properties:
        command:
          type: object
          additionalProperties:
            type: string
        err:
          type: object
        mciId:
          type: string
        stderr:
          type: object
          additionalProperties:
            type: string
        stdout:
          type: object
          additionalProperties:
            type: string
        vmId:
          type: string
        vmIp:
          type: string
    model.SshCmdResultForAPI:
      type: object
      properties:
        command:
          type: object
          additionalProperties:
            type: string
        error:
          type: string
          description: String representation of error for JSON serialization
        mciId:
          type: string
        stderr:
          type: object
          additionalProperties:
            type: string
        stdout:
          type: object
          additionalProperties:
            type: string
        vmId:
          type: string
        vmIp:
          type: string
    model.SshKeyInfo:
      type: object
      properties:
        associatedObjectList:
          type: array
          items:
            type: string
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        description:
          type: string
        fingerprint:
          type: string
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        isAutoGenerated:
          type: boolean
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        privateKey:
          type: string
        publicKey:
          type: string
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        systemLabel:
          type: string
          description: SystemLabel is for describing the Resource in a keyword (any
            string can be used) for special System purpose
          example: Managed by CB-Tumblebug
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
        username:
          type: string
        verifiedUsername:
          type: string
    model.SshKeyReq:
      required:
      - connectionName
      - name
      type: object
      properties:
        connectionName:
          type: string
        cspResourceId:
          type: string
          description: |-
            Fields for "Register existing SSH keys" feature
            CspResourceId is required to register object from CSP (option=register)
        description:
          type: string
        fingerprint:
          type: string
        name:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        username:
          type: string
        verifiedUsername:
          type: string
    model.StatusCountInfo:
      type: object
      properties:
        countCreating:
          type: integer
          description: CountCreating is for counting Creating
        countFailed:
          type: integer
          description: CountFailed is for counting Failed
        countRebooting:
          type: integer
          description: CountRebooting is for counting Rebooting
        countResuming:
          type: integer
          description: CountResuming is for counting Resuming
        countRunning:
          type: integer
          description: CountRunning is for counting Running
        countSuspended:
          type: integer
          description: CountSuspended is for counting Suspended
        countSuspending:
          type: integer
          description: CountSuspending is for counting Suspending
        countTerminated:
          type: integer
          description: CountTerminated is for counting Terminated
        countTerminating:
          type: integer
          description: CountTerminating is for counting Terminating
        countTotal:
          type: integer
          description: CountTotal is for Total VMs
        countUndefined:
          type: integer
          description: CountUndefined is for counting Undefined
    model.SubnetInfo:
      type: object
      properties:
        bastionNodes:
          type: array
          items:
            $ref: '#/components/schemas/model.BastionNode'
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        cspVNetId:
          type: string
          description: CspVNetId is vNet resource identifier managed by CSP
          example: csp-45eb41e14121c550a
        cspVNetName:
          type: string
          description: CspVNetName is identifier to handle CSP vNet resource
          example: we12fawefadf1221edcf
        description:
          type: string
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        ipv4_CIDR:
          type: string
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        status:
          type: string
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
        zone:
          type: string
    model.SubnetReq:
      required:
      - ipv4_CIDR
      - name
      type: object
      properties:
        description:
          type: string
          example: subnet00 managed by CB-Tumblebug
        ipv4_CIDR:
          type: string
          example: 10.0.1.0/24
        name:
          type: string
          example: subnet00
        zone:
          type: string
    model.SystemLabelInfo:
      type: object
      properties:
        labelTypes:
          type: array
          items:
            type: string
        systemLabels:
          type: object
          additionalProperties:
            type: string
    model.UpdateScheduleJobRequest:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enable or disable the job
          example: true
        intervalSeconds:
          type: integer
          description: New execution interval in seconds
          example: 60
    model.UpdateSpecListByAvailabilityRequest:
      required:
      - provider
      type: object
      properties:
        provider:
          type: string
          example: alibaba
    model.UpdateSummary:
      type: object
      properties:
        allSuccess:
          type: boolean
        failed:
          type: integer
        success:
          type: integer
        total:
          type: integer
    model.UpgradeK8sClusterReq:
      type: object
      properties:
        version:
          type: string
          example: 1.30.1-alyun.1
    model.VNetDetails:
      type: object
      properties:
        hostsPerSubnet:
          type: string
        subnetCount:
          type: string
        useFirstNZones:
          type: string
    model.VNetInfo:
      type: object
      properties:
        associatedObjectList:
          type: array
          items:
            type: string
        cidrBlock:
          type: string
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        description:
          type: string
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        isAutoGenerated:
          type: boolean
        keyValueList:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        status:
          type: string
        subnetInfoList:
          type: array
          items:
            $ref: '#/components/schemas/model.SubnetInfo'
        systemLabel:
          type: string
          description: SystemLabel is for describing the Resource in a keyword (any
            string can be used) for special System purpose
          example: Managed by CB-Tumblebug
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
    model.VNetReq:
      required:
      - connectionName
      - name
      type: object
      properties:
        cidrBlock:
          type: string
          example: 10.0.0.0/16
        connectionName:
          type: string
          example: aws-ap-northeast-2
        description:
          type: string
          example: vnet00 managed by CB-Tumblebug
        name:
          type: string
          example: vnet00
        subnetInfoList:
          type: array
          items:
            $ref: '#/components/schemas/model.SubnetReq'
    model.VmCreationError:
      type: object
      properties:
        error:
          type: string
          description: Error is the error message
        phase:
          type: string
          description: Phase indicates when the error occurred
        timestamp:
          type: string
          description: Timestamp when the error occurred
        vmName:
          type: string
          description: VmName is the name of the VM that failed
    model.VmInfo:
      type: object
      properties:
        addtionalDetails:
          type: array
          items:
            $ref: '#/components/schemas/model.KeyValue'
        commandStatus:
          type: array
          description: CommandStatus stores the status and history of remote commands
            executed on this VM
          items:
            $ref: '#/components/schemas/model.CommandStatusInfo'
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
        createdTime:
          type: string
          description: Created time
          example: 2022-11-10 23:00:00
        cspImageName:
          type: string
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        cspSpecName:
          type: string
        cspSshKeyId:
          type: string
        cspSubnetId:
          type: string
        cspVNetId:
          type: string
        dataDiskIds:
          type: array
          items:
            type: string
        description:
          type: string
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        imageId:
          type: string
        label:
          type: object
          additionalProperties:
            type: string
        location:
          $ref: '#/components/schemas/model.Location'
        monAgentStatus:
          type: string
          description: Montoring agent status
          example: "[installed, notInstalled, failed]"
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        networkAgentStatus:
          type: string
          description: NetworkAgent status
          example: "[notInstalled, installing, installed, failed]"
        networkInterface:
          type: string
        privateDNS:
          type: string
        privateIP:
          type: string
        publicDNS:
          type: string
        publicIP:
          type: string
        region:
          type: object
          description: "AWS, ex) {us-east1, us-east1-c} or {ap-northeast-2}"
          allOf:
          - $ref: '#/components/schemas/model.RegionInfo'
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        rootDiskName:
          type: string
        rootDiskSize:
          type: string
        rootDiskType:
          type: string
        securityGroupIds:
          type: array
          items:
            type: string
        specId:
          type: string
        sshKeyId:
          type: string
        sshPort:
          type: string
        status:
          type: string
          description: Required by CB-Tumblebug
        subGroupId:
          type: string
          description: defined if the VM is in a group
        subnetId:
          type: string
        systemMessage:
          type: string
          description: Latest system message such as error message
          example: Failed because ...
        targetAction:
          type: string
        targetStatus:
          type: string
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
        vNetId:
          type: string
        vmUserName:
          type: string
        vmUserPassword:
          type: string
    model.VmSnapshotResult:
      type: object
      properties:
        error:
          type: string
        imageId:
          type: string
          example: custom-image-g1
        imageInfo:
          $ref: '#/components/schemas/model.ImageInfo'
        status:
          type: string
          example: Success
          enum:
          - Success
          - Failed
        subGroupId:
          type: string
          example: g1
        vmId:
          type: string
          example: g1-1
        vmName:
          type: string
          example: aws-ap-northeast-2-g1-1
    model.VmStatusInfo:
      type: object
      properties:
        createdTime:
          type: string
          description: Created time
          example: 2022-11-10 23:00:00
        cspResourceId:
          type: string
          description: CspResourceId is resource identifier managed by CSP
          example: csp-06eb41e14121c550a
        cspResourceName:
          type: string
          description: CspResourceName is name assigned to the CSP resource. This
            name is internally used to handle the resource.
          example: we12fawefadf1221edcf
        id:
          type: string
          description: Id is unique identifier for the object
          example: aws-ap-southeast-1
        location:
          $ref: '#/components/schemas/model.Location'
        monAgentStatus:
          type: string
          description: Montoring agent status
          example: "[installed, notInstalled, failed]"
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: aws-ap-southeast-1
        nativeStatus:
          type: string
        privateIp:
          type: string
        publicIp:
          type: string
        sshPort:
          type: string
        status:
          type: string
        systemMessage:
          type: string
          description: Latest system message such as error message
          example: Failed because ...
        targetAction:
          type: string
        targetStatus:
          type: string
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
    model.VpnIdList:
      type: object
      properties:
        vpnIdList:
          type: array
          items:
            type: string
    model.VpnInfo:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
          description: Id is unique identifier for the object
          example: vpn01
        name:
          type: string
          description: Name is human-readable string to represent the object
          example: vpn01
        resourceType:
          type: string
          description: ResourceType is the type of the resource
        status:
          type: string
        uid:
          type: string
          description: "Uid is universally unique identifier for the object, used\
            \ for labelSelector"
          example: wef12awefadf1221edcf
        vpnSites:
          type: array
          items:
            $ref: '#/components/schemas/model.VpnSiteDetail'
    model.VpnInfoList:
      type: object
      properties:
        vpnInfoList:
          type: array
          items:
            $ref: '#/components/schemas/model.VpnInfo'
    model.VpnSiteDetail:
      type: object
      properties:
        connectionConfig:
          $ref: '#/components/schemas/model.ConnConfig'
        connectionName:
          type: string
        resourceDetails:
          type: array
          description: ResourceDetails represents a CSP's multiple resources associated
            with the VPN from a CSP.
          items:
            $ref: '#/components/schemas/model.ResourceDetail'
    model.inspectOverview:
      type: object
      properties:
        customImage:
          type: integer
        dataDisk:
          type: integer
        nlb:
          type: integer
        securityGroup:
          type: integer
        sshKey:
          type: integer
        vNet:
          type: integer
        vm:
          type: integer
    model.sites:
      type: object
      properties:
        alibaba:
          type: array
          items:
            $ref: '#/components/schemas/model.SiteDetail'
        aws:
          type: array
          items:
            $ref: '#/components/schemas/model.SiteDetail'
        azure:
          type: array
          items:
            $ref: '#/components/schemas/model.SiteDetail'
        gcp:
          type: array
          items:
            $ref: '#/components/schemas/model.SiteDetail'
        ibm:
          type: array
          items:
            $ref: '#/components/schemas/model.SiteDetail'
        tencent:
          type: array
          items:
            $ref: '#/components/schemas/model.SiteDetail'
    netutil.Network:
      type: object
      properties:
        cidrBlock:
          type: string
        name:
          type: string
        subnets:
          type: array
          items:
            $ref: '#/components/schemas/netutil.Network'
    netutil.RestPostUtilToDesignNetworkReponse:
      type: object
      properties:
        cidrBlock:
          type: string
        name:
          type: string
        subnets:
          type: array
          items:
            $ref: '#/components/schemas/netutil.Network'
    netutil.RestPostUtilToDesignNetworkRequest:
      type: object
      properties:
        cidrBlock:
          type: string
          example: 192.168.0.0/16
        subnettingRules:
          type: array
          items:
            $ref: '#/components/schemas/netutil.SubnettingRule'
    netutil.RestPostUtilToDesignVNetReponse:
      type: object
      properties:
        rootNetworkCIDR:
          type: string
          description: in case of supernetting enabled
        vNetReqList:
          type: array
          items:
            $ref: '#/components/schemas/model.VNetReq'
    netutil.RestPostUtilToDesignVNetRequest:
      type: object
      properties:
        desiredPrivateNetwork:
          type: string
        mcNetConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/model.McNetConfigurationDetails'
        supernettingEnabled:
          type: string
    netutil.RestPostUtilToValidateNetworkRequest:
      type: object
      properties:
        networkConfiguration:
          $ref: '#/components/schemas/netutil.Network'
    netutil.SubnettingRule:
      type: object
      properties:
        type:
          type: object
          example: minSubnets
          allOf:
          - $ref: '#/components/schemas/netutil.SubnettingRuleType'
        value:
          type: integer
          example: 2
    netutil.SubnettingRuleType:
      type: string
      enum:
      - minSubnets
      - minHosts
      x-enum-varnames:
      - SubnettingRuleTypeMinSubnets
      - SubnettingRuleTypeMinHosts
    resource.Bucket:
      type: object
      properties:
        creationDate:
          type: string
          example: 2025-09-04T04:18:06Z
        name:
          type: string
          example: spider-test-bucket
    resource.Buckets:
      type: object
      properties:
        bucket:
          type: array
          items:
            $ref: '#/components/schemas/resource.Bucket'
    resource.CORSConfiguration:
      type: object
      properties:
        corsRule:
          type: array
          description: |-
            The xmlns attribute will be set to "http://s3.amazonaws.com/doc/2006-03-01/"
            Xmlns string `xml:"xmlns,attr" json:"-" example:"http://s3.amazonaws.com/doc/2006-03-01/"`
          items:
            $ref: '#/components/schemas/resource.CORSRule'
    resource.CORSRule:
      type: object
      properties:
        allowedHeader:
          type: array
          example:
          - '*'
          items:
            type: string
        allowedMethod:
          type: array
          example:
          - GET
          items:
            type: string
        allowedOrigin:
          type: array
          example:
          - '*'
          items:
            type: string
        exposeHeader:
          type: array
          example:
          - ETag
          items:
            type: string
        maxAgeSeconds:
          type: integer
          example: 3000
    resource.ConnectionImageResult:
      type: object
      properties:
        connName:
          type: string
        elapsedTime:
          type: string
        errorMsg:
          type: string
        imageCount:
          type: integer
        provider:
          type: string
        region:
          type: string
        startTime:
          type: string
        success:
          type: boolean
    resource.ConnectionSpecResult:
      type: object
      properties:
        connName:
          type: string
        elapsedTime:
          type: string
        errorMsg:
          type: string
        provider:
          type: string
        region:
          type: string
        specCount:
          type: integer
        startTime:
          type: string
        success:
          type: boolean
    resource.Delete:
      type: object
      properties:
        object:
          type: array
          items:
            $ref: '#/components/schemas/resource.Object'
    resource.DeleteResult:
      type: object
      properties:
        deleted:
          type: array
          description: |-
            The xmlns attribute will be set to "http://s3.amazonaws.com/doc/2006-03-01/"
            Xmlns string `xml:"xmlns,attr" json:"-" example:"http://s3.amazonaws.com/doc/2006-03-01/"`
          items:
            $ref: '#/components/schemas/resource.Object'
    resource.Error:
      type: object
      properties:
        code:
          type: string
          example: NoSuchCORSConfiguration
        message:
          type: string
          example: The CORS configuration does not exist
        requestId:
          type: string
          example: 656c76696e6727732072657175657374
        resource:
          type: string
          example: /example-bucket
    resource.FetchImagesAsyncResult:
      type: object
      properties:
        elapsedTime:
          type: string
        failedRegions:
          type: integer
        fetchOption:
          $ref: '#/components/schemas/model.ImageFetchOption'
        inProgress:
          type: boolean
        namespaceId:
          type: string
        registeredImages:
          type: integer
        resultInDetail:
          type: array
          items:
            $ref: '#/components/schemas/resource.ConnectionImageResult'
        startTime:
          type: string
        succeedRegions:
          type: integer
        totalRegions:
          type: integer
    resource.FetchSpecsAsyncResult:
      type: object
      properties:
        elapsedTime:
          type: string
        failedRegions:
          type: integer
        fetchOption:
          $ref: '#/components/schemas/model.SpecFetchOption'
        inProgress:
          type: boolean
        namespaceId:
          type: string
        registeredSpecs:
          type: integer
        resultInDetail:
          type: array
          items:
            $ref: '#/components/schemas/resource.ConnectionSpecResult'
        startTime:
          type: string
        succeedRegions:
          type: integer
        totalRegions:
          type: integer
    resource.JSONResult:
      type: object
    resource.ListAllMyBucketsResult:
      type: object
      properties:
        buckets:
          type: object
          description: Collection of buckets
          allOf:
          - $ref: '#/components/schemas/resource.Buckets'
        owner:
          type: object
          description: |-
            The xmlns attribute will be set to "http://s3.amazonaws.com/doc/2006-03-01/"
            Xmlns string `xml:"xmlns,attr" json:"-" example:"http://s3.amazonaws.com/doc/2006-03-01/"`
            Owner information for the S3 account
          allOf:
          - $ref: '#/components/schemas/resource.Owner'
    resource.ListBucketResult:
      type: object
      properties:
        isTruncated:
          type: boolean
          example: false
        marker:
          type: string
          example: ""
        maxKeys:
          type: integer
          example: 1000
        name:
          type: string
          description: |-
            The xmlns attribute will be set to "http://s3.amazonaws.com/doc/2006-03-01/"
            Xmlns string `xml:"xmlns,attr" json:"-" example:"http://s3.amazonaws.com/doc/2006-03-01/"`
          example: spider-test-bucket
        prefix:
          type: string
          example: ""
    resource.ListVersionsResult:
      type: object
      properties:
        isTruncated:
          type: boolean
          example: false
        keyMarker:
          type: string
          example: ""
        maxKeys:
          type: integer
          example: 1000
        name:
          type: string
          description: |-
            The xmlns attribute will be set to "http://s3.amazonaws.com/doc/2006-03-01/"
            Xmlns string `xml:"xmlns,attr" json:"-" example:"http://s3.amazonaws.com/doc/2006-03-01/"`
          example: spider-test-bucket
        nextKeyMarker:
          type: string
          example: ""
        nextVersionIdMarker:
          type: string
          example: ""
        prefix:
          type: string
          example: ""
        version:
          $ref: '#/components/schemas/resource.Version'
        versionIdMarker:
          type: string
          example: ""
    resource.LocationConstraint:
      type: object
    resource.Object:
      type: object
      properties:
        key:
          type: string
          example: test-object.txt
    resource.Owner:
      type: object
      properties:
        displayName:
          type: string
          example: aws-ap-northeast-2
        id:
          type: string
          example: aws-ap-northeast-2
    resource.PresignedURLResult:
      type: object
      properties:
        expires:
          type: integer
          example: 3600
        method:
          type: string
          example: GET
        presignedURL:
          type: string
          example: '>https://globally-unique-bucket-hctdx3.s3.dualstack.ap-southeast-2.amazonaws.com/test-file.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA***EXAMPLE%2F20250904%2Fap-southeast-2%2Fs3%2Faws4_request&X-Amz-Date=20250904T061448Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=***-signature'
    resource.RestFilterSpecsResponse:
      type: object
      properties:
        spec:
          type: array
          items:
            $ref: '#/components/schemas/model.SpecInfo'
    resource.RestGetAllCustomImageResponse:
      type: object
      properties:
        customImage:
          type: array
          items:
            $ref: '#/components/schemas/model.ImageInfo'
    resource.RestGetAllDataDiskResponse:
      type: object
      properties:
        dataDisk:
          type: array
          items:
            $ref: '#/components/schemas/model.DataDiskInfo'
    resource.RestGetAllK8sClusterResponse:
      type: object
      properties:
        K8sClusterInfo:
          type: array
          items:
            $ref: '#/components/schemas/model.K8sClusterInfo'
    resource.RestGetAllSecurityGroupResponse:
      type: object
      properties:
        securityGroup:
          type: array
          items:
            $ref: '#/components/schemas/model.SecurityGroupInfo'
    resource.RestGetAllSshKeyResponse:
      type: object
      properties:
        sshKey:
          type: array
          items:
            $ref: '#/components/schemas/model.SshKeyInfo'
    resource.RestGetAllSubnetResponse:
      type: object
      properties:
        subnetInfoList:
          type: array
          items:
            $ref: '#/components/schemas/model.SubnetInfo'
    resource.RestGetAllVNetResponse:
      type: object
      properties:
        vNet:
          type: array
          items:
            $ref: '#/components/schemas/model.VNetInfo'
    resource.RestLookupImageRequest:
      type: object
      properties:
        connectionName:
          type: string
        cspImageName:
          type: string
    resource.RestLookupSpecRequest:
      type: object
      properties:
        connectionName:
          type: string
        cspResourceId:
          type: string
    resource.Version:
      type: object
      properties:
        etag:
          type: string
          example: 23228a38faecd0591107818c7281cece
        isLatest:
          type: boolean
          example: true
        key:
          type: string
          example: test-file.txt
        lastModified:
          type: string
          example: 2025-09-04T04:24:12Z
        owner:
          $ref: '#/components/schemas/resource.Owner'
        size:
          type: integer
          example: 23
        storageClass:
          type: string
          example: STANDARD
        versionId:
          type: string
          example: yb4PgjnFVD2LfRZHXBjjsHBkQRHlu.TZ
    resource.VersioningConfiguration:
      type: object
      properties:
        status:
          type: string
          description: |-
            The xmlns attribute will be set to "http://s3.amazonaws.com/doc/2006-03-01/"
            Xmlns string `xml:"xmlns,attr" json:"-" example:"http://s3.amazonaws.com/doc/2006-03-01/"`
          example: Enabled
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    Bearer:
      type: apiKey
      description: "Type \"Bearer\" followed by a space and JWT token ([TBD] Get token\
        \ in http://xxx.xxx.xxx.xxx:xxx/auth)"
      name: Authorization
      in: header
x-original-swagger-version: "2.0"

security:
  - BasicAuth: []
  - Bearer: []
